{"version":3,"file":"static/js/280.51a6aff4.chunk.js","mappings":"wQAMaA,EAMR,SAACC,GACJ,IAAOC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,IAAKC,EAAqCJ,EAArCI,QAAxB,EAA6DJ,EAA5BK,UAAAA,OAAjC,MAA6C,aAA7C,EACMC,EAAUH,IAAYI,EAAAA,EAAAA,GAAuB,CAACN,KAAAA,IAC9CO,EACJP,EACGQ,QAAO,SAACC,EAAOC,EAAMC,GAAd,wBAAyBF,GAAzB,CAAgCE,EAAK,EAAI,MAAQ,GAAID,MAAO,IACnEE,KAAK,KAAOT,EAAU,IAAM,IAEjC,OACE,UAAC,IAAD,CACEU,KAAM,CAACC,UAAW,MAAOC,WAAY,aAAcC,QAAS,eAC5DC,MAAO,CAACC,SAAU,QAFpB,UAIGjB,GACC,SAAC,IAAD,CAAKkB,OAAQ,CAACC,MAAO,EAAGC,IAAK,GAA7B,UACE,SAAC,KAAD,CAAMC,KAAMrB,EAAMsB,MAAOC,EAAAA,EAAAA,YAEzB,MACJ,SAAC,KAAD,CAAMC,GAAIpB,EAASY,MAAO,CAACS,SAAU,UAArC,SACiB,eAAdtB,GACC,iBAAMa,MAAO,CAACU,UAAW,cAAzB,SAAyCpB,KAEzC,SAAC,IAAD,CAAgBqB,KAAMrB,W,+lBChBnBsB,EAGR,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aACZ,IAAKD,IAAWA,EAAME,gBAAgBC,SAAU,OAACF,QAAD,IAACA,IAAAA,EAAcE,QAC7D,OAAO,SAAC,KAAD,CAASV,MAAOC,EAAAA,EAAAA,QAAhB,iCAGT,IAAOQ,EAA8BF,EAA9BE,gBAAiBE,EAAaJ,EAAbI,UAExB,OACE,SAACC,EAAD,WACE,SAACC,EAAD,WACE,6BACGJ,EAAgBK,KAAI,SAACC,GAAD,OACnB,2BACE,yBACE,SAAC,KAAD,UAAOA,EAAMC,WAEf,yBACE,SAAC,KAAD,WACE,SAACC,EAAA,GAAD,CAAeF,MAAOA,EAAOG,mBAAmB,SAGpD,eAAIxB,MAAO,CAACyB,QAAS,IAArB,SAA4BJ,EAAMK,gBATpC,mBAAqBL,EAAMC,YAY3BR,GAAgB,IAAIM,KAAI,SAACO,GAAD,OACxB,SAAC,WAAD,UACGA,EAAIZ,gBAAgBK,KAAI,SAACC,GAAD,OACvB,2BACE,yBACE,SAAC,KAAD,UAAOA,EAAMC,WAEf,yBACE,SAAC,KAAD,WACE,SAACC,EAAA,GAAD,CAAeF,MAAOA,EAAOG,mBAAmB,SAGpD,gBAAIxB,MAAO,CAACyB,QAAS,IAArB,WACE,UAAC,IAAD,CAAK7B,KAAM,CAACgC,IAAK,GAAjB,WACE,SAACC,EAAA,GAAD,CAAMxB,KAAK,cAAcyB,KAAM,GAAI9B,MAAO,CAAC+B,UAAW,MACtD,sCACMJ,EAAIK,QADV,SAEE,SAAC,KAAD,CAAMxB,GAAE,gBAAWmB,EAAIM,MAAf,sBAAkCN,EAAIV,WAA9C,UACE,SAAC,KAAD,WAAOiB,EAAAA,EAAAA,IAAY,CAACD,MAAON,EAAIM,mBAIrC,SAAC,KAAD,CAASjC,MAAO,CAACmC,WAAY,IAA7B,oBACOC,GAAAA,CAAMT,EAAIV,WAAWoB,KAAKpB,GAAW,GAD5C,aAGCI,EAAMK,iBAtBX,mBAAqBC,EAAIV,UAAzB,YAAsCI,EAAMC,YAF3BK,EAAIV,sBAoC/BC,EAAoCoB,EAAAA,GAAAA,IAAAA,WAAH,yGAAGA,CAAH,iCAKjCnB,EAA0BmB,EAAAA,GAAAA,MAAAA,WAAH,+FAAGA,CAAH,2MAUL/B,EAAAA,EAAAA,a,kFC9ExB6B,IAAAA,OAAaG,MAEN,I,YAAMC,GAGR,SAAC,GAA2B,IAAD,EAAzBC,EAAyB,EAAzBA,SAAUxB,EAAe,EAAfA,UACTyB,GAASC,EAAAA,EAAAA,GAGbC,GAAsC,CACtCC,MAAO5B,EACP6B,UAAW,CAACL,SAAAA,EAAUxB,UAAWA,GAAa,MAG1C8B,GAAcC,EAAAA,EAAAA,IAAuBP,GACrCQ,EACyC,eAA7C,UAAAP,EAAOQ,YAAP,eAAaC,iBAAiBC,YAC1BV,EAAOQ,KAAKC,iBAAiBE,6BAC7B,GAEAC,EAAwB,SAAxBA,EACJjC,EACAkC,EACAC,GAEA,IAAMC,GAAmBT,EAAAA,EAAAA,IAAuB3B,EAAMoB,UAChDiB,GAAYrE,EAAAA,GAAAA,GAAuBgC,EAAMoB,SAAU,CACvDkB,KAAM,SACNC,KAAMvC,EAAMJ,YAGd,MAAM,EACJ,2BACE,yBACE,UAAC,IAAD,CAAKrB,KAAM,CAACgC,IAAK,GAAI5B,MAAO,CAAC6D,YAAkC,GAArBC,KAAKC,IAAI,EAAGR,IAAtD,UACGC,IAAkB,SAAC3B,EAAA,GAAD,CAAMxB,KAAK,eAAeL,MAAO,CAACmC,YAAa,OAClE,SAAC,KAAD,CAAM3B,GAAIkD,EAAV,UACE,UAAC,IAAD,CAAK9D,KAAM,CAACgC,IAAK,GAAjB,WACE,SAACC,EAAA,GAAD,CAAMxB,KAAK,WACX,SAAC2D,GAAA,EAAD,CAAgBrD,KAAM8C,eAK9B,yBACE,UAAC,IAAD,CAAK7D,KAAM,CAACgC,IAAK,GAAI5B,MAAO,CAACiE,WAAY,UAAzC,WACE,SAAC,KAAD,CAAMzD,GAAIkD,EAAV,UACE,SAACQ,EAAA,EAAD,CACEjD,UAAW,CAACkD,GAAIC,OAAO/C,EAAMJ,YAC7BoD,WAAY,CAACC,aAAa,EAAMC,cAAc,QAGlD,gCAAQnC,GAAAA,CAAMgC,OAAO/C,EAAMJ,YAAYoB,KAAK+B,OAAOnD,IAAY,GAA/D,sBApBGwC,IADX,gBAyBKR,EACAuB,QAAO,SAACC,GAAD,OAAOzB,EAAAA,EAAAA,IAAuByB,EAAEC,sBAAwBjB,KAC/DrC,KAAI,SAACqD,EAAGE,GAAJ,OAAYrB,EAAsBmB,EAAGlB,EAAQ,EAAW,IAARoB,SAI3D,OAAIjC,EAAOkC,SAEP,SAACC,GAAD,WACE,4BACE,yBACE,gDAML5B,EAAQjC,QAYX,SAAC6D,GAAD,WACE,2BACG5B,EACEuB,QAAO,SAACC,GAAD,OAAOzB,EAAAA,EAAAA,IAAuByB,EAAEC,sBAAwB3B,KAC/D3B,KAAI,SAACqD,GAAD,OAAOnB,EAAsBmB,EAAG,GAAG,WAd5C,SAACI,GAAD,WACE,4BACE,yBACE,mEAiBNjC,IAAuCkC,EAAAA,EAAAA,IAAH,6kBAyBpCD,GAAyBvC,EAAAA,GAAAA,MAAAA,WAAH,gGAAGA,CAAH,yIAMJ/B,EAAAA,EAAAA,aC3HXwE,GAGR,SAAC,GAAuB,IAAD,EAArBlE,EAAqB,EAArBA,MAAO4B,EAAc,EAAdA,SACNuC,EAAuC,SAAjC,UAAAnE,EAAMoE,kBAAN,eAAkB7B,YAAuBvC,EAAMoE,WAAa,KAClEC,EAAgB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAKE,iBACxBC,EAAcD,GAChBE,EAAAA,EAAAA,IAAiBF,EAAiBG,eAAgBH,EAAiBI,wBACnE,KACEC,GAAOC,EAAAA,EAAAA,IAAcL,GACrBM,EAAoC,yBAArB5E,EAAMuC,WAAwCvC,EAAM4E,aAAe,GAExF,OACE,UAAC,IAAD,CAAKC,QAAS,CAACC,WAAY,GAAIC,OAAQ,IAAK5F,MAAO,CAACJ,KAAM,GAA1D,WACE,SAAC,IAAD,CACE8F,QAAS,CAACG,SAAU,IACpBC,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CX,KAAM,CAACE,WAAY,SAAUmG,eAAgB,iBAH/C,UAKE,SAAC,KAAD,WACE,SAAC/B,EAAA,EAAD,CAAWjD,UAAW,CAACkD,GAAIC,OAAOvD,EAAMI,mBAG5C,UAAC,IAAD,CACEjB,MAAO,CAACD,QAAS,OAAQmG,oBAAqB,kBAAmBtE,IAAK,IACtEkE,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CmF,QAAS,CAACG,SAAU,IAHtB,WAKE,UAAC,IAAD,CAAKjG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,oBACsB,yBAArBgB,EAAMuC,YACL,UAAC,IAAD,CAAKxD,KAAM,CAACgC,IAAK,GAAjB,WACE,SAACC,EAAA,GAAD,CAAMxB,KAAK,oBADb,sBAKA,UAAC,IAAD,CAAKT,KAAM,CAACgC,IAAK,GAAjB,WACE,SAACC,EAAA,GAAD,CAAMxB,KAAK,gBADb,oBAMHQ,EAAMsF,YACL,UAAC,IAAD,CAAKvG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,yBACA,SAAC,IAAD,CAAKD,KAAM,CAACgC,IAAK,GAAjB,SAAsBf,EAAMsF,gBAGhC,UAAC,IAAD,CAAKvG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAAWG,MAAO,CAACoG,UAAW,IAA7D,WACE,SAAC,KAAD,kBACCpB,GACC,UAAC,IAAD,CAAKpF,KAAM,CAACC,UAAW,MAAO+B,IAAK,EAAG9B,WAAY,UAAlD,WACE,SAAC,KAAD,CAAoBmC,MAAO+C,EAAI/C,MAAOoE,OAAQrB,EAAIqB,UAClD,SAAC,KAAD,CAAM7F,IAAI8F,EAAAA,EAAAA,IAAetB,EAAKnE,GAA9B,UACE,SAAC,KAAD,WAAOqB,EAAAA,EAAAA,IAAY8C,UAIvB,aAGJ,UAAC,IAAD,CAAKpF,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,kBACCmF,KAAQuB,EAAAA,EAAAA,IAAsBvB,EAAIwB,eACjC,UAAC,IAAD,YACE,SAAC,IAAD,WACE,SAACC,EAAA,EAAD,CACEC,UAAQ,EACRF,aAAcxB,EAAIwB,aAClBG,oBAAqBxB,GAAe,eACpCyB,WAAY5B,EAAI6B,mBAChBC,OAAOC,EAAAA,EAAAA,IAAgBxB,EAAMP,EAAIwB,mBAGrC,UAACQ,EAAA,EAAD,CAAOnH,UAAU,MAAMoH,QAAS,EAAGnH,WAAW,SAA9C,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,eAAeC,MAAOC,EAAAA,EAAAA,WACjC,SAAC,KAAD,CAAMC,IAAI8F,EAAAA,EAAAA,IAAetB,EAAKnE,GAA9B,SAAuCA,EAAMmB,gBAIjD,eAKLnB,EAAMa,cACL,UAAC,IAAD,CAAKgE,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,0BACCf,EAAMa,gBAIX,UAAC,IAAD,CAAKgE,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,wBACA,SAAChB,EAAD,CAAgCC,MAAOA,OAGnB,yBAArBA,EAAMuC,aACL,UAAC,IAAD,CAAKsC,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,2BACA,SAACY,GAAD,CAAkCvB,UAAWJ,EAAMI,UAAWwB,SAAUA,QAI5E,UAAC,IAAD,CAAKiD,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,2BACA,SAACsF,EAAA,EAAD,CAAsBrG,MAAOA,EAAOsG,aAAW,OAGhD1B,EAAazE,OAAS,IACrB,UAAC,IAAD,CAAK0E,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,uCACA,SAACwF,GAAA,EAAD,CAAsBC,SAAU5B,EAAcxE,UAAWJ,EAAMI,mBAO5DqG,GAAwB,kBACnC,UAAC,IAAD,CAAK5B,QAAS,CAACC,WAAY,IAAK3F,MAAO,CAACJ,KAAM,GAA9C,WACE,SAAC,IAAD,CACE8F,QAAS,CAACG,SAAU,IACpBC,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CX,KAAM,CAACE,WAAY,SAAUmG,eAAgB,iBAH/C,UAKE,SAAC,KAAD,CAAS3F,MAAOC,EAAAA,EAAAA,QAAhB,kCAEF,UAAC,IAAD,CACEP,MAAO,CAACD,QAAS,OAAQmG,oBAAqB,kBAAmBtE,IAAK,IACtEkE,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CmF,QAAS,CAACG,SAAU,IAHtB,WAKE,SAAC,IAAD,CAAKjG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,UACE,SAAC,KAAD,uBAEF,UAAC,IAAD,CAAKD,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAAWG,MAAO,CAACoG,UAAW,IAA7D,WACE,SAAC,KAAD,kBADF,aAGA,UAAC,IAAD,CAAKxG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,kBADF,gBAKF,UAAC,IAAD,CAAK6F,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,wBACA,SAAChB,EAAD,CAAgCC,MAAO,c,iCCzJhC0G,GAKR,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MAC5BC,EAAYC,EAAAA,OAAoC,MAChDC,EAAgBD,EAAAA,OAAoC,MAEpDE,GAAiBC,EAAAA,GAAAA,gBAAe,CACpCC,MAAOT,EAAOxG,OACdkH,iBAAkB,kBAAMN,EAAUO,SAClCC,aAAc,kBAAM,IACpBC,SAAU,KAENC,EAAcP,EAAeQ,eAC7BC,EAAQT,EAAeU,kBAW7B,OATAZ,EAAAA,WAAgB,WACd,GAAIC,EAAcK,QAAS,CACzB,IAAMO,EAAKZ,EAAcK,QACrBO,GAAMA,aAAcC,aAAe,mBAAoBD,GACzDA,EAAGE,eAAe,CAACC,MAAO,eAG7B,CAACpB,KAGF,SAACqB,GAAD,CAAoBC,IAAKnB,EAAzB,UACE,SAAC,MAAD,CAAOoB,aAAcV,EAArB,SACGE,EAAMpH,KAAI,YAAgC,IAA9B6H,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,IAAKpH,EAAiB,EAAjBA,KAAMqH,EAAW,EAAXA,MACvBC,EAAQ5B,EAAOyB,GACrB,OACE,SAACI,GAAD,CAEEC,QAASxH,EACTyH,OAAQJ,EACRK,SAAUJ,IAAU3B,EACpBsB,IAAKK,IAAU3B,EAAUK,OAAgB2B,EACzCC,QAAS,SAACjF,GAIJA,EAAEkF,kBAAkBhB,aAAelE,EAAEkF,OAAOC,QAAQ,MAG9C,OAAVlC,QAAU,IAAVA,GAAAA,EAAaD,IAAY2B,EAAQA,OAAQK,IAb7C,UAgBE,SAAC,IAAD,CACEzJ,MAAO,CAAC6J,OAAQ/H,GAChB4D,QAAS,CAACoE,KAAM,GAAI3J,MAAO,IAC3BP,KAAM,CAACC,UAAW,SAAUoG,eAAgB,SAAUrE,IAAK,GAC3DkE,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAJ5C,SAMa,cAAVoH,GACC,SAACoC,GAAD,CAA4BX,MAAOA,KAEnC,SAACY,GAAD,CAAwBZ,MAAOA,OAxB9BF,WAmCNJ,IAAqBxG,EAAAA,EAAAA,IAAO2H,GAAAA,IAAV,qFAAG3H,CAAH,iDAGN/B,EAAAA,EAAAA,SAIZ8I,IAAe/G,EAAAA,EAAAA,IAAO4H,GAAAA,IAAV,+EAAG5H,CAAH,2FAQP/B,EAAAA,EAAAA,SAEd,SAAC4J,GAAD,OACAA,EAAEX,UAAF,sBACejJ,EAAAA,EAAAA,OADf,0BAEUA,EAAAA,EAAAA,QAFV,gDAIiBA,EAAAA,EAAAA,OAJjB,sBASEwJ,GAAiE,SAAC,GAAa,IAAZX,EAAW,EAAXA,MAChEjD,EAAgCiD,EAAhCjD,UAAWiE,EAAqBhB,EAArBgB,OAAQnJ,EAAamI,EAAbnI,UAC1B,OACE,iCACE,UAAC,IAAD,CAAKrB,KAAM,CAACgC,IAAK,EAAG/B,UAAW,MAAOC,WAAY,cAAlD,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,cACV8F,GACD,gBAAKnG,MAAO,CAACJ,KAAM,KACjBwK,GAA4C,SAACC,EAAA,EAAD,CAAKC,OAAO,UAAZ,2BAAnC,SAACD,EAAA,EAAD,CAAKC,OAAO,OAAZ,yBAGb,SAAC,KAAD,CAAShK,MAAOC,EAAAA,EAAAA,QAAgBP,MAAO,CAACuK,WAAY,QAApD,SACGtJ,GACC,6CACe,SAACiD,EAAA,EAAD,CAAWjD,UAAW,CAACkD,GAAIC,OAAOnD,SAGjD,2BAOJ+I,GAA6D,SAAC,GAAa,IAAZZ,EAAW,EAAXA,MAC5DgB,EAAgChB,EAAhCgB,OAAQjE,EAAwBiD,EAAxBjD,UAAWlF,EAAamI,EAAbnI,UACpB+D,EAAwC,SAA5B,OAANoF,QAAM,IAANA,OAAA,EAAAA,EAAQnF,WAAW7B,YAAuBgH,EAAOnF,WAAa,KAE1E,OACE,iCACE,UAAC,IAAD,CAAKrF,KAAM,CAACgC,IAAK,EAAG/B,UAAW,OAA/B,UAC0B,0BAAjB,OAANuK,QAAM,IAANA,OAAA,EAAAA,EAAQhH,aACP,SAACvB,EAAA,GAAD,CAAMxB,KAAK,qBAEX,SAACwB,EAAA,GAAD,CAAMxB,KAAK,iBAEb,SAAC6D,EAAA,EAAD,CAAWjD,UAAW,CAACkD,GAAIC,OAAOnD,UAEpC,UAAC,IAAD,CAAKrB,KAAM,CAACgC,IAAK,EAAG/B,UAAW,OAA/B,UACGsG,IAAa,SAACkE,EAAA,EAAD,UAAMlE,IACnBiE,GAAUpF,IACT,SAACqF,EAAA,EAAD,WACE,SAAC,MAAD,CACEpI,MAAO+C,EAAI/C,MACXpB,MAAO,CAACmB,QAASoI,EAAOpI,QAASf,UAAWmJ,EAAOnJ,WAFrD,UAIE,UAAC,IAAD,CAAKrB,KAAM,CAACgC,IAAK,EAAG/B,UAAW,MAAOC,WAAY,UAAlD,WACE,SAAC,KAAD,CAAoBmC,MAAO+C,EAAI/C,MAAOoE,OAAQrB,EAAIqB,OAAQvE,KAAM,KAC/DI,EAAAA,EAAAA,IAAY8C,iB,mCC7HhBwF,GAMR,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,WAAYlD,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACjD,OACE,UAACiD,GAAA,EAAD,YACE,4BACE,0BACGF,IAAiB,eAAIzK,MAAO,CAAC4K,SAAU,KAAtB,wBAClB,eAAI5K,MAAO,CAAC4K,SAAU,KAAtB,wBACA,eAAI5K,MAAO,CAAC4K,SAAU,KAAtB,kBACA,eAAI5K,MAAO,CAACgG,MAAO,KAAnB,uBAGJ,2BACGwB,EAAOpG,KAAI,SAACgI,GAAD,OACV,UAAC,WAAD,YACE,SAACyB,GAAD,CACEnB,QAAS,SAACjF,GAIJA,EAAEkF,kBAAkBhB,aAAelE,EAAEkF,OAAOC,QAAQ,MAG9C,OAAVlC,QAAU,IAAVA,GAAAA,EAAaD,IAAY2B,EAAQA,OAAQK,IAR7C,UAWE,SAACqB,GAAD,CACE1B,MAAOA,EACPqB,cAAeA,EACfC,WAAYA,EACZK,UAAWtD,IAAY2B,MAG1B3B,IAAY2B,GACX,SAAC4B,GAAD,CAAoBN,WAAYA,EAAYtB,MAAOA,SACjDK,IArBeL,EAAMnI,WAAamI,EAAMjD,oBA6BlD8E,GAAW,kBAAM,iBAAMjL,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,mBAEjByK,GAGDnD,EAAAA,MAAW,YAA0B,IAAxBuB,EAAuB,EAAvBA,MAAOsB,EAAgB,EAAhBA,WAChBN,EAAqBhB,EAArBgB,OAAQnJ,EAAamI,EAAbnI,UACf,IAAKmJ,EACH,OAAO,kBAET,IAAM3E,EAAqC,yBAAtB2E,EAAOhH,WAAwCgH,EAAO3E,aAAe,GAEpFyF,EACkB,yBAAtBd,EAAOhH,WACHgG,EAAM+B,IAAI3G,QACR,SAACC,GAAD,MACmB,qBAAjBA,EAAErB,YAAqCgB,OAAOK,EAAExD,WAAamD,OAAOgG,EAAOnJ,cAE/E,GAEN,OACE,eAAIjB,MAAO,CAACoL,WAAY7K,EAAAA,EAAAA,QAAxB,UACE,gBAAI8K,QAAS,EAAGrL,MAAO,CAACsL,SAAU,GAAI5F,QAAS,GAA/C,UACG0E,EAAO1I,cACN,SAAC,IAAD,CAAKgE,QAAS,CAACC,WAAY,GAAIE,SAAU,IAAzC,SAA+CuE,EAAO1I,cAEvD0I,EAAOrJ,gBAAgBC,QAAU0J,GAChC,SAACa,GAAD,WACE,6BACGnB,EAAOrJ,gBAAgBK,KAAI,SAACC,GAAD,OAC1B,2BACE,eAAIrB,MAAO,CAACC,SAAU,KAAtB,SAA6BoB,EAAMC,SACnC,yBACE,SAACC,EAAA,GAAD,CAAeF,MAAOA,EAAOG,mBAAmB,OAElD,eAAIxB,MAAO,CAACyB,QAAS,IAArB,SAA4BJ,EAAMK,gBALpC,mBAAqBL,EAAMC,WAQ5B4J,EAAwB9J,KAAI,SAACO,GAAD,OAC3B,SAAC,WAAD,UACGA,EAAIZ,gBAAgBK,KAAI,SAACC,GAAD,OACvB,2BACE,wBAAKA,EAAMC,SACX,yBACE,SAACC,EAAA,GAAD,CAAeF,MAAOA,EAAOG,mBAAmB,OAElD,gBAAIxB,MAAO,CAACyB,QAAS,IAArB,WACE,UAAC,IAAD,CAAK7B,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,cAAcyB,KAAM,MAC/B,sCACMH,EAAIK,QADV,SAEE,SAAC,KAAD,CAAMxB,GAAE,gBAAWmB,EAAIM,MAAf,sBAAkCN,EAAIV,WAA9C,UACE,SAAC,KAAD,WAAOiB,EAAAA,EAAAA,IAAY,CAACD,MAAON,EAAIM,YAHnC,YAKQG,GAAAA,CAAMT,EAAIV,WAAWoB,KACzBpB,GACA,GAPJ,iBAWDI,EAAMK,iBAnBX,mBAAqBC,EAAIV,UAAzB,YAAsCI,EAAMC,YAF3BK,EAAIV,cA4B1ByJ,IACC,2BACE,qDACA,yBACE,SAACtD,GAAA,EAAD,CAAsBC,SAAU5B,EAAcxE,UAAWA,eAOnE,SAAC,IAAD,CAAKyE,QAAS,CAACC,WAAY,GAAIE,SAAU,IAAzC,uDAOJiF,GAKDjD,EAAAA,MAAW,YAAoD,IAAlDuB,EAAiD,EAAjDA,MAAOqB,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,WAAYK,EAAe,EAAfA,UAC3CX,EAAqChB,EAArCgB,OAAQjE,EAA6BiD,EAA7BjD,UAAWlF,EAAkBmI,EAAlBnI,UAAWkK,EAAO/B,EAAP+B,IAE/BK,EAAWT,EACb,CAAClH,YAAa,EAAG4H,WAAW,aAAD,OAAelL,EAAAA,EAAAA,iBAC1C,CAACsD,YAAa,GAEZmB,EAAwC,SAA5B,OAANoF,QAAM,IAANA,OAAA,EAAAA,EAAQnF,WAAW7B,YAAuBgH,EAAOnF,gBAAawE,EACpEvE,EAAgB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAKE,iBACxBC,EAAcD,GAChBE,EAAAA,EAAAA,IAAiBF,EAAiBG,eAAgBH,EAAiBI,wBACnE,KACEC,GAAOC,EAAAA,EAAAA,IAAcL,GAE3B,OAAKiF,EASApF,GAKH,gCACGyF,IACC,eAAIzK,OAAK,QAAGiE,WAAY,UAAauH,GAArC,UACE,UAACxE,EAAA,EAAD,CAAOnH,UAAU,MAAMoH,QAAS,EAAhC,WACE,SAACyE,GAAD,CAAoBC,KAAMZ,IACzB5E,IAAa,SAAC8E,GAAD,UAIpB,eAAIjL,MAAOyK,EAAgB,GAAKe,EAAhC,UACE,UAACxE,EAAA,EAAD,CAAOnH,UAAU,MAAMoH,QAAS,EAAhC,WACIwD,IAAiB,SAACiB,GAAD,CAAoBC,KAAMZ,KAC7C,UAAC/D,EAAA,EAAD,CAAOnH,UAAU,SAASoH,QAAS,EAAnC,WACE,SAAC/C,EAAA,EAAD,CAAWjD,UAAW,CAACkD,GAAIC,OAAOnD,OAC9B,OAAHkK,QAAG,IAAHA,OAAA,EAAAA,EAAKnK,QAAS,GACb,SAAC4K,GAAD,CACEnB,cAAeA,EACfC,WAAYA,EACZmB,OAAQV,EAHV,wBAIUA,EAAInK,OAJd,aAKwB,yBAAtBoJ,EAAOhH,YACT,UAAC,IAAD,CAAKxD,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAWE,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAA1D,WACE,SAACsB,EAAA,GAAD,CAAMxB,KAAK,kBAAkByB,KAAM,GAAIxB,MAAOC,EAAAA,EAAAA,UADhD,sBAKA,UAAC,IAAD,CAAKX,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAWE,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAA1D,WACE,SAACsB,EAAA,GAAD,CAAMxB,KAAK,cAAcyB,KAAM,GAAIxB,MAAOC,EAAAA,EAAAA,UAD5C,2BAOR,0BACIgG,EAAAA,EAAAA,IAAsBvB,EAAIwB,gBAC1B,UAAC,IAAD,CAAKtG,OAAQ,CAAC0F,OAAQ,GAAtB,WACE,SAAC,IAAD,CAAKF,QAAS,CAACoE,KAAM,GAArB,UACE,SAACrD,EAAA,EAAD,CACEC,UAAQ,EACRF,aAAcxB,EAAIwB,aAClBG,oBAAqBxB,GAAe,eACpCyB,WAAY5B,EAAI6B,mBAChBC,OAAOC,EAAAA,EAAAA,IAAgBxB,EAAMP,EAAIwB,mBAGrC,UAACQ,EAAA,EAAD,CAAOnH,UAAU,MAAM6F,QAAS,CAACoE,KAAM,GAAI7C,QAAS,EAAGnH,WAAW,SAAlE,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,eAAeC,MAAOC,EAAAA,EAAAA,WACjC,SAAC,KAAD,CAAMC,IAAI8F,EAAAA,EAAAA,IAAetB,EAAKoF,GAA9B,SAAwCA,EAAOpI,mBAKvD,yBACE,UAAC,IAAD,CAAKpC,KAAM,CAACC,UAAW,MAAO+B,IAAK,EAAG9B,WAAY,UAAlD,WACE,SAAC,KAAD,CAAoBmC,MAAO+C,EAAI/C,MAAOoE,OAAQrB,EAAIqB,UAClD,SAAC,KAAD,CAAM7F,GAAE,gBAAWwE,EAAI/C,MAAf,sBAAkChB,GAA1C,UACE,SAAC,KAAD,WAAOiB,EAAAA,EAAAA,IAAY8C,gBA5DpB,qBARL,iCACE,eAAIhF,MAAO,CAACiE,WAAY,SAAUJ,YAAa,IAA/C,SAAqDsC,IAAa,SAAC8E,GAAD,OAClE,eAAII,QAAS,UA0EfR,GAAevI,EAAAA,GAAAA,GAAAA,WAAH,6EAAGA,CAAH,6BAEA/B,EAAAA,EAAAA,QAIZgL,GAAejJ,EAAAA,GAAAA,MAAAA,WAAH,6EAAGA,CAAH,6DAcLsJ,GAA4D,SAAC,GAKnE,IAJLlB,EAII,EAJJA,WACAD,EAGI,EAHJA,cACAoB,EAEI,EAFJA,OACAC,EACI,EADJA,SAEA,EAAwBjE,EAAAA,UAAe,GAAvC,eAAO8D,EAAP,KAAaI,EAAb,KACA,EAA8BlE,EAAAA,WAA9B,eAAOJ,EAAP,KAAgBC,EAAhB,KACMF,EAASK,EAAAA,SACb,kBACEgE,EAAOzK,KAAI,SAAC+I,GAAD,MAAQ,CACjBC,OAAQD,EACRhE,UAAWgE,EAAEhE,gBAAasD,EAC1BxI,UAAWkJ,EAAElJ,UACbkK,IAAK,SAET,CAACU,IAYH,OACE,iCACE,SAACG,EAAA,EAAD,CAAYtC,QAAS,kBAAMqC,GAAQ,IAAnC,SAA2CD,KAC3C,UAACG,GAAA,GAAD,CACEC,OAAQP,EACRQ,mBAAiB,EACjBC,sBAAoB,EACpBC,QAAS,kBAAMN,GAAQ,IACvB/L,MAAO,CAACgG,MAAO,MAAO4E,SAAU,SAChC0B,MAnBQ,WACZ,GAAI7B,EAAe,CACjB,IAAMtE,EAAY0F,EAAO,GAAG1F,UAC5B,GAAIA,EACF,MAAM,8CAAN,OAAqDA,GAGzD,MAAM,yCAYKmG,GANT,UAQGX,IACC,SAAC,IAAD,CAAKjG,QAAS,CAACE,OAAQ,GAAI8D,QAAS,SAACjF,GAAD,OAAOA,EAAE8H,mBAA7C,UACE,SAAC/B,GAAD,CACEE,WAAYA,EACZD,cAAeA,EACfhD,QAASA,EACTC,WAAYA,EACZF,OAAQA,OAId,SAACyE,GAAA,GAAD,WACE,SAACO,GAAA,GAAD,CAAQlC,OAAO,UAAUZ,QAAS,kBAAMqC,GAAQ,IAAhD,yBASJL,GAAsE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMjC,EAAR,EAAQA,QAAR,OAC1E,SAAC+C,GAAD,CAA0B/C,QAASA,EAASgD,MAAOf,EAAnD,UACE,SAAC9J,EAAA,GAAD,CAAMxB,KAAK,kBAAkByB,KAAM,QAIjC2K,GAA2BnK,EAAAA,GAAAA,OAAAA,WAAH,yFAAGA,CAAH,+LAQ1BqK,EAAAA,IAEa,qBAAED,MAAoB,eAAiB,mBAOlDC,EAAAA,GACcpM,EAAAA,EAAAA,M,YCvVPqM,GAAmF,SAC9F9N,GACI,IAAD,EACG4D,GAASC,EAAAA,EAAAA,GACbkK,GACA,CACE/J,UAAW,CACTL,SAAU3D,EAAM2D,SAChBqK,aAAchO,EAAMgO,gBAK1B,EAAqDjF,EAAAA,SAAc,WAAO,IAAD,IACvE,MAAkD,eAA9C,UAAAnF,EAAOQ,YAAP,mBAAaC,wBAAb,eAA+BC,YAC1B,CAAC2J,iBAAkB,GAAIjM,aAAc,GAAI4J,YAAY,GAEvD,CACLqC,kBAAkB,QAAIrK,EAAOQ,KAAKC,iBAAiB6J,uBAAuBC,MACxE,SAACC,EAAGC,GAAJ,OAAU/I,OAAO+I,EAAElM,WAAamD,OAAO8I,EAAEjM,cAE3CH,cAAc,QAAI4B,EAAOQ,KAAKC,iBAAiBiK,mBAAmBH,MAChE,SAACC,EAAGC,GAAJ,OAAU/I,OAAO+I,EAAElM,WAAamD,OAAO8I,EAAEjM,cAE3CyJ,WAAYhI,EAAOQ,KAAKC,iBAAiB6J,sBAAsBK,MAC7D,SAACC,GAAD,OAAOA,EAAE7H,aAAazE,OAAS,QAGlC,CAAC0B,EAAOQ,OAfJ6J,EAAP,EAAOA,iBAAkBjM,EAAzB,EAAyBA,aAAc4J,EAAvC,EAAuCA,WAiBvC,OAAIhI,EAAOkC,UAAYlC,EAAOQ,MACrB,SAAC,GAAD,CAA2B4J,aAAchO,EAAMgO,gBAItD,SAACS,GAAD,CACE9K,SAAU3D,EAAM2D,SAChBiI,WAAYA,EACZtB,MAAO,CACLgB,OAAQ2C,EAAiB,GACzB9L,UAAS,UAAE8L,EAAiB,UAAnB,aAAE,EAAqB9L,UAChCkF,UAAWrH,EAAMgO,aACjB3B,IAAK,mBAAI4B,IAAJ,QAAyBjM,IAAcmM,MAC1C,SAACC,EAAGC,GAAJ,OAAU/I,OAAO+I,EAAElM,WAAamD,OAAO8I,EAAEjM,kBAO7C4L,IAA+B/H,EAAAA,EAAAA,IAAH,6mBAsB9B0I,GAAAA,GACAC,GAAAA,IAGSF,GAKR,SAAC,GAAoD,IAAD,IAAlD9K,EAAkD,EAAlDA,SAAU2G,EAAwC,EAAxCA,MAAOsB,EAAiC,EAAjCA,WAAYgD,EAAqB,EAArBA,gBAC3BtD,EAA0BhB,EAA1BgB,OAAQjE,EAAkBiD,EAAlBjD,UAAWgF,EAAO/B,EAAP+B,IACpBnG,EAAyC,SAA7B,OAANoF,QAAM,IAANA,GAAA,UAAAA,EAAQnF,kBAAR,eAAoB7B,YAAuBgH,EAAOnF,WAAa,KACrEC,EAAgB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAKE,iBACxBC,EAAcD,GAChBE,EAAAA,EAAAA,IAAiBF,EAAiBG,eAAgBH,EAAiBI,wBACnE,KACEC,GAAOC,EAAAA,EAAAA,IAAcL,GAErB+F,EACmB,0BAAjB,OAANd,QAAM,IAANA,OAAA,EAAAA,EAAQhH,YACJgG,EAAM+B,IAAI3G,QACR,SAACC,GAAD,MACmB,qBAAjBA,EAAErB,YAAqCgB,OAAOK,EAAExD,WAAamD,OAAOgG,EAAOnJ,cAE/E,GAEN,OACE,UAAC,IAAD,CAAKyE,QAAS,CAACC,WAAY,GAAIC,OAAQ,IAAK5F,MAAO,CAACJ,KAAM,GAA1D,WACE,UAAC,IAAD,CACE8F,QAAS,CAACG,SAAU,IACpBC,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CX,KAAM,CAACE,WAAY,UAHrB,UAKGqG,GACC,UAAC,IAAD,CAAKvG,KAAM,CAACgC,IAAK,GAAI9B,WAAY,UAAjC,WACE,SAAC,KAAD,UAAUqG,IACTuH,GACC,SAACC,EAAA,EAAD,CAASC,QAAQ,cACfxD,GACF,SAACC,EAAA,EAAD,CAAKC,OAAO,UAAZ,2BAEA,SAACD,EAAA,EAAD,CAAKC,OAAO,OAAZ,yBAIJ,SAAC,KAAD,CAAShK,MAAOC,EAAAA,EAAAA,QAAhB,oCAEF,gBAAKP,MAAO,CAACJ,KAAM,SAErB,UAAC,IAAD,CACEI,MAAO,CAACD,QAAS,OAAQmG,oBAAqB,kBAAmBtE,IAAK,GAAIwE,UAAW,IACrFN,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CmF,QAAS,CAACG,SAAU,IAHtB,WAKE,UAAC,IAAD,CAAKjG,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,2BACEuK,GAMA,UAAC,IAAD,CAAKxK,KAAM,CAACgC,IAAK,GAAI5B,MAAO,CAACiE,WAAY,UAAzC,UACyB,yBAAtBmG,EAAOhH,YACN,SAACvB,EAAA,GAAD,CAAMxB,KAAK,qBAEX,SAACwB,EAAA,GAAD,CAAMxB,KAAK,iBAEb,SAAC6D,EAAA,EAAD,CAAWjD,UAAW,CAACkD,GAAIC,OAAOgG,EAAOnJ,cACxCkK,EAAInK,OAAS,IACZ,SAAC4K,GAAD,CAAyBnB,eAAa,EAACC,WAAYA,EAAYmB,OAAQV,EAAvE,oBACOA,EAAInK,OADX,kBAbJ,UAAC,IAAD,CAAKpB,KAAM,CAACgC,IAAK,GAAjB,WACE,SAACC,EAAA,GAAD,CAAMxB,KAAK,oBADb,cAoBJ,UAAC,IAAD,CAAKT,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,kBACoC,SAA7B,OAANuK,QAAM,IAANA,GAAA,UAAAA,EAAQnF,kBAAR,eAAoB7B,aACnB,UAAC,IAAD,CAAKxD,KAAM,CAACC,UAAW,MAAO+B,IAAK,EAAG9B,WAAY,UAAlD,WACE,SAAC,KAAD,CACEmC,MAAOmI,EAAOnF,WAAWhD,MACzBoE,OAAQ+D,EAAOnF,WAAWoB,UAE5B,SAAC,KAAD,CAAM7F,IAAI8F,EAAAA,EAAAA,IAAe8D,EAAOnF,WAAYmF,GAA5C,UACE,SAAC,KAAD,WAAOlI,EAAAA,EAAAA,IAAYkI,EAAOnF,mBAI9B,WAGJ,UAAC,IAAD,CAAKrF,KAAM,CAACgC,IAAK,EAAG/B,UAAW,UAA/B,WACE,SAAC,KAAD,kBACCuK,GAAUpF,KAAQuB,EAAAA,EAAAA,IAAsBvB,EAAIwB,eAC3C,UAAC,IAAD,YACE,SAAC,IAAD,WACE,SAACC,EAAA,EAAD,CACEC,UAAQ,EACRF,aAAcxB,EAAIwB,aAClBG,oBAAqBxB,GAAe,eACpCyB,WAAY5B,EAAI6B,mBAChBC,OAAOC,EAAAA,EAAAA,IAAgBxB,EAAMP,EAAIwB,mBAGrC,UAACQ,EAAA,EAAD,CAAOnH,UAAU,MAAMoH,QAAS,EAAGnH,WAAW,SAA9C,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,eAAeC,MAAOC,EAAAA,EAAAA,WACjC,SAAC,KAAD,CAAMC,IAAI8F,EAAAA,EAAAA,IAAetB,EAAKoF,GAA9B,SAAwCA,EAAOpI,gBAInD,cAIN,UAAC,IAAD,CAAK0D,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,wBACA,SAAChB,EAAD,CAAgCC,MAAOuJ,EAAQtJ,aAAcoK,QAE/D,UAAC,IAAD,CAAKxF,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,2BACA,SAACY,GAAD,CAAkCvB,UAAS,OAAEmJ,QAAF,IAAEA,OAAF,EAAEA,EAAQnJ,UAAWwB,SAAUA,QAE5E,UAAC,IAAD,CAAKiD,QAAS,CAACtF,IAAK,IAAKR,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAA1D,WACE,SAAC,KAAD,2BACA,SAACsF,EAAA,EAAD,CAAsBrG,MAAOuJ,EAAQjD,aAAW,WAM3C0G,GAA4B,SAAC,GAAD,IAAEf,EAAF,EAAEA,aAAF,OACvC,SAACS,GAAD,CACE9K,SAAU,CAAC1D,KAAM,CAAC,KAClBqK,MAAO,CAAC+B,IAAK,GAAIf,OAAQ,KAAMnJ,UAAW,IAAKkF,UAAW2G,GAC1DpC,YAAY,EACZgD,iBAAe,K,oCC1MNI,GAA+B,SAAC,GAOtC,IANLrL,EAMI,EANJA,SACAsL,EAKI,EALJA,wBACAC,EAII,EAJJA,0BACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEA,GAOIC,EAAAA,GAAAA,IAAqB3L,EAAUwL,EAAQ,CAACD,2BAA2B,IANrErG,EADF,EACEA,MACAoF,EAFF,EAEEA,iBACAjM,EAHF,EAGEA,aACAuN,EAJF,EAIEA,oBACAC,EALF,EAKEA,QACA1J,EANF,EAMEA,QAGFiD,EAAAA,WAAgB,WACVoG,EAAOM,MAGXD,MACC,CAACL,EAAOM,KAAMR,EAAyBO,IAE1C,IAAME,GAAUC,EAAAA,GAAAA,GAAiB9G,EAAOoF,EAAkBjM,EAAcuN,GAElEK,EAAe,SAACtF,GACpB,IAAMuF,EACM,SAAVhH,EACI,CAAC/D,MAAW,OAALwF,QAAK,IAALA,OAAA,EAAAA,EAAOnI,aAAcgN,EAAOrK,OAAY,OAALwF,QAAK,IAALA,OAAA,EAAAA,EAAOnI,YAAkB,IACnE,CAACkF,WAAgB,OAALiD,QAAK,IAALA,OAAA,EAAAA,EAAOjD,aAAc8H,EAAO9H,YAAiB,OAALiD,QAAK,IAALA,OAAA,EAAAA,EAAOjD,YAAkB,IACnF+H,GAAU,kBAAID,GAAWU,KAGrBlH,EACJ+G,EAAQI,MAAK,SAACzB,GAAD,OACXc,EAAOrK,KACHQ,OAAO+I,EAAElM,YAAcmD,OAAO6J,EAAOrK,QACrCqK,EAAO9H,WACPgH,EAAEhH,YAAc8H,EAAO9H,cAExBqI,EAAQ,GAMTK,GACHb,GAA6BQ,EAAQnB,MAAK,SAACyB,GAAD,OAAOA,EAAE3I,aAChD4I,EAAkBhC,EAAiBM,MAAK,SAACC,GAAD,OAAOA,EAAE7H,aAAazE,OAAS,KAc7E,OACE,gCACG6N,IACC,UAAC,IAAD,CACEjP,KAAM,CAACqG,eAAgB,gBAAiBnG,WAAY,UACpDgG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CmF,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpC3F,MAAO,CAACgP,cAAe,GAJzB,WAME,SAAC,KAAD,4BACA,gBAAKhP,MAAO,CAACE,OAAQ,WAArB,UACE,SAAC+O,EAAA,EAAD,CACEC,YAAa,IAAIC,IAAI,CAACxH,IACtByH,QAAS,CACP,CAACC,GAAI,YAAa/N,MAAO,gBACzB,CAAC+N,GAAI,OAAQ/N,MAAO,iBAEtBoI,QAAS,SAAC2F,GAAD,OACPnB,EACS,SAAPmB,GAAA,kBACQpB,GADR,IACgB9H,eAAWsD,EAAW7F,MAAa,OAAP6D,QAAO,IAAPA,OAAA,EAAAA,EAASxG,YAAa,MADlE,kBAEQgN,GAFR,IAEgB9H,WAAkB,OAAPsB,QAAO,IAAPA,OAAA,EAAAA,EAAStB,YAAa,GAAIvC,UAAM6F,cAQvE,SAAC6F,GAAA,EAAD,CACEnB,SAAUA,EACVrI,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,gBAG5C,SAACgP,GAAA,EAAD,CACEpB,SAAUA,EACVrI,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,gBAG5C,UAAC,IAAD,CACEP,MAAO,CAACJ,KAAM,EAAGwG,UAAW,EAAGoJ,QAAS,QACxC5P,KAAM,CAACC,UAAW,OAClB4P,UAtDY,SAAChL,GACjB,IAAMiL,EAAQ,CAACC,UAAW,EAAGC,SAAU,GAAGnL,EAAEyE,KAC5C,GAAKwG,GAAUjI,IAAWhD,EAAEoL,qBAA5B,CAGA,IAAMC,EAAOtB,EAAQA,EAAQuB,QAAQtI,GAAWiI,GAC5CI,IACFrL,EAAEuL,iBACFtB,EAAaoB,MA+CXG,UAAW,EAJb,WAME,SAAC,IAAD,CACEjQ,MAAO,CAACD,QAAS,OAAQH,KAAM,EAAGgL,SAAU,KAC5ChL,KAAM,CAACC,UAAW,UAClBuL,WAAY7K,EAAAA,EAAAA,OAHd,SAKGqE,GACC,SAAC,IAAD,CAAKhF,KAAM,CAACE,WAAY,SAAUmG,eAAgB,UAAWjG,MAAO,CAACJ,KAAM,GAA3E,UACE,SAAC+N,EAAA,EAAD,CAASC,QAAQ,eAGnB,SAACrG,GAAD,CACEI,MAAOA,EACPH,OAAQgH,EACR/G,QAASA,EACTC,WAAYgH,OAKlB,SAAC,IAAD,CACE9O,KAAM,CAACC,UAAW,UAClBG,MAAO,CAACJ,KAAM,EAAGgL,SAAU,EAAGsF,UAAW,QACzCpK,OAAQ,CAACC,KAAM,OAAQzF,MAAOC,EAAAA,EAAAA,YAAoByF,MAAO,GAH3D,UAKE,SAACmK,EAAA,EAAD,CAAeC,OAAO,QAAQC,mBAAoB,CAAC5I,GAAnD,SACa,cAAVE,EACCF,GACE,SAAC8F,GAAD,CACEnE,MAAO3B,EACPiD,WAAYqE,EACZtM,SAAUA,KAGZ,SAAC,GAAD,IAEO,OAAPgF,QAAO,IAAPA,GAAAA,EAAS2C,QACX,SAACrF,GAAD,CAAkBtC,SAAUA,EAAU5B,MAAO4G,EAAQ2C,UAErD,SAAC,GAAD,e,+FCvKDkG,GAGR,SAAC,GAA6B,IAA5B9H,EAA2B,EAA3BA,MAAO+H,EAAoB,EAApBA,eACNC,GAAUC,EAAAA,EAAAA,MAEhB,OAAc,OAAVjI,GAEA,SAACyB,GAAD,CAAWrK,KAAM,CAACE,WAAY,SAAUmG,eAAgB,UAAxD,UACE,SAAC0H,EAAA,EAAD,CAASC,QAAQ,eAMrB,SAAC3D,GAAD,CAAWrK,KAAM,CAACgC,IAAK,GAAI8D,QAAS,CAACC,WAAY,IAAjD,SACG6C,EAAMpH,KAAI,SAACsP,GAAD,OACT,SAACC,GAAD,CAEEjH,QAAS,SAACjF,GACRA,EAAE8H,kBACFiE,EAAQI,MAAKvR,EAAAA,GAAAA,GAAuBqR,EAAMjO,SAAU,CAACkB,KAAM,iBAJ/D,UAOE,SAACkN,GAAA,GAAD,CACEC,WAAYJ,EACZK,UAAU,EACV5C,SAAUoC,GAAeS,EAAAA,EAAAA,IAAUN,EAAMjO,cATtCiO,EAAMrB,UAiBfpF,IAAY3H,EAAAA,EAAAA,IAAO2O,EAAAA,GAAV,+EAAG3O,CAAH,iEAOTqO,GAAmBrO,EAAAA,GAAAA,IAAAA,WAAH,2EAAGA,CAAH,+C,wBCpBT4O,GAMR,SAAC,GAAsE,IAAD,EAApEC,EAAoE,EAApEA,UAAWC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,WAAYd,EAAmC,EAAnCA,eAAgBe,EAAmB,EAAnBA,cACtD,GAAmCC,EAAAA,GAAAA,IAAqBJ,GAAjDK,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,UAChBC,EAAkBnB,GAAeS,EAAAA,EAAAA,IAAUG,EAAU1O,WAErDkP,EAAiB,UAAGR,EAAUS,mBAAb,aAAG,EAAuBC,WAC3C1M,GAAcC,EAAAA,EAAAA,IAClB+L,EAAUW,WAAWzR,KACrB8Q,EAAUW,WAAWC,SAAS1R,MAGhC,OACE,iCACE,SAAC2R,GAAA,EAAD,CACEvP,SAAU0O,EAAU1O,SACpBwP,eAAgB9M,EAChB+M,QAAQ,KAEV,UAAC,IAAD,CAAKtS,KAAM,CAACC,UAAW,OAAQG,MAAO,CAACJ,KAAM,GAA7C,WACE,UAAC,IAAD,CACEI,MAAO,CAACJ,KAAM,EAAGgL,SAAU,GAC3BhL,KAAM,CAACC,UAAW,UAClBiG,OAAQ,CAACC,KAAM,QAASC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAH3C,WAKE,UAAC,IAAD,CACEmF,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC1CX,KAAM,CAACqG,eAAgB,gBAAiBrE,IAAK,GAH/C,WAKE,SAAC,KAAD,2BACA,SAACuQ,GAAD,CAAwBhB,UAAWA,EAAWhM,YAAaA,QAE7D,SAAC,IAAD,CACEO,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpC3F,MAAO,CAACJ,KAAM,EAAGwS,UAAW,UAAWC,SAAU,EAAGjM,UAAW,KAFjE,UAIE,SAACkM,GAAA,EAAD,CACE5Q,YAAayP,EAAUzP,aAAe,2BACtC6Q,UAAW,QAGdpB,EAAUqB,YACT,iCACE,SAAC,IAAD,CACE9M,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,aAAcC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAFhD,UAIE,SAAC,KAAD,8BAEF,SAAC,IAAD,CAAKmF,QAAS,CAACG,SAAU,GAAIF,WAAY,IAAK/F,KAAM,CAACgC,IAAK,GAAI9B,WAAY,UAA1E,UACE,SAAC2S,GAAA,EAAD,UAAUtB,EAAUqB,kBAIV,OAAfd,QAAe,IAAfA,OAAA,EAAAA,EAAiBgB,mBAChB,iCACE,SAAC,IAAD,CACEhN,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,aAAcC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAFhD,UAIE,SAAC,KAAD,kCAEF,UAAC,IAAD,CAAKmF,QAAS,CAACG,SAAU,GAAIF,WAAY,IAAK/F,KAAM,CAACgC,IAAK,GAAI9B,WAAY,UAA1E,WACE,SAAC6S,GAAA,GAAD,CAAuBxE,SAAUuD,KACjC,SAAC,KAAD,WAAOkB,EAAAA,GAAAA,IAA2BlB,EAAgBgB,0BAIxD,UAAC,IAAD,CACEhN,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,aAAcC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC9CX,KAAM,CAACqG,eAAgB,gBAAiBrE,IAAK,GAH/C,WAKE,UAAC,KAAD,6BAC0B,OAARwP,QAAQ,IAARA,GAAAA,EAAUpQ,OAAV,YAAwBoQ,EAASpQ,OAAjC,KAA6C,OAE/D,SAAC,KAAD,CAAMR,GAAG,sCAAT,UACE,UAAC,IAAD,CAAKZ,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,iCAEE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,cAAcC,MAAOC,EAAAA,EAAAA,eAIrC+Q,IAAiB,SAACuB,GAAA,EAAD,KAClB,SAACvC,GAAD,CAAe9H,MAAO4I,EAAUb,eAAgBA,KAChD,UAAC,IAAD,CACE7K,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,aAAcC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC9CX,KAAM,CAACqG,eAAgB,gBAAiBrE,IAAK,GAH/C,WAKE,UAAC,KAAD,+BAC8B,OAAVyP,QAAU,IAAVA,GAAAA,EAAYrQ,OAAZ,YAA0BqQ,EAAWrQ,OAArC,KAAiD,OAErE,SAAC,KAAD,CAAMR,GAAG,wCAAT,UACE,UAAC,IAAD,CAAKZ,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,mCAEE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,cAAcC,MAAOC,EAAAA,EAAAA,gBAItC,SAAC+P,GAAD,CAAe9H,MAAO6I,EAAYd,eAAgBA,KAElD,gBAAKvQ,MAAO,CAACJ,KAAM,QAEpB+R,GACC,UAAC,IAAD,CACE7L,OAAQ,CAACC,KAAM,WAAYC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC5CP,MAAO,CAACJ,KAAM,GAAKgL,SAAU,GAC7BhL,KAAM,CAACC,UAAW,UAHpB,WAKE,SAAC,IAAD,CACE6F,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAF5C,UAIE,SAAC,KAAD,wBAEF,SAAC,IAAD,CAAKmF,QAAS,CAACG,SAAU,GAAIF,WAAY,IAAzC,UACE,SAACmN,GAAA,EAAD,CACEC,KAAMpB,EACNqB,aAAcrB,EAAkBsB,4BAIpC,MAEJ,UAAC,IAAD,CAAKjT,MAAO,CAACJ,KAAM,GAAKgL,SAAU,GAAIhL,KAAM,CAACC,UAAW,UAAxD,WACE,SAAC,IAAD,CACE6F,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAF5C,UAIE,SAAC,KAAD,qBAEDkR,GACC,SAACyB,GAAA,GAAD,CAAoBH,KAAMtB,KAE1B,SAAC,IAAD,CAAK/L,QAAS,CAACG,SAAU,GAAIF,WAAY,IAAzC,UACE,SAAC2M,GAAA,EAAD,CAAa5Q,YAAY,6BAG5B8P,EAAcxQ,OAAS,IACtB,iCACE,SAAC,IAAD,CACE0E,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,aAAcC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAC9CX,KAAM,CAACqG,eAAgB,gBAAiBrE,IAAK,GAH/C,UAKE,SAAC,KAAD,0BAEF,SAAC,IAAD,CAAK5B,MAAO,CAACJ,KAAM,GAAnB,UACE,SAACuT,GAAA,GAAD,CACE3B,cAAeA,EACf4B,aAAY,OAAEjO,QAAF,IAAEA,OAAF,EAAEA,EAAa4M,0BAWvCI,GAGD,SAAC,GAAD,IAAEhB,EAAF,EAAEA,UAAWhM,EAAb,EAAaA,YAAb,OACH,UAAC,IAAD,CAAKvF,KAAM,CAACE,WAAY,WAAY8B,IAAK,GAAIyR,KAAM,QAASrT,MAAO,CAACsT,WAAY,GAAhF,UACGnC,EAAUoC,SACR/O,QAAO,SAACgP,GAAD,QAAcjN,EAAAA,EAAAA,IAAsBiN,MAC3CpS,KAAI,SAACoS,GAAD,OACH,SAAC,KAAD,WACE,SAAC/M,EAAA,EAAD,CACEK,OAAK,EACLJ,UAAQ,EACRF,aAAcgN,EACd7M,oBAAqBxB,KALdqO,OASf,SAACC,GAAD,CAAgBtC,UAAWA,EAAWhM,YAAaA,IAClDgM,EAAUuC,WACT,SAAC,KAAD,CAAS1T,MAAO,CAACsT,WAAY,OAAQvR,UAAW,GAAhD,8BAKA0R,GAAiB,SAAC3U,GAItB,IAAOqS,EAA0BrS,EAA1BqS,UAAWhM,EAAerG,EAAfqG,YACX1C,EAA0C0O,EAA1C1O,SAAUkR,EAAgCxC,EAAhCwC,UAAWC,EAAqBzC,EAArByC,QAASL,EAAYpC,EAAZoC,SAC/BM,EAAUD,EAAQ5S,OAExB,IAAK6S,EACH,OAAO,KAGT,IAAKF,EAAW,CACd,IAAMG,EAAUF,EAAQ,GACxB,IAAI5Q,EAAAA,EAAAA,IAAuBP,KAAcqR,EACvC,OAAO,KAET,IAAMC,GAASC,EAAAA,EAAAA,IAAyB7O,EAAD,eAAsB2O,IAC7D,OACE,UAAC,IAAD,CAAKlU,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,KAAKyB,KAAM,MACtB,SAAC,KAAD,WACE,SAAC,KAAD,CAAMtB,GAAIuT,EAAV,SAAmBD,SAM3B,OAAKP,EAASvS,QAKZ,UAAC,IAAD,CAAKpB,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,WACE,SAAC+B,EAAA,GAAD,CAAMxB,KAAK,SAASyB,KAAM,MAC1B,UAAC,KAAD,YACE,SAAC,KAAD,CAAMtB,IAAIwT,EAAAA,EAAAA,IAAyB7O,EAAD,kBAAyBoO,EAAS,GAAlC,YAAwCI,EAAxC,MAAlC,SACGA,IAFL,YAIoB,IAAZE,EAAgB,OAAhB,UAA4BA,EAA5B,QAJR,WANK,MAgBEI,IAAiCnP,EAAAA,EAAAA,IAAH,qbAwBvCoP,GAAAA,EACAC,GAAAA,GACAC,GAAAA,I,0DC5RSC,GAGR,SAAC,GAA8B,IAA7BlD,EAA4B,EAA5BA,UAAWhM,EAAiB,EAAjBA,YACVmP,EAAYC,IAAAA,CAAQpD,EAAUqD,MAAM,SAACC,GAAD,OAAOA,EAAEH,aAC7CI,EAAUH,IAAAA,CAAQpD,EAAUqD,MAAM,SAACC,GAAD,OAAOA,EAAEC,WAEjD,OACE,SAACC,GAAA,EAAD,CACExP,YAAaA,EACbmP,UAAWA,EACXI,QAASA,EACTE,YAAY,KAKLC,IAAkC/P,EAAAA,EAAAA,IAAH,iVAmBxCgQ,GAAAA,EACAC,GAAAA,G,4FC5BEC,GAA2B,wBAIpBC,GAKR,SAAC,GAAyD,IAAxD9D,EAAuD,EAAvDA,UAAW+D,EAA4C,EAA5CA,eAAgB3E,EAA4B,EAA5BA,eAAgBtC,EAAY,EAAZA,OAC1CkH,GAAenE,EAAAA,EAAAA,IAAUG,EAAU1O,UAEzC,EAAsCoF,EAAAA,SAA8B,MAApE,eAAOuN,EAAP,KAAoBC,EAApB,KAEA,GAA0BC,EAAAA,GAAAA,IAAeJ,GAAlCK,EAAP,EAAOA,OAAQ3Q,EAAf,EAAeA,QACT4Q,EAAa3N,EAAAA,SACb2I,GAAUC,EAAAA,EAAAA,MAchB,OARA5I,EAAAA,WAAgB,WACd,GAAI2N,EAAWrN,SAAWoN,EAAQ,CAChC,IAAME,EAAgBrR,QAAOsR,EAAAA,GAAAA,GAAcV,KAC3CQ,EAAWrN,QAAQwN,YAAW,EAAOF,GACrCD,EAAWrN,QAAQyN,WAEpB,CAACJ,EAAYD,EAAQJ,KAEnBI,GAAU3Q,GAEX,SAAC,IAAD,CAAK5E,MAAO,CAACJ,KAAM,GAAIA,KAAM,CAACE,WAAY,SAAUmG,eAAgB,UAApE,UACE,SAAC0H,EAAA,EAAD,CAASC,QAAQ,YAMrB,SAACiI,GAAA,EAAD,CACE9M,IAAK,SAAC+M,GAAD,OAAQN,EAAWrN,QAAU2N,QAAKrM,GACvCsM,WAAYF,GAAAA,EAAAA,YAAAA,WACZG,WAAYT,EAAOvP,MACnBiQ,YAAaV,EAAO1L,OACpBqM,cAAe,SAACzR,GAAO,IAAD,EACpB,UAAA+Q,EAAWrN,eAAX,SAAoBwN,YAAW,GAC/BlR,EAAE8H,mBAEJ4J,QAAS,IACTC,kBAAmB,IAVrB,SAYG,gBAAEC,EAAF,EAAEA,MAAF,OACC,UAACC,GAAD,CAActQ,MAAOuP,EAAOvP,MAAO6D,OAAQ0L,EAAO1L,OAAlD,UACG2L,EAAWrN,UAAW,SAACoO,GAAD,CAAkBF,MAAOA,KAChD,SAACG,GAAA,EAAD,CAAYpB,YAAaA,EAAaqB,MAAOlB,EAAOkB,QAEnDC,OAAOC,OAAOpB,EAAO/N,QACnByF,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEmC,GAAGrO,OAASmM,EAAEkC,GAAGrO,UAClCI,KAAI,SAACgI,GAAD,OACH,sDAAmBA,EAAMwN,QAAzB,IAAiC1N,IAAKE,EAAMiG,MAC1C,SAACwH,GAAA,EAAD,CAAgBzN,MAAOA,EAAOiN,MAAOA,QAI1CK,OAAOC,OAAOpB,EAAOuB,OAAO1V,KAAI,YAAmB,IAAjBiO,EAAgB,EAAhBA,GAAIuH,EAAY,EAAZA,OAC/BG,EAAY7B,EAAe4B,MAAMzH,GACjCtQ,EAAOiY,KAAKC,MAAM5H,GAExB,OACE,sDACMuH,GADN,IAEE1N,IAAKmG,EACLrP,MAAO,CAACS,SAAU,WAClByW,aAAc,kBAAM7B,EAAehG,IACnC8H,aAAc,kBAAM9B,EAAe,OACnC3L,QAAS,kBAzDDR,EAyDoB,CAACnK,KAAAA,QAxDzCyR,EAAQI,MAAKvR,EAAAA,GAAAA,GAAuB6J,GAAD,QAAC,UAAS+E,GAAV,IAAkBmJ,aAAc,gBADhD,IAAClO,GA0DRgN,cAAe,SAACzR,GAAO,IAAD,EACpB,UAAA+Q,EAAWrN,eAAX,SAAoBkP,aAAaT,GAAQ,EAAM,KAC/CnS,EAAE8H,qBAGFwK,EAEEV,EAAQiB,GAAAA,IACV,SAACzG,GAAA,GAAD,CACEC,WAAYiG,EAAUjG,WACtB3C,SAAUoC,EAAewG,EAAU1H,IACnC0B,SAAUgG,EAAU1H,KAAO8F,KAG7B,SAACtE,GAAA,GAAD,CACEC,WAAYiG,EAAUjG,WACtB3C,SAAUoC,EAAewG,EAAU1H,IACnC0B,SAAUgG,EAAU1H,KAAO8F,KAX7B,SAAC,KAAD,CAAe1S,SAAU,CAAC1D,KAAAA,gBAuBtCwX,GAAmB,SAAC,GAA8B,IAA7BF,EAA4B,EAA5BA,MAQzB,OAPAxO,EAAAA,WAAgB,WACd,IACE0P,OAAOC,aAAaC,QAAQzC,GAA0BgC,KAAKU,UAAUrB,IACrE,MAAOsB,OAGR,CAACtB,KACG,yBAGHC,GAAehU,EAAAA,GAAAA,IAAAA,WAAH,2EAAGA,CAAH,uC,YC5HLsV,GAQR,SAAC,GAQC,IAPL3J,EAOI,EAPJA,OACAC,EAMI,EANJA,UACAiD,EAKI,EALJA,UACAZ,EAII,EAJJA,eACA2E,EAGI,EAHJA,eACA2C,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEMC,EAAelQ,EAAAA,SACnB,kBAAMmQ,EAAAA,EAAAA,GAAwBH,EAAiB1G,EAAU1O,YACzD,CAACoV,EAAiB1G,IAEd8G,EACoB,aAAxBhK,EAAOmJ,aACHW,EAAa3G,SACW,eAAxBnD,EAAOmJ,aACPW,EAAa1G,WACbvN,KAAKC,IAAIgU,EAAa3G,SAAU2G,EAAa1G,YAE7C6G,EAAepU,KAAKC,IAAI,EAAGD,KAAKqU,IAAIF,EAAUH,IAEpD,OACE,UAAC,IAAD,CACE9X,MAAO,CAACgG,MAAO,OAAQpG,KAAM,EAAGwG,UAAW,EAAGgS,SAAU,YACxDxY,KAAM,CAACC,UAAW,UAFpB,WAIE,UAAC,IAAD,CACED,KAAM,CAACqG,eAAgB,gBAAiBnG,WAAY,SAAU8B,IAAK,IACnE8D,QAAS,CAACoE,KAAM,GAAI3J,MAAO,GAAI0F,SAAU,IACzCC,OAAQ,CAACC,KAAM,SAAUzF,MAAOC,EAAAA,EAAAA,YAAoByF,MAAO,GAH7D,WAKE,SAACiJ,EAAA,EAAD,CACEC,YAAa,IAAIC,IAAI,CAAClB,EAAOmJ,cAAgB,cAC7ChI,QAAS,CACP,CAACC,GAAI,YAAa/N,MAAO,oBAAqBtC,KAAM,mBACpD,CAACqQ,GAAI,WAAY/N,MAAO,WAAYtC,KAAM,kBAC1C,CAACqQ,GAAI,aAAc/N,MAAO,aAActC,KAAM,qBAEhD0K,QAAS,SAAC0N,GAAD,OAAkBlJ,GAAU,kBAAID,GAAL,IAAamJ,aAAAA,EAAciB,kBAAc5O,SAE/E,SAAC6O,GAAD,CACEC,MAAOL,EACPM,SAAU,SAACjV,GAAD,OAAW2K,GAAU,kBAAID,GAAL,IAAaoK,aAAc9U,MACzDQ,IAAKkU,KAEP,gBAAKjY,MAAO,CAACJ,KAAM,KAClB8W,OAAOC,OAAOzB,EAAe4B,OAAO9V,OAAS,GAC5C,SAACyX,GAAA,GAAD,CACEnO,OAAO,OACPoO,iBAAkBnI,EAClBoI,MAAO,CAACxN,IAAKuL,OAAOC,OAAOzB,EAAe4B,OAAO1V,KAAI,SAACwX,GAAD,OAAOA,EAAE9H,kBAGhE,SAACtE,GAAA,GAAD,CAAQxN,MAAM,SAAC6C,EAAA,GAAD,CAAMxB,KAAK,oBAAsBwY,UAAQ,EAAvD,gCAKHX,EAAeD,IACd,SAACa,GAAD,0FAIF,SAAC7D,GAAD,CACE9D,UAAWA,EACXZ,eAAgBA,EAChB2E,eAAgBA,EAChBjH,OAAQA,QAMV6K,GAAyBxW,EAAAA,GAAAA,IAAAA,WAAH,oFAAGA,CAAH,wJACZ/B,EAAAA,EAAAA,QAELA,EAAAA,EAAAA,SAWL+X,GAID,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOxU,EAAmB,EAAnBA,IAAKyU,EAAc,EAAdA,SACjB,EAAwB3Q,EAAAA,SAAA,UAAkB0Q,IAA1C,eAAO5X,EAAP,KAAaoY,EAAb,KACAlR,EAAAA,WAAgB,WACdkR,EAAQ,GAAD,OAAIR,MACV,CAACA,IAKJ,IAAMS,EAAa,WACjB,IAAMlJ,EAAO1L,OAAOzD,GAAQmD,KAAKqU,IAAIpU,EAAKK,OAAOzD,IAAS4X,EAC1DC,EAAS1I,IAGX,OACE,UAAC,IAAD,CAAKlQ,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAAhC,yBAEE,UAAC,MAAD,YACE,SAAC0M,GAAA,GAAD,CACEqM,SAAUN,GAAS,EACnB7O,QAAS,kBAAM8O,EAASD,EAAQ,IAChCvZ,MAAM,SAAC6C,EAAA,GAAD,CAAMxB,KAAK,gBAEnB,SAAC4Y,GAAA,GAAD,CACEd,IAAK,EACLpU,IAAKA,EACL8U,SAAU9U,GAAO,EACjBmV,UAAU,UACVlZ,MAAO,CACLgG,MAAO,GACP7D,YAAa,EACbgX,UAAW,SACXtP,OAAQ,GACRnE,QAAS,EACT0T,aAAc,EACdC,UAAW,OACXvT,OAAO,aAAD,OAAevF,EAAAA,EAAAA,UAGvBgY,MAAO5X,EACP6X,SAAU,SAAC/T,GAAD,OAAOsU,EAAQtU,EAAEkF,OAAO4O,QAClC9I,UAAW,SAAChL,GAAD,MAAkB,UAAVA,EAAEyE,KAA6B,WAAVzE,EAAEyE,IAAmB8P,SAAevP,GAC5E6P,OAAQ,kBAAMN,MAJTT,IAMP,SAAC/L,GAAA,GAAD,CACEqM,SAAUN,GAASxU,EACnB2F,QAAS,kBAAM8O,EAASD,EAAQ,IAChCvZ,MAAM,SAAC6C,EAAA,GAAD,CAAMxB,KAAK,WAEnB,SAACmM,GAAA,GAAD,CAAQqM,SAAUN,GAASxU,EAAK2F,QAAS,kBAAM8O,EAASzU,IAAxD,wB,oCCxJKwV,GAIR,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,oBAAqBC,EAAwC,EAAxCA,uBAAwBC,EAAgB,EAAhBA,WAC5C9R,EAAYC,EAAAA,OAAoC,MAEhDE,GAAiBC,EAAAA,GAAAA,gBAAe,CACpCC,MAAOyR,EAAW1Y,OAClB2Y,WAAY,SAAChV,GAAD,OAAS+U,EAAW/U,GAAKiV,cACrC1R,iBAAkB,kBAAMN,EAAUO,SAClCC,aAAc,kBAAM,IACpBC,SAAU,KAENC,EAAcP,EAAeQ,eAC7BC,EAAQT,EAAeU,kBAW7B,OATAZ,EAAAA,WAAgB,WACV2R,GACFzR,EAAe8R,cACbH,EAAWI,WAAU,SAAC3P,GAAD,OAAOA,EAAEyP,eAAiBJ,KAC/C,CAACO,cAAc,EAAOC,MAAO,WAGhC,CAACR,EAAqBzR,EAAgB2R,KAGvC,SAAC5Q,GAAD,CACEC,IAAKnB,EACLqI,UAAW,EACXR,UAAW,SAAChL,GACV,IAAMiL,EAAQ,CAACC,UAAW,EAAGC,SAAU,GAAGnL,EAAEyE,KAC5C,GAAKuQ,GAA2B/J,GAAU8J,IAAuB/U,EAAEoL,qBAAnE,CAGA,IAAMoK,EAAUP,EAAWI,WAAU,SAAC3P,GAAD,OAAOA,EAAEyP,eAAiBJ,KAAuB9J,EAChFI,EAAO4J,EAAWO,GACpBnK,IACFrL,EAAEuL,iBACFyJ,EAAuB3J,EAAK8J,iBAZlC,UAgBE,SAAC,MAAD,CAAO5Q,aAAcV,EAArB,SACGE,EAAMpH,KAAI,YAAgC,IAA9B6H,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,IAAKpH,EAAiB,EAAjBA,KAAMqH,EAAW,EAAXA,MAC7B,EAA8BuQ,EAAWzQ,GAAlC2Q,EAAP,EAAOA,aAAcM,EAArB,EAAqBA,MAErB,OACE,SAAC7Q,GAAD,CAEEC,QAASxH,EACTyH,OAAQJ,EACRK,SAAUoQ,IAAiBJ,EAC3B9P,QAAS,SAACjF,GAIJA,EAAEkF,kBAAkBhB,aAAelE,EAAEkF,OAAOC,QAAQ,MAGlC,OAAtB6P,QAAsB,IAAtBA,GAAAA,EACED,IAAwBI,EAAeA,OAAenQ,IAb5D,UAiBE,SAAC,IAAD,CACEzJ,MAAO,CAAC6J,OAAQ/H,GAChB4D,QAAS,CAACoE,KAAM,GAAI3J,MAAO,IAC3BP,KAAM,CAACC,UAAW,SAAUoG,eAAgB,SAAUrE,IAAK,GAC3DkE,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAJ5C,UAME,UAAC,IAAD,CAAKX,KAAM,CAACgC,IAAK,EAAG/B,UAAW,MAAOC,WAAY,UAAlD,UACG8Z,GACD,gBAAK5Z,MAAO,CAACJ,KAAM,MACjBsa,IAAUC,GAAAA,GAAAA,iBACVD,IAAUC,GAAAA,GAAAA,WACV,SAACC,GAAD,CAAUF,MAAOC,GAAAA,GAAAA,WAEjBD,IAAUC,GAAAA,GAAAA,iBACVD,IAAUC,GAAAA,GAAAA,WACV,SAACC,GAAD,CAAUF,MAAOC,GAAAA,GAAAA,gBA/BlBjR,WA2CbkR,GAAW,SAAC,GAAD,IAAEF,EAAF,EAAEA,MAAF,OACf,gBAEEla,OAAK,QACHgG,MAAO,GACP6D,OAAQ,GACRuP,aAAc,SACXiB,EAAAA,GAAAA,IAAsBH,KALtBA,I,oCCnEHI,GAAmB,CAACH,GAAAA,GAAAA,QAAwBA,GAAAA,GAAAA,SAErCI,GAAmC,SAAC,GAO1C,IANL9X,EAMI,EANJA,SACA+X,EAKI,EALJA,yBACAzM,EAII,EAJJA,wBACAE,EAGI,EAHJA,OACAC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEA,GAAsBsM,EAAAA,GAAAA,IAAuB,CAAChY,GAAWsL,GAAlD2M,GAAP,eACA,GAA4BC,EAAAA,GAAAA,GAAgC,CAC1DC,oBAAqBJ,EACrBK,mBAAmB,EACnBH,YAAAA,IAHF,eAAOI,EAAP,KAAeC,EAAf,KAMA,GAAwCC,EAAAA,EAAAA,GAAyC,CAC/EC,SAAU,CAACC,OAAQ,UAAIZ,IAAkBrN,OAAOtN,KAAK,MACrDwb,OAAQ,SAACC,GAAD,MAAU,CAACF,QAAQ,QAAIE,GAAKnO,OAAOtN,KAAK,OAChD0b,OAAQ,SAACC,GAAD,OACLA,EAAGJ,QAAU,IAAIK,MAAM,KAAK/W,QAAO,SAACgX,GAAD,OAAuBlB,GAAiBmB,SAASD,SAJzF,eAAOE,EAAP,KAAqBC,EAArB,KAOMC,EAAed,EAAOhB,WAAU,SAAChE,GAAD,OAAO+F,EAAAA,GAAAA,IAAsB/F,EAAEgG,cAC/DC,GAA8B,IAAlBH,EAAsBd,EAAOc,GAAgB,KAEzDI,EAAkBnU,EAAAA,SAAc,WACpC,OAAO6S,GAAcuB,EAAAA,GAAAA,IAAgCnB,EAAQJ,EAAYwB,aAAe,KACvF,CAACpB,EAAQJ,IAENyB,EAAetU,EAAAA,SACnB,kBAAMmU,EAAgBxX,QAAO,SAAC2F,GAAD,OAAOuR,EAAaD,SAAStR,EAAE+P,YAC5D,CAAC8B,EAAiBN,IAGdU,EAAuBnO,EAAO9H,UAChC2U,EAAO9Z,OAAS,EACdiN,EAAO9H,UAAUoV,MAAM,KAAK/W,OAAO6X,SACnC,CAACpO,EAAO9H,WACV,GAEEmW,EAAuB,SAACC,GAC5B,OAAOV,EAAAA,GAAAA,IAAsBU,EAAMT,YAC/B,QAAIS,EAAMC,cAAcC,UACxBF,EAAMC,cAENE,EAAwB,SAACH,EAAoC5X,GACjE,OAAIoX,GAA+C,IAAlCA,EAAUS,aAAaxb,OAC/B,GAEFsb,EAAqBC,GACzBnb,KAAI,SAACwY,GAaJ,MAAO,CAACA,aAAAA,EAAcM,MARZ,IAARvV,GAAayX,EAAqBpb,QAAU,EACxC0Z,EAAYwB,YAAY,CAACE,EAAqB,GAAIxC,IAClDc,EAAYiC,wBACVhY,EACAiV,EACA2C,IAAUR,EAAV,OAAsBA,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAWS,kBAAe/S,OAKzDjF,QACC,SAACoY,GAAD,OACElB,EAAaD,SAASmB,EAAI1C,QACzB0C,EAAI1C,QAAUC,GAAAA,GAAAA,kBACZuB,EAAaD,SAAStB,GAAAA,GAAAA,UACrBuB,EAAaD,SAAStB,GAAAA,GAAAA,cAIlC,OACE,iCACE,SAAC7K,GAAA,EAAD,CACEnB,SAAUA,EACVrI,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,gBAG5C,SAACgP,GAAA,EAAD,CACEpB,SAAUA,EACVrI,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,eAE3Cwb,IACC,SAAC,IAAD,CACErW,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAF5C,UAIE,SAACsc,GAAA,EAAD,CACEC,cAAef,EAAUD,UAAUgB,cACnCC,qBAAsB,SAACnD,GAAD,OACpBc,EAAYiC,wBAAwBf,EAAchC,IAEpD7I,SAAUgL,EAAUS,aACpBQ,YAAa,SAACR,GAAD,OACXzB,EAAUD,EAAO1Z,KAAI,SAAC0U,GAAD,OAAQA,IAAMiG,GAAN,kBAAsBjG,GAAtB,IAAyB0G,aAAAA,IAAgB1G,YAM9E,UAAC,IAAD,CACEpQ,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpC/F,KAAM,CAACC,UAAW,MAAOoG,eAAgB,iBACzCH,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAH5C,WAKE,2BAAM4b,EAAanb,OAAOic,iBAA1B,2BACA,SAACC,GAAA,EAAD,CACEC,uBAAwBnB,EACxBoB,QAAS,CAACjD,GAAAA,GAAAA,QAAwBA,GAAAA,GAAAA,SAClC5B,MAAOmD,EACPlD,SAAUmD,QAGd,UAAC,IAAD,CAAK3b,MAAO,CAACJ,KAAM,EAAGwG,UAAW,EAAGoJ,QAAS,QAAS5P,KAAM,CAACC,UAAW,OAAQoQ,UAAW,EAA3F,UACG6K,EAAO1Z,KAAI,SAACmb,EAAO5X,GAAR,OACV,UAAC,IAAD,CAEE3E,MAAO,CAACD,QAAS,OAAQH,KAAM,EAAGyd,aAAc,EAAGzS,SAAU,KAC7DhL,KAAM,CAACC,UAAW,UAClBiG,OAAQ,CAACC,KAAM,QAASzF,MAAOC,EAAAA,EAAAA,YAAoByF,MAAO,GAC1DoF,WAAY7K,EAAAA,EAAAA,OALd,UAO4B,YAAzBgc,EAAMT,UAAUzb,OACf,UAAC,IAAD,CACEqF,QAAS,CAACC,WAAY,GAAIE,SAAU,GACpCjG,KAAM,CAACgC,IAAK,EAAG9B,WAAY,UAC3BsL,WAAY7K,EAAAA,EAAAA,MACZuF,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAJ5C,WAME,SAACsB,EAAA,GAAD,CAAMxB,KAAK,eACX,SAAC,KAAD,UAAakc,EAAMT,UAAUzb,UAI/Bqa,GAKA,SAACnB,GAAD,CACEG,WAAYgD,EAAsBH,EAAO5X,GACzC6U,oBAAqB4C,EAAqBzX,GAC1C8U,uBAAwB,SAACG,GAEvB,IADA,IAAM0D,EAAqC,GAClC5d,EAAK,EAAGA,EAAKiF,EAAKjF,IACzB4d,EAAyB1M,KACvBwL,EAAqB1c,IAAO4c,EAAqBxB,EAAOpb,IAAK,IAG7Dka,GACF0D,EAAyB1M,KAAKgJ,GAEhC1L,GAAU,kBACLD,GADI,IAEP9H,UAAWmX,EAAyB3d,KAAK,YAnB/C,SAAC,IAAD,CAAKC,KAAM,CAACE,WAAY,SAAUmG,eAAgB,UAAWjG,MAAO,CAACJ,KAAM,GAA3E,UACE,SAAC+N,EAAA,EAAD,CAASC,QAAQ,gBApBhB2O,EAAMT,UAAUzb,UA8CzB,SAAC,IAAD,CAAKL,MAAO,CAACJ,KAAM,EAAGgL,SAAU,EAAGsF,UAAW,QAAStQ,KAAM,CAACC,UAAW,UAAzE,SACGoO,EAAO9H,WAAaiW,EAAqBpb,SAAW8Z,EAAO9Z,QAC1D,SAAC4L,GAAD,CAA4BnK,SAAUA,EAAUqK,aAAcmB,EAAO9H,aAErE,SAAC,GAAD,a,WC/LCoX,GAA8B,SAAC,GAKrC,IAJL9a,EAII,EAJJA,SACAuL,EAGI,EAHJA,0BACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,GAMIE,EAAAA,GAAAA,IAAqB3L,EAAUwL,EAAQ,CAACD,0BAAAA,IAL1CjB,EADF,EACEA,iBACAjM,EAFF,EAEEA,aACAuN,EAHF,EAGEA,oBACAzJ,EAJF,EAIEA,QACA+C,EALF,EAKEA,MAGI6G,GAAUC,EAAAA,GAAAA,GAAiB9G,EAAOoF,EAAkBjM,EAAcuN,GAClEa,EAAcrH,EAAAA,SAAc,kBAAM,IAAIsH,IAAI,CAACxH,MAAS,CAACA,IAE3D,OAAI/C,GAEA,UAAC,IAAD,YACE,SAAC,IAAD,CACEhF,KAAM,CAACqG,eAAgB,gBAAiBnG,WAAY,UACpDgG,OAAQ,CAACC,KAAM,SAAUzF,MAAOC,EAAAA,EAAAA,YAAoByF,MAAO,GAC3DN,QAAS,CAACG,SAAU,GAAIiE,KAAM,GAAI3J,MAAO,IACzCH,MAAO,CAACgP,cAAe,GAJzB,UAME,SAAC,KAAD,6BAEF,SAAC,IAAD,CAAKtJ,QAAS,CAACG,SAAU,IAAzB,UACE,SAAC8H,EAAA,EAAD,CAASC,QAAQ,eAOvB,UAAC,IAAD,YACE,UAAC,IAAD,CACEhO,KAAM,CAACqG,eAAgB,gBAAiBnG,WAAY,UACpDgG,OAAQ,CAACC,KAAM,SAAUzF,MAAOC,EAAAA,EAAAA,YAAoByF,MAAO,GAC3DN,QAAS,CAACG,SAAU,GAAIiE,KAAM,GAAI3J,MAAO,IACzCH,MAAO,CAACgP,cAAe,GAJzB,WAME,SAAC,KAAD,0BAEChB,GACC,gBAAKhO,MAAO,CAACE,OAAQ,WAArB,UACE,SAAC+O,EAAA,EAAD,CACEC,YAAaA,EACbE,QAAS,CACP,CAACC,GAAI,YAAa/N,MAAO,aAActC,KAAM,aAC7C,CAACqQ,GAAI,OAAQ/N,MAAO,SAAUtC,KAAM,oBAEtC0K,QAAS,SAAC2F,GAAD,OACPnB,EACS,SAAPmB,GAAA,kBACQpB,GADR,IACgB9H,eAAWsD,EAAW7F,KAAM,MAD5C,kBAEQqK,GAFR,IAEgB9H,UAAW,GAAIvC,UAAM6F,UAK3C,SAEN,SAAC+T,GAAA,EAAD,CAA4B7V,MAAOA,EAAOH,OAAQgH,QCX3CiP,GAA6B,SAAC,GAAgB,IAAD,MAAdhb,EAAc,EAAdA,SAC1C,GAA4BuY,EAAAA,EAAAA,GAAwC,IAApE,eAAO/M,EAAP,KAAeC,EAAf,KAGA,EAAiEwP,GAC/Djb,GADKqO,EAAP,EAAOA,WAAY6M,EAAnB,EAAmBA,sBAAuBC,EAA1C,EAA0CA,oBAIpCC,EAAuB,OAAV/M,QAAU,IAAVA,GAAAA,EAAYgN,oBAAsB,aAAe,SAC9DC,EAAc9P,EAAOtK,MAAQka,EAK7BG,EAuMR,SAAkCvb,EAAoBwL,GACpD,IAAMgQ,GAAQC,EAAAA,EAAAA,IAAiBzb,GAE/B,GAAoB,eAAhBwL,EAAOtK,KACT,MAAO,CAACwa,MAAM,KAAD,OAAOF,EAAP,MAAkBnG,eAAgB,GAEjD,GAAoB,YAAhB7J,EAAOtK,KAAoB,CAC7B,IAAMya,EAAuC,cAAxBnQ,EAAOmJ,aAA+B,EAAI,EACzDU,EAAiB1T,OAAO6J,EAAOoK,eAAiB+F,EAChDC,EAAW,IAAIC,OAAOxG,GAU5B,MAAO,CACLqG,MAPgB,YAAhBlQ,EAAOtK,MAA8C,aAAxBsK,EAAOmJ,aAApC,UACOiH,EADP,YACmBJ,EADnB,KAEoB,YAAhBhQ,EAAOtK,MAA8C,eAAxBsK,EAAOmJ,aAApC,WACI6G,EADJ,YACaI,GADb,UAEGA,EAFH,YAEeJ,EAFf,YAEwBI,GAI5BvG,eAAAA,GAGJ,MAAO,CAACqG,MAAM,IAAD,OAAMF,EAAN,KAAgBnG,eAAgB,GA/N7ByG,CAAyB9b,EAAUwL,GAC7CuQ,GAAoBC,EAAAA,EAAAA,GAAkBT,EAAQG,MAAO,CACzDO,8BAA8B,IAGhC,EA6NF,SAA+BC,EAA6Blc,GAC1D,IAAMmc,GAAU5N,EAAAA,EAAAA,IAAUvO,GAE1B,OAAOoF,EAAAA,SAAc,WACnB,OAAK8W,EAGE,CACLvN,SAAUsF,OAAOC,OAAOgI,EAAU7H,OAC/BtS,QAAO,SAACoU,GAAD,uBAAO+F,EAAUvN,SAASwN,UAA1B,aAAO,GAA8B5N,EAAAA,EAAAA,IAAU4H,EAAEnW,cACxDrB,KAAI,SAACwX,GAAD,OAAOA,EAAE9H,cAChBO,WAAYqF,OAAOC,OAAOgI,EAAU7H,OACjCtS,QAAO,SAACoU,GAAD,uBAAO+F,EAAUtN,WAAWuN,UAA5B,aAAO,GAAgC5N,EAAAA,EAAAA,IAAU4H,EAAEnW,cAC1DrB,KAAI,SAACwX,GAAD,OAAOA,EAAE9H,eART,CAACM,SAAU,KAAMC,WAAY,QAUrC,CAACsN,EAAWC,IA5OgBC,CAAsBL,EAAkBtJ,eAAgBzS,GAAhF2O,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,WACXyN,EAAI,UAAGN,EAAkBtJ,sBAArB,aAAG,EAAkC4B,OAAM9F,EAAAA,EAAAA,IAAUvO,IAI/D,GAA4Dsc,EAAAA,EAAAA,GAC1DP,EAAkBQ,gBADbC,EAAP,EAAOA,qBAAsB1O,EAA7B,EAA6BA,eAAgB2O,EAA7C,EAA6CA,YAMvCC,EAAkB,WACtB,UAAA5O,GAAeS,EAAAA,EAAAA,IAAUvO,WAAzB,eAAqCmb,sBAAuBA,SADtC,aAAG,EAExB3c,UAEGme,GAAqBnR,EAAOM,MAAQnK,OAAO+a,IAAuB/a,OAAO6J,EAAOM,MAEhF8Q,GAAeC,EAAAA,EAAAA,KACnBC,EAAAA,EAAAA,IAA0B5B,EAAuB6B,EAAAA,IACjDP,GA0CF,OACE,UAAC,IAAD,CAAKrf,KAAM,CAACC,UAAW,UAAWG,MAAO,CAAC6J,OAAQ,OAAQ7D,MAAO,OAAQkK,UAAW,QAApF,UACGgP,GACD,SAACO,EAAA,EAAD,CACEhd,SAAUA,EACVid,MACE,SAACC,GAAD,CACE7O,WAAYA,EACZ3C,SAAUoC,GAAeS,EAAAA,EAAAA,IAAUvO,IACnCmd,eAAgB,kBAAM1R,GAAU,kBAAID,GAAL,IAAatK,KAAM,UAAWyT,aAAc,iBAG/EyI,MACE,UAAC,IAAD,CAAKjgB,KAAM,CAACC,UAAW,MAAOoG,eAAgB,gBAAiBnG,WAAY,YAA3E,WACE,UAACggB,EAAA,GAAD,CAAMhe,KAAK,QAAQie,cAAehC,EAAlC,WACa,OAAVjN,QAAU,IAAVA,OAAA,EAAAA,EAAYgN,uBACX,SAAC,KAAD,CACEzO,GAAG,aACH/C,MAAM,aACN5C,QAAS,kBAAMwE,GAAU,kBAAID,GAAL,IAAatK,KAAM,oBAG/C,SAAC,KAAD,CACE0L,GAAG,SACH/C,MAAM,SACN5C,QAAS,kBAAMwE,GAAU,kBAAID,GAAL,IAAatK,KAAM,SAAUwC,eAAWsD,SAElE,SAAC,KAAD,CAAK4F,GAAG,QAAQ/C,MAAM,QAAQ5C,QAAS,kBAAMwE,GAAU,kBAAID,GAAL,IAAatK,KAAM,eACzE,SAAC,KAAD,CACE0L,GAAG,aACH/C,MAAM,aACN5C,QAAS,kBAAMwE,GAAU,kBAAID,GAAL,IAAatK,KAAM,iBAC3CkV,UAAW/H,KAEb,SAAC,KAAD,CACEzB,GAAG,UACH/C,MAAM,UACN5C,QAAS,kBAAMwE,GAAU,kBAAID,GAAL,IAAatK,KAAM,cAC3CkV,UAAW/H,OAGduO,IACC,SAAC,IAAD,CAAK3Z,QAAS,CAACE,OAAQ,GAAvB,UACE,SAACoa,EAAA,GAAD,CAAuBX,aAAcA,SAK7Clf,OACE,SAAC,IAAD,CAAKH,MAAO,CAACE,OAAQ,UAArB,SACG4Q,GAAcA,EAAWyC,SAASvS,OAAS,GAAKoQ,IAC/C,SAACqH,GAAA,GAAD,CAA4BE,MAAO,CAACxN,IAAK,CAAC2F,WAKhDsO,IACA,SAACa,GAAD,CACE1R,KAAMN,EAAOM,KACb7E,QAAS,kBAAMwE,EAAU,CAACK,UAAM9E,EAAW7F,KAAMqK,EAAOM,QACxD2R,gBAAiBpP,IAQpB6M,EAAsB/Y,UAAY+Y,EAAsBwC,cACvD,SAAC,IAAD,CACEngB,MAAO,CAAC6J,OAAQ,KAChBjK,KAAM,CAACC,UAAW,MAAOoG,eAAgB,SAAUnG,WAAY,UAFjE,UAIE,SAAC6N,EAAA,EAAD,CAASC,QAAQ,YAGnB,SAACuC,EAAA,EAAD,CAAeC,OAAO,OAAOC,mBAAoB,CAAC5N,EAAUwL,GAA5D,SACmB,eAAhB8P,EAnHFjN,GAIH,SAACI,GAAD,CACEC,UAAWL,EACXM,SAAUA,EACVC,WAAYA,EACZC,gBAAewN,IAAOsB,EAAAA,EAAAA,IAAkBtB,GACxCvO,eAAgBA,KARX,SAAC8P,GAAD,IAoHiB,YAAhBtC,EAtGLjN,EAGA0N,EAAkBtJ,gBAQrB,SAAC0C,GAAD,CACE3J,OAAQA,EACRC,UAAWA,EACXiD,UAAWL,EACXP,eAAgBA,EAChBuH,eAAgBkG,EAAQlG,eACxB5C,eAAgBsJ,EAAkBtJ,eAClC2C,gBAAiB2G,EAAkB3G,mBAbnC,SAAC,IAAD,CAAK7X,MAAO,CAACJ,KAAM,GAAIA,KAAM,CAACE,WAAY,SAAUmG,eAAgB,UAApE,UACE,SAAC0H,EAAA,EAAD,CAASC,QAAQ,YALd,SAACyS,GAAD,IAuGiB,eAAhBtC,GACF,SAACxD,GAAD,CACE9X,SAAUA,EACV+X,yBAAwB,OAAE1J,QAAF,IAAEA,OAAF,EAAEA,EAAYwP,yBAAyBlf,KAAI,SAACmf,GAAD,OAAOA,EAAElgB,QAC5E0N,wBAAyBoR,EACzBlR,OAAQA,EACRuS,uBAAwBvS,EAAOM,KAC/BL,UAAWA,EACXC,SAAU2C,EAAaP,GAAeS,EAAAA,EAAAA,IAAUF,EAAWrO,gBAAagH,IAExD,WAAhBsU,GACF,SAACjQ,GAAD,CACErL,SAAUA,EACVuL,4BAA4B,OAAC8C,QAAD,IAACA,IAAAA,EAAYgN,qBACzC/P,wBAAyBoR,EACzBlR,OAAQA,EACRuS,uBAAwBvS,EAAOM,KAC/BL,UAAWA,EACXC,SAAU2C,EAAaP,GAAeS,EAAAA,EAAAA,IAAUF,EAAWrO,gBAAagH,IAExD,UAAhBsU,GACF,SAACR,GAAD,CACE9a,SAAUA,EACVuL,4BAA4B,OAAC8C,QAAD,IAACA,IAAAA,EAAYgN,qBACzC7P,OAAQA,EACRC,UAAWA,KAGb,0BAQNmS,GAAyB,kBAC7B,SAAC,IAAD,CAAK3a,QAAS,CAACG,SAAU,IAAzB,UACE,SAAC4a,EAAA,EAAD,CACEnU,MAAM,gBACN5K,YAAY,+EACZ1C,KAAK,uBAwDX,I,GAAM0e,GAA8B,SAACjb,GACnC,IAAMC,GAASC,EAAAA,EAAAA,GACb+d,GACA,CACE5d,UAAW,CAACL,SAAU,CAAC1D,KAAM0D,EAAS1D,OACtC4hB,6BAA6B,IAG1BC,GAAgBle,EAAOQ,MAAQR,EAAOyd,cAAgB,IAAtDS,aACDlQ,EAAQkQ,GAA4C,UAA5BA,EAAaxd,WAAyBwd,EAAe,KACnF,MAAO,CACLjD,sBAAuBjb,EACvBoO,YAAiB,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOI,aAAc,KACjC8M,oBAAmB,OAAElN,QAAF,IAAEA,OAAF,EAAEA,EAAO1D,sBAAsB,KAIhD0T,IAA8B5b,EAAAA,EAAAA,IAAH,4wBA0C7B+P,GACAZ,IAGEgM,GAID,SAAC,GAAD,IAAE1R,EAAF,EAAEA,KAAM7E,EAAR,EAAQA,QAASwW,EAAjB,EAAiBA,cAAjB,OACH,SAAC,IAAD,CACExa,QAAS,CAACG,SAAU,GAAIF,WAAY,IACpCG,OAAQ,CAACC,KAAM,SAAUC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAF5C,UAIE,SAACsgB,EAAA,EAAD,CACEvW,OAAO,OACPgC,OACE,kFACsD,KACpD,iBAAMtM,MAAO,CAAC8gB,WAAY,KAA1B,UACE,SAAC5c,EAAA,EAAD,CACEjD,UAAW,CAACkD,GAAIC,OAAOmK,IACvBlK,WAAY,CAACC,aAAa,EAAMC,cAAc,OALpD,OAWF7C,aACE,SAACsK,EAAA,EAAD,CAAYtC,QAASA,EAASqX,UAAU,SAAxC,SACGb,EACG,8CACA,sCAORP,GAID,SAAC,GAA4C,IAA3C7O,EAA0C,EAA1CA,WAAY3C,EAA8B,EAA9BA,SAAUyR,EAAoB,EAApBA,eACrBza,EAAc2L,GAChB1L,EAAAA,EAAAA,IAAiB0L,EAAWgB,WAAWzR,KAAMyQ,EAAWgB,WAAWC,SAAS1R,MAC5E,KAEJ,OACE,gCACGyQ,GAAc3L,GACb,UAACkF,EAAA,EAAD,CAAKrL,KAAK,QAAV,uBACW,SAACgiB,EAAA,EAAD,CAAgB7b,YAAaA,QAGxC,SAACkF,EAAA,EAAD,CAAKrL,KAAK,gBAAV,mBAED8R,GAAc3L,IACb,SAACkP,GAAD,CAAwBlD,UAAWL,EAAY3L,YAAaA,IAE7D2L,GAAc3L,GAAe2L,EAAWmQ,YACvC,SAAC5W,EAAA,EAAD,CAAKrL,KAAK,cAAV,UACE,SAAC,KAAD,CAAMwB,IAAIwT,EAAAA,EAAAA,IAAyB7O,EAAD,wBAA+B2L,EAAWmQ,YAA5E,SACGnQ,EAAWmQ,eAIT,OAAR9S,QAAQ,IAARA,OAAA,EAAAA,EAAUuE,mBAAmB,SAACC,GAAA,GAAD,CAAuBxE,SAAUA,EAAU+S,eAAa,KACtF,SAACC,EAAA,GAAD,CAAUhT,SAAUA,EAAUzE,QAASkW,IACtC9O,IACC,SAAC,KAAD,CAAqB9Q,MAAO,CAACoY,SAAU,YAAatH,WAAYA,EAAYsQ,aAAW,Q,YCnblFC,GAAoB,WAAO,IAAD,GACrCC,EAAAA,EAAAA,MAEA,IAAMrT,GAASsT,EAAAA,EAAAA,MACT/Q,GAAUC,EAAAA,EAAAA,MACV+Q,GAAyBvT,EAAO,IAAQ,IAC3CsN,MAAM,KACN/W,QAAO,SAACid,GAAD,OAAeA,KACtBrgB,IAAIsgB,oBAEDC,GAAchf,EAAAA,EAAAA,GAClBif,GACA,CACE/e,KAA6B,IAAvB2e,EAAYxgB,OAClB8B,UAAW,CAACL,SAAU,CAAC1D,KAAMyiB,MAUjC,OANAK,EAAAA,EAAAA,GACEL,GAAeA,EAAYxgB,OAA3B,mBACegC,EAAAA,EAAAA,IAAuB,CAACjE,KAAMyiB,KACzC,UAGFG,EAAY/c,SAEZ,UAACkd,EAAA,EAAD,YACE,SAACrC,EAAA,EAAD,CAAiBhd,SAAU,CAAC1D,KAAMyiB,MAClC,SAAC,IAAD,CAAK5hB,KAAM,CAACC,UAAW,MAAOoG,eAAgB,UAAWjG,MAAO,CAAC+hB,WAAY,SAA7E,UACE,UAAC,IAAD,CAAKniB,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAU8B,IAAK,IAAzD,WACE,SAAC+L,EAAA,EAAD,CAASC,QAAQ,eACjB,gBAAK5N,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAApB,0CAQe,IAAvBihB,EAAYxgB,QACkC,wBAA9C,UAAA2gB,EAAYze,YAAZ,eAAkB0d,aAAaxd,aAG7B,UAAC,IAAD,CAAKxD,KAAM,CAACC,UAAW,UAAWG,MAAO,CAAC6J,OAAQ,OAAQpJ,SAAU,UAApE,WACE,SAACgf,EAAA,EAAD,CACEhd,SAAU,CAAC1D,KAAMyiB,GACjBrhB,OACE,UAAC,IAAD,CAAKP,KAAM,CAACgC,IAAK,GAAI9B,WAAY,UAAjC,WACE,SAAC,IAAD,KACA,SAACkiB,EAAA,EAAD,CAAiB1gB,MAAM,6BAI7B,SAAC2gB,GAAA,GAAD,CACEC,WAAYV,EACZW,cAAe,SAACD,GAAD,OAAgB1R,EAAQI,MAAKvR,EAAAA,GAAAA,GAAuB,CAACN,KAAMmjB,YAM3E,SAACzE,GAAD,CAAWhb,SAAU,CAAC1D,KAAMyiB,MAKrC,MAEMI,IAA4B9c,EAAAA,EAAAA,IAAH,oP,8ECzEzBsd,EAAU,SAAClI,EAAcmI,GAC7B,IAAMC,EAAO,IAAInT,IAAIoT,MAAMlgB,KAAK6X,EAAMsI,aACtC,OAAQH,EAAOtP,MACb,IAAK,aACH,MAAsBsP,EAAOI,QAAtBC,EAAP,EAAOA,QAASrT,EAAhB,EAAgBA,GAEhB,OADAqT,EAAUJ,EAAKK,IAAItT,GAAMiT,EAAKM,OAAOvT,GAC9B,CAACwT,cAAexT,EAAImT,WAAYF,GAGzC,IAAK,eACH,MAA8BD,EAAOI,QAA9BC,EAAP,EAAOA,QAASrT,EAAhB,EAAgBA,GAAIyT,EAApB,EAAoBA,OACbD,EAAiB3I,EAAjB2I,cAEDE,EAAcF,EAAgBC,EAAO/S,QAAQ8S,IAAkB,EAC/DG,EAAiBF,EAAO/S,QAAQV,GACtC,IAAqB,IAAjB0T,IAA0C,IAApBC,EACxB,OAAO9I,EAIT,IADA,MAAqB,CAAC6I,EAAaC,GAAgB/V,OAAnD,eAAO9D,EAAP,KAAc8Z,EAAd,KACSvjB,EAAKyJ,EAAOzJ,GAAMujB,EAAKvjB,IAC9BgjB,EAAUJ,EAAKK,IAAIG,EAAOpjB,IAAO4iB,EAAKM,OAAOE,EAAOpjB,IAGtD,MAAO,CACLmjB,cAAexT,EACfmT,WAAYF,GAIhB,IAAK,aACH,MAA0BD,EAAOI,QAA1BC,EAAP,EAAOA,QAASI,EAAhB,EAAgBA,OAChB,MAAO,CACLD,cAAe,KACfL,WAAYE,EAAU,IAAIvT,IAAI2T,GAAU,IAAI3T,OAM9C+T,EAAsB,CAC1BV,WAAY,IAAIrT,IAChB0T,cAAe,MAGV,SAASM,EAAoBL,GAClC,MAA0Bjb,EAAAA,WAAiBua,EAASc,GAApD,eAAOhJ,EAAP,KAAckJ,EAAd,KAeA,MAAO,CAAClJ,EAAO,CAACmJ,gBAbQ,SAAChU,GAAD,OAAgB,SAACsH,GACvC,IAAO+L,EAAqB/L,EAArB+L,QAAqB/L,EAAZ2M,UACApJ,EAAM2I,cACpBO,EAAS,CAACrQ,KAAM,eAAgB0P,QAAS,CAACC,QAAAA,EAASrT,GAAAA,EAAIyT,OAAAA,KAEvDM,EAAS,CAACrQ,KAAM,aAAc0P,QAAS,CAACC,QAAAA,EAASrT,GAAAA,OAQpBkU,YAJb,SAACb,GACnBU,EAAS,CAACrQ,KAAM,aAAc0P,QAAS,CAACC,QAAAA,EAASI,OAAAA,U,+MC7DxC9B,EAIR,SAAC,GAAyD,IAAxD7b,EAAuD,EAAvDA,YAAuD,IAA1CuB,SAAAA,OAA0C,aAAxB8c,YAAAA,OAAwB,SACrDzR,EAAY5M,EAAZ4M,SACA0R,GAA+BC,EAAAA,EAAAA,IAA0Bve,EAAY4M,UAArE0R,4BACDE,GAAaC,EAAAA,EAAAA,IAAyBze,GAE5C,OACE,UAAC,IAAD,CAAKvF,KAAM,CAACG,QAAS,cAAeF,UAAW,MAAOC,WAAY,UAAWwM,MAAOqX,EAApF,UACGjd,IAAY,SAAC,KAAD,CAAMrG,KAAK,SAASL,MAAO,CAAC6jB,YAAa,GAAIvjB,MAAOC,EAAAA,EAAAA,WACjE,SAACujB,EAAD,CAAgBtjB,IAAIwT,EAAAA,EAAAA,IAAyB7O,GAAcnF,MAAO,CAACJ,KAAM,GAAzE,UACE,SAAC,IAAD,CAAgBe,KAAMgjB,MAEvBF,EAA4BM,SAAWP,GACtC,SAAC,IAAD,CAAgCzR,SAAUA,EAA1C,SACG,gBAAEiS,EAAF,EAAEA,UAAWC,EAAb,EAAaA,UAAb,OACC,SAACC,EAAD,CACEC,QACEF,EACE,mBAEA,oDACkB,4BAASlS,OANjC,SAWGkS,GACC,SAAC,IAAD,CAASrW,QAAQ,eAEjB,SAACwW,EAAD,CAAc1a,QAASsa,EAAvB,UACE,SAAC,KAAD,CAAM3jB,KAAK,UAAUC,MAAOC,EAAAA,EAAAA,iBAMpC,SAKJujB,GAAiBxhB,EAAAA,EAAAA,IAAO+hB,EAAAA,IAAV,qFAAG/hB,CAAH,sBAId4hB,GAAgB5hB,EAAAA,EAAAA,IAAOgiB,EAAAA,GAAV,oFAAGhiB,CAAH,wCAQb8hB,EAAe9hB,EAAAA,GAAAA,OAAAA,WAAH,wEAAGA,CAAH,6MAYZqK,EAAAA,GAKKA,EAAAA,GACEpM,EAAAA,EAAAA,U,qOCxEAoU,EAKR,SAAC,GAA0D,IAAzDL,EAAwD,EAAxDA,UAAWI,EAA6C,EAA7CA,QAASvP,EAAoC,EAApCA,YAAoC,IAAvByP,WAAAA,OAAuB,SAC7D,EAAwB/M,EAAAA,UAAe,GAAvC,eAAO8D,EAAP,KAAaI,EAAb,KAEMwY,EAAgBjQ,EAAUtT,OAC1BwjB,EAAc9P,EAAQ1T,OAE5B,GAAIujB,EAAgB,GAAKC,EAAc,GAAMD,GAAiBC,EAAc,CAC1E,IAAMC,EACJF,GAAiBC,EAAjB,UACOD,EAAgBC,EADvB,sBAEID,EAAa,UACVA,EADU,wBAEVC,EAFU,YAIbxlB,EAAOulB,EAAgB,EAAI,WAAa,UAE9C,OACE,iCACE,SAAC,IAAD,CAAKvlB,KAAMA,EAAX,UACE,SAAC,IAAD,CAAY0K,QAAS,kBAAMqC,GAAQ,IAAOzL,MAAOC,EAAAA,EAAAA,KAAjD,SACGkkB,OAGL,SAAC,IAAD,CACEvY,OAAQP,EACRU,QAAS,kBAAMN,GAAQ,IACvB5G,YAAaA,EACbmP,UAAWA,EACXI,QAASA,EACTE,WAAYA,OAMpB,OAAI2P,GAEA,SAACG,EAAD,CAAkBC,SAAUrQ,EAAU,GAAInP,YAAaA,EAAayP,WAAYA,IAIhF4P,GACK,SAACI,EAAD,CAAgBC,OAAQnQ,EAAQ,GAAIvP,YAAaA,EAAayP,WAAYA,IAG5E,MAGH8P,EAID,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,SAAUxf,EAA6B,EAA7BA,YAAayP,EAAgB,EAAhBA,WACrBkQ,EAAkDH,EAAlDG,aAAcC,EAAoCJ,EAApCI,kBACfC,EAAmC,YADgBL,EAAjBM,cACV5e,OACxB6e,GACJ,SAAC,IAAD,CAAK5a,OAAQ0a,EAAU,UAAY,OAAQhmB,KAAK,WAAhD,UACE,UAAC,IAAD,CAAKY,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAU8B,IAAK,GAAzD,WACE,SAAC,KAAD,CACEpB,IAAIwT,EAAAA,EAAAA,IAAyB7O,EAAD,qBAA4Bwf,EAAStkB,OACjEL,MAAO,CAACS,SAAU,SAAU0kB,aAAc,YAF5C,UAIGC,EAAAA,EAAAA,GAAgBN,EAAcC,GAAqB,SAErDnQ,GACC,SAAC,IAAD,CAAgB9S,KAAK,QAAQqD,YAAaA,EAAawf,SAAUA,IAC/D,UAKV,OAAOA,EAASG,cACd,SAAC,IAAD,CACEO,UAAU,YACVlB,SACE,UAAC,IAAD,CAAKvkB,KAAM,CAACC,UAAW,SAAU+B,IAAK,GAAtC,WACE,qCACQ,4BAAS+iB,EAAStkB,WAE1B,mCACQ,KACN,kBAAML,MAAO,CAACslB,WAAYC,EAAAA,EAAAA,UAAsBpjB,WAAY,OAA5D,cACIwiB,EAASG,aADb,WAIF,yCACY,4BAASH,EAASI,mBAAqB,cAdzD,SAmBGG,IAGHA,GAIEN,EAID,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,OAAQ1f,EAA6B,EAA7BA,YAAayP,EAAgB,EAAhBA,WACpBoQ,EAAwC,YAA9BH,EAAOW,YAAYnf,OACnC,OACE,SAAC,IAAD,CAAKiE,OAAQ0a,EAAU,UAAY,OAAQhmB,KAAK,UAAhD,UACE,UAAC,IAAD,CAAKY,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAU8B,IAAK,GAAzD,WACE,SAAC,KAAD,CACEpB,IAAIwT,EAAAA,EAAAA,IAAyB7O,EAAD,mBAA0B0f,EAAOxkB,OAC7DL,MAAO,CAACC,SAAU,IAAKQ,SAAU,UAFnC,UAIE,SAAC,IAAD,CAAgBE,KAAMkkB,EAAOxkB,SAE9BuU,GACC,SAAC,IAAD,CAAc9S,KAAK,QAAQqD,YAAaA,EAAa0f,OAAQA,IAC3D,Y,yJChICY,EAAwB,GAWxBC,EAAoB,SAAC5mB,GAChC,IAAO6mB,EAAyE7mB,EAAzE6mB,SAAUjc,EAA+D5K,EAA/D4K,QAASkc,EAAsD9mB,EAAtD8mB,SAAUxS,EAA4CtU,EAA5CsU,aAAcyS,EAA8B/mB,EAA9B+mB,aAAcC,EAAgBhnB,EAAhBgnB,aAC1DC,EAAmBH,IAAaI,EAAAA,GACtC,OACE,SAACC,EAAD,CAAqBvZ,MAAOiZ,EAAUjc,QAASA,EAA/C,UACE,UAAC,IAAD,CACE9J,KAAM,CAACE,WAAY,SAAUmG,eAAgB,iBAC7CP,QAAS,CAACC,WAAY,IAFxB,WAIE,UAAC,IAAD,CAAK/F,KAAM,CAACE,WAAY,SAAU8B,IAAK,GAAvC,WACE,SAAC,KAAD,CAAMvB,KAAK,SAASC,MAAOC,EAAAA,EAAAA,QAC3B,4BACE,SAAC2lB,EAAD,UAAWH,EAAmB3S,EAAewS,IAC5CC,IAAiBE,GAChB,SAACI,EAAD,qBAAmB/S,KACjB,YAGR,UAAC,IAAD,CAAKxT,KAAM,CAACE,WAAY,SAAU8B,IAAK,GAAvC,UACGkkB,GACD,SAAC,IAAD,CAAK5lB,OAAQ,CAACE,IAAK,GAAnB,UACE,SAAC,KAAD,CAAMC,KAAK,+BAQjB4lB,EAAsB3jB,EAAAA,GAAAA,OAAAA,WAAH,kFAAGA,CAAH,iTACH/B,EAAAA,EAAAA,OAEWA,EAAAA,EAAAA,YAAuCA,EAAAA,EAAAA,YAM5DklB,EASYllB,EAAAA,EAAAA,QAGpBoM,EAAAA,IAEE,qBAAED,MAAoB,KAAH,gCAInBwZ,EAAW5jB,EAAAA,GAAAA,KAAAA,WAAH,uEAAGA,CAAH,sBAIR6jB,EAAe7jB,EAAAA,GAAAA,KAAAA,WAAH,2EAAGA,CAAH,+BAEP/B,EAAAA,EAAAA,U,wMC1DE6lB,EAAoC,SAACtnB,GAChD,IAAOE,EAAyCF,EAAzCE,KAAMsL,EAAmCxL,EAAnCwL,OAAQ3J,EAA2B7B,EAA3B6B,KAAMkY,EAAqB/Z,EAArB+Z,SAAawN,GAAxC,OAAgDvnB,EAAhD,GAEA,OAAI+Z,GACK,SAAC,KAAD,CAAUA,UAAQ,EAAC7Z,KAAMA,EAAMsL,OAAQA,EAAQ3J,KAAMA,KAG5D,SAAC2lB,GAAD,kBAAoBD,GAApB,cACE,UAAC,IAAD,CAAKzmB,KAAM,CAACC,UAAW,MAAO+B,IAAK,EAAG9B,WAAY,UAAlD,WACGymB,EAAAA,EAAAA,IAAcvnB,EAAMsL,IACrB,yBAAM3J,WAMR2lB,GAAiBhkB,EAAAA,EAAAA,IAAO+hB,EAAAA,IAAV,+EAAG/hB,CAAH,wVAehBqK,EAAAA,GAIAA,EAAAA,GAQSpM,EAAAA,EAAAA,QAKKA,EAAAA,EAAAA,U,4MCjELimB,EAAuB,SAAC,GAAD,IAAE1a,EAAF,EAAEA,SAAF,OAClC,SAAC,IAAD,CACEpG,QAAS,CAACG,SAAU,EAAGF,WAAY,IACnCG,OAAQ,CAACC,KAAM,QAASC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aACzCP,MAAO,CAACiE,WAAY,SAAUkhB,aAAc,WAAY1kB,SAAU,UAHpE,SAKGqL,KAIQ2a,EAAoB,SAAC,GAAD,IAAE3a,EAAF,EAAEA,SAAF,OAC/B,SAAC,IAAD,CACEpG,QAAS,CAACC,WAAY,GAAIE,SAAU,IACpCjG,KAAM,CAACC,UAAW,SAAUoG,eAAgB,cAC5CjG,MAAO,CAACM,MAAOC,EAAAA,EAAAA,QAAgBE,SAAU,UACzCqF,OAAQ,CAACC,KAAM,QAASC,MAAO,EAAG1F,MAAOC,EAAAA,EAAAA,aAJ3C,SAMGuL,KAIQ7B,EAAY3H,EAAAA,GAAAA,IAAAA,WAAH,uEAAGA,CAAH,gCASTokB,EAAQpkB,EAAAA,GAAAA,IAAAA,OAA6B,gBAAE0G,EAAF,EAAEA,aAAF,MAAqB,CACrEhJ,MAAO,CACL6J,OAAO,GAAD,OAAKb,EAAL,WAFQ,8EAAG1G,CAAH,mCAWL4H,EAAM5H,EAAAA,GAAAA,IAAAA,OAA2B,gBAAEgH,EAAF,EAAEA,QAASC,EAAX,EAAWA,OAAX,MAAwB,CACpEvJ,MAAO,CACL6J,OAAO,GAAD,OAAKP,EAAL,MACNqd,UAAU,cAAD,OAAgBpd,EAAhB,YAHG,4EAAGjH,CAAH,8D,0MCnCHskB,EASR,SAAC,GASC,IARLzhB,EAQI,EARJA,YACA0E,EAOI,EAPJA,OACAV,EAMI,EANJA,MACAwc,EAKI,EALJA,SACAkB,EAII,EAJJA,SACAtD,EAGI,EAHJA,YACAsC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,SAAC,KAAD,CAAKxc,QAASO,EAAQN,OAAQJ,EAA9B,UACE,SAAC,IAAD,CACEyc,SAAUzgB,EAAY9E,KACtB+S,aAAcjO,EAAY4M,SAC1B4T,SAAUA,EACVjc,QAAS,SAACjF,GAAD,OACPA,EAAEqiB,iBAAiB,SAAWvD,GAAaoC,GAAYkB,EAAS1hB,IAElE0gB,aAAcA,EACdC,aAAcA,OAMTiB,EAGR,SAAC,GAAwC,IAAvCpF,EAAsC,EAAtCA,YAAsC,IAAzBqF,WAAAA,OAAyB,MAAZ,OAAY,EACpCC,EAAyBtF,EAAzBsF,OAAQriB,EAAiB+c,EAAjB/c,QAAS1B,EAAQye,EAARze,KACxB,OACE,gBAAKlD,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAApB,UACI0mB,GAAWriB,IAAY1B,EAAQ,UAAY8jB,KAKtCE,EAAwB,SAAC,GAAgB,IAAfpb,EAAc,EAAdA,SACrC,OACE,SAACqb,EAAD,WACE,SAAC,KAAD,UAAUrb,OAKVqb,EAAuB7kB,EAAAA,GAAAA,IAAAA,WAAH,uFAAGA,CAAH,6FAKtB8kB,EAAAA,GACS7mB,EAAAA,EAAAA,SAOA8mB,EAAqB,SAACC,GACjCzf,EAAAA,WAAgB,WACd,IAAM0f,EAAQC,YAAW,WACvBF,MALkB,KAQpB,OAAO,kBAAMG,aAAaF,MACzB,CAACD","sources":["../../core/src/assets/AssetLink.tsx","../../core/src/assets/AssetEventMetadataEntriesTable.tsx","../../core/src/assets/AssetMaterializationUpstreamData.tsx","../../core/src/assets/AssetEventDetail.tsx","../../core/src/assets/AssetEventList.tsx","../../core/src/assets/AllIndividualEventsLink.tsx","../../core/src/assets/AssetPartitionDetail.tsx","../../core/src/assets/AssetEvents.tsx","../../core/src/assets/AssetNodeList.tsx","../../core/src/assets/AssetNodeDefinition.tsx","../../core/src/assets/AssetNodeInstigatorTag.tsx","../../core/src/assets/AssetNodeLineageGraph.tsx","../../core/src/assets/AssetNodeLineage.tsx","../../core/src/assets/AssetPartitionList.tsx","../../core/src/assets/AssetPartitions.tsx","../../core/src/assets/AssetPlots.tsx","../../core/src/assets/AssetView.tsx","../../core/src/assets/AssetsCatalogRoot.tsx","../../core/src/hooks/useSelectionReducer.ts","../../core/src/nav/RepositoryLink.tsx","../../core/src/nav/ScheduleOrSensorTag.tsx","../../core/src/runs/RepoSectionHeader.tsx","../../core/src/ui/MenuLink.tsx","../../core/src/ui/VirtualizedTable.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx"],"sourcesContent":["import {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetLink: React.FC<{\n  path: string[];\n  icon?: 'asset' | 'asset_non_sda' | 'folder';\n  textStyle?: 'break-word' | 'middle-truncate';\n  url?: string;\n  isGroup?: boolean;\n}> = (props) => {\n  const {path, icon, url, isGroup, textStyle = 'break-word'} = props;\n  const linkUrl = url ? url : assetDetailsPathForKey({path});\n  const assetPath =\n    path\n      .reduce((accum, elem, ii) => [...accum, ii > 0 ? ' / ' : '', elem], [] as string[])\n      .join('') + (isGroup ? '/' : '');\n\n  return (\n    <Box\n      flex={{direction: 'row', alignItems: 'flex-start', display: 'inline-flex'}}\n      style={{maxWidth: '100%'}}\n    >\n      {icon ? (\n        <Box margin={{right: 8, top: 2}}>\n          <Icon name={icon} color={Colors.Gray400} />\n        </Box>\n      ) : null}\n      <Link to={linkUrl} style={{overflow: 'hidden'}}>\n        {textStyle === 'break-word' ? (\n          <span style={{wordBreak: 'break-word'}}>{assetPath}</span>\n        ) : (\n          <MiddleTruncate text={assetPath} />\n        )}\n      </Link>\n    </Box>\n  );\n};\n","import {Box, Caption, Colors, Icon, Mono} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {MetadataEntry} from '../metadata/MetadataEntry';\nimport {titleForRun} from '../runs/RunUtils';\n\nimport {\n  AssetObservationFragment,\n  AssetMaterializationFragment,\n} from './types/useRecentAssetEvents.types';\n\n/**\n * This component shows the metadata entries attached to an Asset Materialization or Observation event.\n * AssetNodes also have definition-time metadata, which is unrelated to this event metadata.\n */\nexport const AssetEventMetadataEntriesTable: React.FC<{\n  event: AssetObservationFragment | AssetMaterializationFragment | null;\n  observations?: (AssetObservationFragment | AssetMaterializationFragment)[];\n}> = ({event, observations}) => {\n  if (!event || (!event.metadataEntries.length && !observations?.length)) {\n    return <Caption color={Colors.Gray500}>No materializations</Caption>;\n  }\n\n  const {metadataEntries, timestamp} = event;\n\n  return (\n    <AssetEventMetadataScrollContainer>\n      <AssetEventMetadataTable>\n        <tbody>\n          {metadataEntries.map((entry) => (\n            <tr key={`metadata-${entry.label}`}>\n              <td>\n                <Mono>{entry.label}</Mono>\n              </td>\n              <td>\n                <Mono>\n                  <MetadataEntry entry={entry} expandSmallValues={true} />\n                </Mono>\n              </td>\n              <td style={{opacity: 0.7}}>{entry.description}</td>\n            </tr>\n          ))}\n          {(observations || []).map((obs) => (\n            <React.Fragment key={obs.timestamp}>\n              {obs.metadataEntries.map((entry) => (\n                <tr key={`metadata-${obs.timestamp}-${entry.label}`}>\n                  <td>\n                    <Mono>{entry.label}</Mono>\n                  </td>\n                  <td>\n                    <Mono>\n                      <MetadataEntry entry={entry} expandSmallValues={true} />\n                    </Mono>\n                  </td>\n                  <td style={{opacity: 0.7}}>\n                    <Box flex={{gap: 8}}>\n                      <Icon name=\"observation\" size={16} style={{marginTop: 2}} />\n                      <span>\n                        {`${obs.stepKey} in `}\n                        <Link to={`/runs/${obs.runId}?timestamp=${obs.timestamp}`}>\n                          <Mono>{titleForRun({runId: obs.runId})}</Mono>\n                        </Link>\n                      </span>\n                    </Box>\n                    <Caption style={{marginLeft: 24}}>\n                      {`(${dayjs(obs.timestamp).from(timestamp, true /* withoutSuffix */)} later)`}\n                    </Caption>\n                    {entry.description}\n                  </td>\n                </tr>\n              ))}\n            </React.Fragment>\n          ))}\n        </tbody>\n      </AssetEventMetadataTable>\n    </AssetEventMetadataScrollContainer>\n  );\n};\n\nconst AssetEventMetadataScrollContainer = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst AssetEventMetadataTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n  tr td:first-child {\n    max-width: 300px;\n    word-wrap: break-word;\n    width: 25%;\n  }\n  tr td {\n    border: 1px solid ${Colors.KeylineGray};\n    padding: 8px 12px;\n    font-size: 14px;\n    vertical-align: top;\n  }\n`;\n\nexport const AssetEventDetailEmpty = () => <Box />;\nexport const AssetPartitionDetailEmpty = () => <Box />;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {\n  AssetMaterializationUpstreamQuery,\n  AssetMaterializationUpstreamQueryVariables,\n  MaterializationUpstreamDataVersionFragment,\n} from './types/AssetMaterializationUpstreamData.types';\n\ndayjs.extend(relativeTime);\n\nexport const AssetMaterializationUpstreamData: React.FC<{\n  assetKey: AssetKeyInput;\n  timestamp?: string;\n}> = ({assetKey, timestamp}) => {\n  const result = useQuery<\n    AssetMaterializationUpstreamQuery,\n    AssetMaterializationUpstreamQueryVariables\n  >(ASSET_MATERIALIZATION_UPSTREAM_QUERY, {\n    skip: !timestamp,\n    variables: {assetKey, timestamp: timestamp || ''},\n  });\n\n  const displayName = displayNameForAssetKey(assetKey);\n  const entries =\n    result.data?.assetNodeOrError.__typename === 'AssetNode'\n      ? result.data.assetNodeOrError.assetMaterializationUsedData\n      : [];\n\n  const renderEntryAndParents = (\n    entry: MaterializationUpstreamDataVersionFragment,\n    depth: number,\n    isFirstAtDepth: boolean,\n  ): React.ReactNode[] => {\n    const entryDisplayName = displayNameForAssetKey(entry.assetKey);\n    const entryLink = assetDetailsPathForKey(entry.assetKey, {\n      view: 'events',\n      time: entry.timestamp,\n    });\n\n    return [\n      <tr key={entryDisplayName}>\n        <td>\n          <Box flex={{gap: 4}} style={{paddingLeft: Math.max(0, depth) * 20}}>\n            {isFirstAtDepth && <Icon name=\"arrow_indent\" style={{marginLeft: -20}} />}\n            <Link to={entryLink}>\n              <Box flex={{gap: 4}}>\n                <Icon name=\"asset\" />\n                <MiddleTruncate text={entryDisplayName} />\n              </Box>\n            </Link>\n          </Box>\n        </td>\n        <td>\n          <Box flex={{gap: 8}} style={{whiteSpace: 'nowrap'}}>\n            <Link to={entryLink}>\n              <Timestamp\n                timestamp={{ms: Number(entry.timestamp)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            </Link>\n            <span>({dayjs(Number(entry.timestamp)).from(Number(timestamp), true)} earlier)</span>\n          </Box>\n        </td>\n      </tr>,\n      ...entries\n        .filter((e) => displayNameForAssetKey(e.downstreamAssetKey) === entryDisplayName)\n        .map((e, idx) => renderEntryAndParents(e, depth + 1, idx === 0)),\n    ];\n  };\n\n  if (result.loading) {\n    return (\n      <AssetUpstreamDataTable>\n        <tbody>\n          <tr>\n            <td>Loading…</td>\n          </tr>\n        </tbody>\n      </AssetUpstreamDataTable>\n    );\n  }\n  if (!entries.length) {\n    return (\n      <AssetUpstreamDataTable>\n        <tbody>\n          <tr>\n            <td>No materializations to display.</td>\n          </tr>\n        </tbody>\n      </AssetUpstreamDataTable>\n    );\n  }\n  return (\n    <AssetUpstreamDataTable>\n      <tbody>\n        {entries\n          .filter((e) => displayNameForAssetKey(e.downstreamAssetKey) === displayName)\n          .map((e) => renderEntryAndParents(e, 0, false))}\n      </tbody>\n    </AssetUpstreamDataTable>\n  );\n};\n\nconst ASSET_MATERIALIZATION_UPSTREAM_QUERY = gql`\n  query AssetMaterializationUpstreamQuery($assetKey: AssetKeyInput!, $timestamp: String!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      __typename\n      ... on AssetNode {\n        id\n        assetMaterializationUsedData(timestampMillis: $timestamp) {\n          ...MaterializationUpstreamDataVersionFragment\n        }\n      }\n    }\n  }\n\n  fragment MaterializationUpstreamDataVersionFragment on MaterializationUpstreamDataVersion {\n    __typename\n    timestamp\n    assetKey {\n      path\n    }\n    downstreamAssetKey {\n      path\n    }\n  }\n`;\n\nconst AssetUpstreamDataTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  tr td {\n    border: 1px solid ${Colors.KeylineGray};\n    padding: 8px 12px;\n    font-size: 14px;\n    vertical-align: top;\n  }\n`;\n","import {Box, Colors, Group, Heading, Icon, Mono, Subheading} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {titleForRun, linkToRunEvent} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetEventMetadataEntriesTable} from './AssetEventMetadataEntriesTable';\nimport {AssetEventSystemTags} from './AssetEventSystemTags';\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {AssetMaterializationUpstreamData} from './AssetMaterializationUpstreamData';\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nexport const AssetEventDetail: React.FC<{\n  assetKey: AssetKeyInput;\n  event: AssetMaterializationFragment | AssetObservationFragment;\n}> = ({event, assetKey}) => {\n  const run = event.runOrError?.__typename === 'Run' ? event.runOrError : null;\n  const repositoryOrigin = run?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n  const assetLineage = event.__typename === 'MaterializationEvent' ? event.assetLineage : [];\n\n  return (\n    <Box padding={{horizontal: 24, bottom: 24}} style={{flex: 1}}>\n      <Box\n        padding={{vertical: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Heading>\n          <Timestamp timestamp={{ms: Number(event.timestamp)}} />\n        </Heading>\n      </Box>\n      <Box\n        style={{display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 16}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        padding={{vertical: 16}}\n      >\n        <Box flex={{gap: 4, direction: 'column'}}>\n          <Subheading>Event</Subheading>\n          {event.__typename === 'MaterializationEvent' ? (\n            <Box flex={{gap: 4}}>\n              <Icon name=\"materialization\" />\n              Materialization\n            </Box>\n          ) : (\n            <Box flex={{gap: 4}}>\n              <Icon name=\"observation\" />\n              Observation\n            </Box>\n          )}\n        </Box>\n        {event.partition && (\n          <Box flex={{gap: 4, direction: 'column'}}>\n            <Subheading>Partition</Subheading>\n            <Box flex={{gap: 4}}>{event.partition}</Box>\n          </Box>\n        )}\n        <Box flex={{gap: 4, direction: 'column'}} style={{minHeight: 64}}>\n          <Subheading>Run</Subheading>\n          {run ? (\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusWithStats runId={run.runId} status={run.status} />\n              <Link to={linkToRunEvent(run, event)}>\n                <Mono>{titleForRun(run)}</Mono>\n              </Link>\n            </Box>\n          ) : (\n            '—'\n          )}\n        </Box>\n        <Box flex={{gap: 4, direction: 'column'}}>\n          <Subheading>Job</Subheading>\n          {run && !isHiddenAssetGroupJob(run.pipelineName) ? (\n            <Box>\n              <Box>\n                <PipelineReference\n                  showIcon\n                  pipelineName={run.pipelineName}\n                  pipelineHrefContext={repoAddress || 'repo-unknown'}\n                  snapshotId={run.pipelineSnapshotId}\n                  isJob={isThisThingAJob(repo, run.pipelineName)}\n                />\n              </Box>\n              <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                <Link to={linkToRunEvent(run, event)}>{event.stepKey}</Link>\n              </Group>\n            </Box>\n          ) : (\n            '—'\n          )}\n        </Box>\n      </Box>\n\n      {event.description && (\n        <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n          <Subheading>Description</Subheading>\n          {event.description}\n        </Box>\n      )}\n\n      <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n        <Subheading>Metadata</Subheading>\n        <AssetEventMetadataEntriesTable event={event} />\n      </Box>\n\n      {event.__typename === 'MaterializationEvent' && (\n        <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n          <Subheading>Source data</Subheading>\n          <AssetMaterializationUpstreamData timestamp={event.timestamp} assetKey={assetKey} />\n        </Box>\n      )}\n\n      <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n        <Subheading>System tags</Subheading>\n        <AssetEventSystemTags event={event} collapsible />\n      </Box>\n\n      {assetLineage.length > 0 && (\n        <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n          <Subheading>Parent materializations</Subheading>\n          <AssetLineageElements elements={assetLineage} timestamp={event.timestamp} />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport const AssetEventDetailEmpty = () => (\n  <Box padding={{horizontal: 24}} style={{flex: 1}}>\n    <Box\n      padding={{vertical: 24}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      flex={{alignItems: 'center', justifyContent: 'space-between'}}\n    >\n      <Heading color={Colors.Gray400}>No Event Selected</Heading>\n    </Box>\n    <Box\n      style={{display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 16}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      padding={{vertical: 16}}\n    >\n      <Box flex={{gap: 4, direction: 'column'}}>\n        <Subheading>Event</Subheading>\n      </Box>\n      <Box flex={{gap: 4, direction: 'column'}} style={{minHeight: 64}}>\n        <Subheading>Run</Subheading>—\n      </Box>\n      <Box flex={{gap: 4, direction: 'column'}}>\n        <Subheading>Job</Subheading>—\n      </Box>\n    </Box>\n\n    <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n      <Subheading>Metadata</Subheading>\n      <AssetEventMetadataEntriesTable event={null} />\n    </Box>\n  </Box>\n);\n","import {Box, Caption, Colors, Icon, Tag} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {titleForRun} from '../runs/RunUtils';\nimport {Container, Inner, Row} from '../ui/VirtualizedTable';\n\nimport {AssetEventGroup} from './groupByPartition';\n\n// This component is on the feature-flagged AssetOverview page and replaces AssetEventTable\n\nexport const AssetEventList: React.FC<{\n  xAxis: 'time' | 'partition';\n  groups: AssetEventGroup[];\n  focused?: AssetEventGroup;\n  setFocused?: (item: AssetEventGroup | undefined) => void;\n}> = ({groups, focused, setFocused, xAxis}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const focusedRowRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groups.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 80,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  React.useEffect(() => {\n    if (focusedRowRef.current) {\n      const el = focusedRowRef.current;\n      if (el && el instanceof HTMLElement && 'scrollIntoView' in el) {\n        el.scrollIntoView({block: 'nearest'});\n      }\n    }\n  }, [focused]);\n\n  return (\n    <AssetListContainer ref={parentRef}>\n      <Inner $totalHeight={totalHeight}>\n        {items.map(({index, key, size, start}) => {\n          const group = groups[index];\n          return (\n            <AssetListRow\n              key={key}\n              $height={size}\n              $start={start}\n              $focused={group === focused}\n              ref={group === focused ? focusedRowRef : undefined}\n              onClick={(e) => {\n                // If you're interacting with something in the row, don't trigger a focus change.\n                // Since focus is stored in the URL bar this overwrites any link click navigation.\n                // We could alternatively e.preventDefault() on every link but it's easy to forget.\n                if (e.target instanceof HTMLElement && e.target.closest('a')) {\n                  return;\n                }\n                setFocused?.(focused !== group ? group : undefined);\n              }}\n            >\n              <Box\n                style={{height: size}}\n                padding={{left: 24, right: 12}}\n                flex={{direction: 'column', justifyContent: 'center', gap: 8}}\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n              >\n                {xAxis === 'partition' ? (\n                  <AssetEventListPartitionRow group={group} />\n                ) : (\n                  <AssetEventListEventRow group={group} />\n                )}\n              </Box>\n            </AssetListRow>\n          );\n        })}\n      </Inner>\n    </AssetListContainer>\n  );\n};\n\nexport const AssetListContainer = styled(Container)`\n  outline: none;\n  &:focus {\n    box-shadow: 0 -1px ${Colors.Blue500};\n  }\n`;\n\nexport const AssetListRow = styled(Row)<{$focused: boolean}>`\n  cursor: pointer;\n  user-select: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    background: ${Colors.Gray100};\n  }\n  ${(p) =>\n    p.$focused &&\n    `background: ${Colors.Blue50};\n     color: ${Colors.Blue700};\n     :hover {\n       background: ${Colors.Blue50};\n     }\n    `}\n`;\n\nconst AssetEventListPartitionRow: React.FC<{group: AssetEventGroup}> = ({group}) => {\n  const {partition, latest, timestamp} = group;\n  return (\n    <>\n      <Box flex={{gap: 4, direction: 'row', alignItems: 'flex-start'}}>\n        <Icon name=\"partition\" />\n        {partition}\n        <div style={{flex: 1}} />\n        {!latest ? <Tag intent=\"none\">Missing</Tag> : <Tag intent=\"success\">Materialized</Tag>}\n      </Box>\n\n      <Caption color={Colors.Gray600} style={{userSelect: 'none'}}>\n        {timestamp ? (\n          <span>\n            Materialized <Timestamp timestamp={{ms: Number(timestamp)}} />\n          </span>\n        ) : (\n          'Never materialized'\n        )}\n      </Caption>\n    </>\n  );\n};\n\nconst AssetEventListEventRow: React.FC<{group: AssetEventGroup}> = ({group}) => {\n  const {latest, partition, timestamp} = group;\n  const run = latest?.runOrError.__typename === 'Run' ? latest.runOrError : null;\n\n  return (\n    <>\n      <Box flex={{gap: 4, direction: 'row'}}>\n        {latest?.__typename === 'MaterializationEvent' ? (\n          <Icon name=\"materialization\" />\n        ) : (\n          <Icon name=\"observation\" />\n        )}\n        <Timestamp timestamp={{ms: Number(timestamp)}} />\n      </Box>\n      <Box flex={{gap: 4, direction: 'row'}}>\n        {partition && <Tag>{partition}</Tag>}\n        {latest && run && (\n          <Tag>\n            <AssetRunLink\n              runId={run.runId}\n              event={{stepKey: latest.stepKey, timestamp: latest.timestamp}}\n            >\n              <Box flex={{gap: 4, direction: 'row', alignItems: 'center'}}>\n                <RunStatusWithStats runId={run.runId} status={run.status} size={8} />\n                {titleForRun(run)}\n              </Box>\n            </AssetRunLink>\n          </Tag>\n        )}\n      </Box>\n    </>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  IconWrapper,\n  Table,\n  Mono,\n} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {MetadataEntry} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {AssetEventGroup} from './groupByPartition';\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nexport const AssetEventsTable: React.FC<{\n  hasPartitions: boolean;\n  hasLineage: boolean;\n  groups: AssetEventGroup[];\n  focused?: AssetEventGroup;\n  setFocused?: (timestamp: AssetEventGroup | undefined) => void;\n}> = ({hasPartitions, hasLineage, groups, focused, setFocused}) => {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          {hasPartitions && <th style={{minWidth: 100}}>Partition</th>}\n          <th style={{minWidth: 150}}>Timestamp</th>\n          <th style={{minWidth: 150}}>Job</th>\n          <th style={{width: 100}}>Run</th>\n        </tr>\n      </thead>\n      <tbody>\n        {groups.map((group) => (\n          <React.Fragment key={group.timestamp || group.partition}>\n            <HoverableRow\n              onClick={(e) => {\n                // If you're interacting with something in the row, don't trigger a focus change.\n                // Since focus is stored in the URL bar this overwrites any link click navigation.\n                // We could alternatively e.preventDefault() on every link but it's easy to forget.\n                if (e.target instanceof HTMLElement && e.target.closest('a')) {\n                  return;\n                }\n                setFocused?.(focused !== group ? group : undefined);\n              }}\n            >\n              <EventGroupRow\n                group={group}\n                hasPartitions={hasPartitions}\n                hasLineage={hasLineage}\n                isFocused={focused === group}\n              />\n            </HoverableRow>\n            {focused === group ? (\n              <MetadataEntriesRow hasLineage={hasLineage} group={group} />\n            ) : undefined}\n          </React.Fragment>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst NoneSpan = () => <span style={{color: Colors.Gray400}}>None</span>;\n\nconst MetadataEntriesRow: React.FC<{\n  group: AssetEventGroup;\n  hasLineage: boolean;\n}> = React.memo(({group, hasLineage}) => {\n  const {latest, timestamp} = group;\n  if (!latest) {\n    return <tr></tr>;\n  }\n  const assetLineage = latest.__typename === 'MaterializationEvent' ? latest.assetLineage : [];\n\n  const observationsAboutLatest =\n    latest.__typename === 'MaterializationEvent'\n      ? group.all.filter(\n          (e) =>\n            e.__typename === 'ObservationEvent' && Number(e.timestamp) > Number(latest.timestamp),\n        )\n      : [];\n\n  return (\n    <tr style={{background: Colors.Gray50}}>\n      <td colSpan={6} style={{fontSize: 14, padding: 0}}>\n        {latest.description && (\n          <Box padding={{horizontal: 24, vertical: 12}}>{latest.description}</Box>\n        )}\n        {latest.metadataEntries.length || hasLineage ? (\n          <DetailsTable>\n            <tbody>\n              {latest.metadataEntries.map((entry) => (\n                <tr key={`metadata-${entry.label}`}>\n                  <td style={{maxWidth: 300}}>{entry.label}</td>\n                  <td>\n                    <MetadataEntry entry={entry} expandSmallValues={true} />\n                  </td>\n                  <td style={{opacity: 0.7}}>{entry.description}</td>\n                </tr>\n              ))}\n              {observationsAboutLatest.map((obs) => (\n                <React.Fragment key={obs.timestamp}>\n                  {obs.metadataEntries.map((entry) => (\n                    <tr key={`metadata-${obs.timestamp}-${entry.label}`}>\n                      <td>{entry.label}</td>\n                      <td>\n                        <MetadataEntry entry={entry} expandSmallValues={true} />\n                      </td>\n                      <td style={{opacity: 0.7}}>\n                        <Box flex={{gap: 8, alignItems: 'center'}}>\n                          <Icon name=\"observation\" size={16} />\n                          <span>\n                            {`${obs.stepKey} in `}\n                            <Link to={`/runs/${obs.runId}?timestamp=${obs.timestamp}`}>\n                              <Mono>{titleForRun({runId: obs.runId})}</Mono>\n                            </Link>\n                            {` (${dayjs(obs.timestamp).from(\n                              timestamp,\n                              true, // withoutSuffix\n                            )} later)`}\n                          </span>\n                        </Box>\n                        {entry.description}\n                      </td>\n                    </tr>\n                  ))}\n                </React.Fragment>\n              ))}\n\n              {hasLineage && (\n                <tr>\n                  <td>Parent Materializations</td>\n                  <td>\n                    <AssetLineageElements elements={assetLineage} timestamp={timestamp} />\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </DetailsTable>\n        ) : (\n          <Box padding={{horizontal: 24, vertical: 12}}>No materialization event metadata</Box>\n        )}\n      </td>\n    </tr>\n  );\n});\n\nconst EventGroupRow: React.FC<{\n  group: AssetEventGroup;\n  hasPartitions: boolean;\n  hasLineage: boolean;\n  isFocused: boolean;\n}> = React.memo(({group, hasPartitions, hasLineage, isFocused}) => {\n  const {latest, partition, timestamp, all} = group;\n\n  const focusCss = isFocused\n    ? {paddingLeft: 4, borderLeft: `4px solid ${Colors.HighlightGreen}`}\n    : {paddingLeft: 8};\n\n  const run = latest?.runOrError.__typename === 'Run' ? latest.runOrError : undefined;\n  const repositoryOrigin = run?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  if (!latest) {\n    return (\n      <>\n        <td style={{whiteSpace: 'nowrap', paddingLeft: 24}}>{partition || <NoneSpan />}</td>\n        <td colSpan={3} />\n      </>\n    );\n  }\n\n  if (!run) {\n    return <span />;\n  }\n\n  return (\n    <>\n      {hasPartitions && (\n        <td style={{whiteSpace: 'nowrap', ...focusCss}}>\n          <Group direction=\"row\" spacing={2}>\n            <DisclosureTriangle open={isFocused} />\n            {partition || <NoneSpan />}\n          </Group>\n        </td>\n      )}\n      <td style={hasPartitions ? {} : focusCss}>\n        <Group direction=\"row\" spacing={4}>\n          {!hasPartitions && <DisclosureTriangle open={isFocused} />}\n          <Group direction=\"column\" spacing={4}>\n            <Timestamp timestamp={{ms: Number(timestamp)}} />\n            {all?.length > 1 ? (\n              <AllIndividualEventsLink\n                hasPartitions={hasPartitions}\n                hasLineage={hasLineage}\n                events={all}\n              >{`View ${all.length} events`}</AllIndividualEventsLink>\n            ) : latest.__typename === 'MaterializationEvent' ? (\n              <Box flex={{gap: 8, alignItems: 'center'}} style={{color: Colors.Gray600}}>\n                <Icon name=\"materialization\" size={16} color={Colors.Gray600} />\n                Materialization\n              </Box>\n            ) : (\n              <Box flex={{gap: 8, alignItems: 'center'}} style={{color: Colors.Gray600}}>\n                <Icon name=\"observation\" size={16} color={Colors.Gray600} /> Observation\n              </Box>\n            )}\n          </Group>\n        </Group>\n      </td>\n      <td>\n        {!isHiddenAssetGroupJob(run.pipelineName) && (\n          <Box margin={{bottom: 4}}>\n            <Box padding={{left: 8}}>\n              <PipelineReference\n                showIcon\n                pipelineName={run.pipelineName}\n                pipelineHrefContext={repoAddress || 'repo-unknown'}\n                snapshotId={run.pipelineSnapshotId}\n                isJob={isThisThingAJob(repo, run.pipelineName)}\n              />\n            </Box>\n            <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n              <Icon name=\"linear_scale\" color={Colors.Gray400} />\n              <Link to={linkToRunEvent(run, latest)}>{latest.stepKey}</Link>\n            </Group>\n          </Box>\n        )}\n      </td>\n      <td>\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <RunStatusWithStats runId={run.runId} status={run.status} />\n          <Link to={`/runs/${run.runId}?timestamp=${timestamp}`}>\n            <Mono>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n      </td>\n    </>\n  );\n});\n\nconst HoverableRow = styled.tr`\n  &:hover {\n    background: ${Colors.Gray10};\n  }\n`;\n\nconst DetailsTable = styled.table`\n  width: 100%;\n  margin: -2px -2px -3px;\n  tr td {\n    font-size: 14px;\n  }\n`;\n\ninterface PredecessorDialogProps {\n  hasLineage: boolean;\n  hasPartitions: boolean;\n  events: (AssetMaterializationFragment | AssetObservationFragment)[];\n}\n\nexport const AllIndividualEventsLink: React.FC<PredecessorDialogProps> = ({\n  hasLineage,\n  hasPartitions,\n  events,\n  children,\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const [focused, setFocused] = React.useState<AssetEventGroup | undefined>();\n  const groups = React.useMemo(\n    () =>\n      events.map((p) => ({\n        latest: p,\n        partition: p.partition || undefined,\n        timestamp: p.timestamp,\n        all: [],\n      })),\n    [events],\n  );\n  const title = () => {\n    if (hasPartitions) {\n      const partition = events[0].partition;\n      if (partition) {\n        return `Materialization and observation events for ${partition}`;\n      }\n    }\n    return `Materialization and observation events`;\n  };\n\n  return (\n    <>\n      <ButtonLink onClick={() => setOpen(true)}>{children}</ButtonLink>\n      <Dialog\n        isOpen={open}\n        canEscapeKeyClose\n        canOutsideClickClose\n        onClose={() => setOpen(false)}\n        style={{width: '80%', minWidth: '800px'}}\n        title={title()}\n      >\n        {open && (\n          <Box padding={{bottom: 8}} onClick={(e) => e.stopPropagation()}>\n            <AssetEventsTable\n              hasLineage={hasLineage}\n              hasPartitions={hasPartitions}\n              focused={focused}\n              setFocused={setFocused}\n              groups={groups}\n            />\n          </Box>\n        )}\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst DisclosureTriangle: React.FC<{open: boolean; onClick?: () => void}> = ({open, onClick}) => (\n  <DisclosureTriangleButton onClick={onClick} $open={open}>\n    <Icon name=\"arrow_drop_down\" size={24} />\n  </DisclosureTriangleButton>\n);\n\nconst DisclosureTriangleButton = styled.button<{$open: boolean}>`\n  padding: 4px;\n  margin: -4px;\n  cursor: pointer;\n  border: 0;\n  background: transparent;\n  outline: none;\n\n  ${IconWrapper} {\n    margin: -2px -5px;\n    transform: ${({$open}) => ($open ? 'rotate(0deg)' : 'rotate(-90deg)')};\n    opacity: 0.25;\n  }\n\n  :focus {\n    outline: none;\n\n    ${IconWrapper} {\n      background: ${Colors.Dark};\n      opacity: 0.5;\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, Heading, Icon, Mono, Spinner, Subheading, Tag} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {titleForRun, linkToRunEvent} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AllIndividualEventsLink} from './AllIndividualEventsLink';\nimport {AssetEventMetadataEntriesTable} from './AssetEventMetadataEntriesTable';\nimport {AssetEventSystemTags} from './AssetEventSystemTags';\nimport {AssetMaterializationUpstreamData} from './AssetMaterializationUpstreamData';\nimport {AssetEventGroup} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {\n  AssetPartitionDetailQuery,\n  AssetPartitionDetailQueryVariables,\n} from './types/AssetPartitionDetail.types';\nimport {ASSET_MATERIALIZATION_FRAGMENT, ASSET_OBSERVATION_FRAGMENT} from './useRecentAssetEvents';\n\nexport const AssetPartitionDetailLoader: React.FC<{assetKey: AssetKey; partitionKey: string}> = (\n  props,\n) => {\n  const result = useQuery<AssetPartitionDetailQuery, AssetPartitionDetailQueryVariables>(\n    ASSET_PARTITION_DETAIL_QUERY,\n    {\n      variables: {\n        assetKey: props.assetKey,\n        partitionKey: props.partitionKey,\n      },\n    },\n  );\n\n  const {materializations, observations, hasLineage} = React.useMemo(() => {\n    if (result.data?.assetNodeOrError?.__typename !== 'AssetNode') {\n      return {materializations: [], observations: [], hasLineage: false};\n    }\n    return {\n      materializations: [...result.data.assetNodeOrError.assetMaterializations].sort(\n        (a, b) => Number(b.timestamp) - Number(a.timestamp),\n      ),\n      observations: [...result.data.assetNodeOrError.assetObservations].sort(\n        (a, b) => Number(b.timestamp) - Number(a.timestamp),\n      ),\n      hasLineage: result.data.assetNodeOrError.assetMaterializations.some(\n        (m) => m.assetLineage.length > 0,\n      ),\n    };\n  }, [result.data]);\n\n  if (result.loading || !result.data) {\n    return <AssetPartitionDetailEmpty partitionKey={props.partitionKey} />;\n  }\n\n  return (\n    <AssetPartitionDetail\n      assetKey={props.assetKey}\n      hasLineage={hasLineage}\n      group={{\n        latest: materializations[0],\n        timestamp: materializations[0]?.timestamp,\n        partition: props.partitionKey,\n        all: [...materializations, ...observations].sort(\n          (a, b) => Number(b.timestamp) - Number(a.timestamp),\n        ),\n      }}\n    />\n  );\n};\n\nconst ASSET_PARTITION_DETAIL_QUERY = gql`\n  query AssetPartitionDetailQuery($assetKey: AssetKeyInput!, $partitionKey: String!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      __typename\n      ... on AssetNode {\n        id\n        assetMaterializations(partitions: [$partitionKey]) {\n          ... on MaterializationEvent {\n            runId\n            ...AssetMaterializationFragment\n          }\n        }\n        assetObservations(partitions: [$partitionKey]) {\n          ... on ObservationEvent {\n            runId\n            ...AssetObservationFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n  ${ASSET_OBSERVATION_FRAGMENT}\n`;\n\nexport const AssetPartitionDetail: React.FC<{\n  assetKey: AssetKey;\n  group: AssetEventGroup;\n  hasLineage: boolean;\n  hasLoadingState?: boolean;\n}> = ({assetKey, group, hasLineage, hasLoadingState}) => {\n  const {latest, partition, all} = group;\n  const run = latest?.runOrError?.__typename === 'Run' ? latest.runOrError : null;\n  const repositoryOrigin = run?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  const observationsAboutLatest =\n    latest?.__typename === 'MaterializationEvent'\n      ? group.all.filter(\n          (e) =>\n            e.__typename === 'ObservationEvent' && Number(e.timestamp) > Number(latest.timestamp),\n        )\n      : [];\n\n  return (\n    <Box padding={{horizontal: 24, bottom: 24}} style={{flex: 1}}>\n      <Box\n        padding={{vertical: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        flex={{alignItems: 'center'}}\n      >\n        {partition ? (\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            <Heading>{partition}</Heading>\n            {hasLoadingState ? (\n              <Spinner purpose=\"body-text\" />\n            ) : latest ? (\n              <Tag intent=\"success\">Materialized</Tag>\n            ) : (\n              <Tag intent=\"none\">Missing</Tag>\n            )}\n          </Box>\n        ) : (\n          <Heading color={Colors.Gray400}>No partition selected</Heading>\n        )}\n        <div style={{flex: 1}} />\n      </Box>\n      <Box\n        style={{display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 16, minHeight: 76}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        padding={{vertical: 16}}\n      >\n        <Box flex={{gap: 4, direction: 'column'}}>\n          <Subheading>Latest event</Subheading>\n          {!latest ? (\n            <Box flex={{gap: 4}}>\n              <Icon name=\"materialization\" />\n              None\n            </Box>\n          ) : (\n            <Box flex={{gap: 4}} style={{whiteSpace: 'nowrap'}}>\n              {latest.__typename === 'MaterializationEvent' ? (\n                <Icon name=\"materialization\" />\n              ) : (\n                <Icon name=\"observation\" />\n              )}\n              <Timestamp timestamp={{ms: Number(latest.timestamp)}} />\n              {all.length > 1 && (\n                <AllIndividualEventsLink hasPartitions hasLineage={hasLineage} events={all}>\n                  {`(${all.length} events)`}\n                </AllIndividualEventsLink>\n              )}\n            </Box>\n          )}\n        </Box>\n        <Box flex={{gap: 4, direction: 'column'}}>\n          <Subheading>Run</Subheading>\n          {latest?.runOrError?.__typename === 'Run' ? (\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusWithStats\n                runId={latest.runOrError.runId}\n                status={latest.runOrError.status}\n              />\n              <Link to={linkToRunEvent(latest.runOrError, latest)}>\n                <Mono>{titleForRun(latest.runOrError)}</Mono>\n              </Link>\n            </Box>\n          ) : (\n            'None'\n          )}\n        </Box>\n        <Box flex={{gap: 4, direction: 'column'}}>\n          <Subheading>Job</Subheading>\n          {latest && run && !isHiddenAssetGroupJob(run.pipelineName) ? (\n            <Box>\n              <Box>\n                <PipelineReference\n                  showIcon\n                  pipelineName={run.pipelineName}\n                  pipelineHrefContext={repoAddress || 'repo-unknown'}\n                  snapshotId={run.pipelineSnapshotId}\n                  isJob={isThisThingAJob(repo, run.pipelineName)}\n                />\n              </Box>\n              <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                <Link to={linkToRunEvent(run, latest)}>{latest.stepKey}</Link>\n              </Group>\n            </Box>\n          ) : (\n            'None'\n          )}\n        </Box>\n      </Box>\n      <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n        <Subheading>Metadata</Subheading>\n        <AssetEventMetadataEntriesTable event={latest} observations={observationsAboutLatest} />\n      </Box>\n      <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n        <Subheading>Source data</Subheading>\n        <AssetMaterializationUpstreamData timestamp={latest?.timestamp} assetKey={assetKey} />\n      </Box>\n      <Box padding={{top: 24}} flex={{direction: 'column', gap: 8}}>\n        <Subheading>System tags</Subheading>\n        <AssetEventSystemTags event={latest} collapsible />\n      </Box>\n    </Box>\n  );\n};\n\nexport const AssetPartitionDetailEmpty = ({partitionKey}: {partitionKey?: string}) => (\n  <AssetPartitionDetail\n    assetKey={{path: ['']}}\n    group={{all: [], latest: null, timestamp: '0', partition: partitionKey}}\n    hasLineage={false}\n    hasLoadingState\n  />\n);\n","import {Box, ButtonGroup, Colors, Spinner, Subheading, ErrorBoundary} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {RepositorySelector} from '../graphql/types';\n\nimport {AssetEventDetail, AssetEventDetailEmpty} from './AssetEventDetail';\nimport {AssetEventList} from './AssetEventList';\nimport {AssetPartitionDetail, AssetPartitionDetailEmpty} from './AssetPartitionDetail';\nimport {AssetViewParams} from './AssetView';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunsSinceMaterializationBanner} from './FailedRunsSinceMaterializationBanner';\nimport {AssetEventGroup, useGroupedEvents} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  assetKey: AssetKey;\n  liveData?: LiveDataForNode;\n  params: AssetViewParams;\n  paramsTimeWindowOnly: boolean;\n  setParams: (params: AssetViewParams) => void;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n  assetHasDefinedPartitions: boolean;\n\n  repository?: RepositorySelector;\n  opName?: string | null;\n}\n\nexport const AssetEvents: React.FC<Props> = ({\n  assetKey,\n  assetLastMaterializedAt,\n  assetHasDefinedPartitions,\n  params,\n  setParams,\n  liveData,\n}) => {\n  const {\n    xAxis,\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    refetch,\n    loading,\n  } = useRecentAssetEvents(assetKey, params, {assetHasDefinedPartitions: false});\n\n  React.useEffect(() => {\n    if (params.asOf) {\n      return;\n    }\n    refetch();\n  }, [params.asOf, assetLastMaterializedAt, refetch]);\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n\n  const onSetFocused = (group: AssetEventGroup | undefined) => {\n    const updates: Partial<AssetViewParams> =\n      xAxis === 'time'\n        ? {time: group?.timestamp !== params.time ? group?.timestamp || '' : ''}\n        : {partition: group?.partition !== params.partition ? group?.partition || '' : ''};\n    setParams({...params, ...updates});\n  };\n\n  const focused: AssetEventGroup | undefined =\n    grouped.find((b) =>\n      params.time\n        ? Number(b.timestamp) <= Number(params.time)\n        : params.partition\n        ? b.partition === params.partition\n        : false,\n    ) || grouped[0];\n\n  // Note: This page still has a LOT of logic for displaying events by partition but it's only enabled\n  // in one case -- when the asset is an old-school, non-software-defined asset with partition keys\n  // on it's materializations but no defined partition set.\n  //\n  const assetHasUndefinedPartitions =\n    !assetHasDefinedPartitions && grouped.some((g) => g.partition);\n  const assetHasLineage = materializations.some((m) => m.assetLineage.length > 0);\n\n  const onKeyDown = (e: React.KeyboardEvent<any>) => {\n    const shift = {ArrowDown: 1, ArrowUp: -1}[e.key];\n    if (!shift || !focused || e.isDefaultPrevented()) {\n      return;\n    }\n    const next = grouped[grouped.indexOf(focused) + shift];\n    if (next) {\n      e.preventDefault();\n      onSetFocused(next);\n    }\n  };\n\n  return (\n    <>\n      {assetHasUndefinedPartitions && (\n        <Box\n          flex={{justifyContent: 'space-between', alignItems: 'center'}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          padding={{vertical: 16, horizontal: 24}}\n          style={{marginBottom: -1}}\n        >\n          <Subheading>Asset Events</Subheading>\n          <div style={{margin: '-6px 0 '}}>\n            <ButtonGroup\n              activeItems={new Set([xAxis])}\n              buttons={[\n                {id: 'partition', label: 'By partition'},\n                {id: 'time', label: 'By timestamp'},\n              ]}\n              onClick={(id: string) =>\n                setParams(\n                  id === 'time'\n                    ? {...params, partition: undefined, time: focused?.timestamp || ''}\n                    : {...params, partition: focused?.partition || '', time: undefined},\n                )\n              }\n            />\n          </div>\n        </Box>\n      )}\n\n      <FailedRunsSinceMaterializationBanner\n        liveData={liveData}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      />\n\n      <CurrentRunsBanner\n        liveData={liveData}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      />\n\n      <Box\n        style={{flex: 1, minHeight: 0, outline: 'none'}}\n        flex={{direction: 'row'}}\n        onKeyDown={onKeyDown}\n        tabIndex={-1}\n      >\n        <Box\n          style={{display: 'flex', flex: 1, minWidth: 200}}\n          flex={{direction: 'column'}}\n          background={Colors.Gray50}\n        >\n          {loading ? (\n            <Box flex={{alignItems: 'center', justifyContent: 'center'}} style={{flex: 1}}>\n              <Spinner purpose=\"section\" />\n            </Box>\n          ) : (\n            <AssetEventList\n              xAxis={xAxis}\n              groups={grouped}\n              focused={focused}\n              setFocused={onSetFocused}\n            />\n          )}\n        </Box>\n\n        <Box\n          flex={{direction: 'column'}}\n          style={{flex: 3, minWidth: 0, overflowY: 'auto'}}\n          border={{side: 'left', color: Colors.KeylineGray, width: 1}}\n        >\n          <ErrorBoundary region=\"event\" resetErrorOnChange={[focused]}>\n            {xAxis === 'partition' ? (\n              focused ? (\n                <AssetPartitionDetail\n                  group={focused}\n                  hasLineage={assetHasLineage}\n                  assetKey={assetKey}\n                />\n              ) : (\n                <AssetPartitionDetailEmpty />\n              )\n            ) : focused?.latest ? (\n              <AssetEventDetail assetKey={assetKey} event={focused.latest} />\n            ) : (\n              <AssetEventDetailEmpty />\n            )}\n          </ErrorBoundary>\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import {Box, Spinner} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AssetNode} from '../asset-graph/AssetNode';\nimport {LiveData, toGraphId} from '../asset-graph/Utils';\nimport {AssetNodeForGraphQueryFragment} from '../asset-graph/types/useAssetGraphData.types';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetNodeList: React.FC<{\n  items: AssetNodeForGraphQueryFragment[] | null;\n  liveDataByNode: LiveData;\n}> = ({items, liveDataByNode}) => {\n  const history = useHistory();\n\n  if (items === null) {\n    return (\n      <Container flex={{alignItems: 'center', justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Container>\n    );\n  }\n\n  return (\n    <Container flex={{gap: 4}} padding={{horizontal: 12}}>\n      {items.map((asset) => (\n        <AssetNodeWrapper\n          key={asset.id}\n          onClick={(e) => {\n            e.stopPropagation();\n            history.push(assetDetailsPathForKey(asset.assetKey, {view: 'definition'}));\n          }}\n        >\n          <AssetNode\n            definition={asset}\n            selected={false}\n            liveData={liveDataByNode[toGraphId(asset.assetKey)]}\n          />\n        </AssetNodeWrapper>\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled(Box)`\n  height: 154px;\n  overflow-x: auto;\n  width: 100%;\n  white-space: nowrap;\n`;\n\nconst AssetNodeWrapper = styled.div`\n  cursor: pointer;\n  width: 260px;\n  flex-shrink: 0;\n`;\n","import {gql} from '@apollo/client';\nimport {Body, Box, Caption, Colors, ConfigTypeSchema, Icon, Mono, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ASSET_NODE_FRAGMENT} from '../asset-graph/AssetNode';\nimport {\n  displayNameForAssetKey,\n  isHiddenAssetGroupJob,\n  LiveData,\n  toGraphId,\n} from '../asset-graph/Utils';\nimport {AssetNodeForGraphQueryFragment} from '../asset-graph/types/useAssetGraphData.types';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {Description} from '../pipelines/Description';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {Version} from '../versions/Version';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from './AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from './AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from './AssetMetadata';\nimport {AssetNodeList} from './AssetNodeList';\nimport {CurrentMinutesLateTag, freshnessPolicyDescription} from './CurrentMinutesLateTag';\nimport {DependsOnSelfBanner} from './DependsOnSelfBanner';\nimport {AssetNodeDefinitionFragment} from './types/AssetNodeDefinition.types';\n\nexport const AssetNodeDefinition: React.FC<{\n  assetNode: AssetNodeDefinitionFragment;\n  upstream: AssetNodeForGraphQueryFragment[] | null;\n  downstream: AssetNodeForGraphQueryFragment[] | null;\n  liveDataByNode: LiveData;\n  dependsOnSelf: boolean;\n}> = ({assetNode, upstream, downstream, liveDataByNode, dependsOnSelf}) => {\n  const {assetMetadata, assetType} = metadataForAssetNode(assetNode);\n  const liveDataForNode = liveDataByNode[toGraphId(assetNode.assetKey)];\n\n  const assetConfigSchema = assetNode.configField?.configType;\n  const repoAddress = buildRepoAddress(\n    assetNode.repository.name,\n    assetNode.repository.location.name,\n  );\n\n  return (\n    <>\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetNode.assetKey}\n        loadedFromRepo={repoAddress}\n        padded={true}\n      />\n      <Box flex={{direction: 'row'}} style={{flex: 1}}>\n        <Box\n          style={{flex: 1, minWidth: 0}}\n          flex={{direction: 'column'}}\n          border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n        >\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            flex={{justifyContent: 'space-between', gap: 8}}\n          >\n            <Subheading>Description</Subheading>\n            <DescriptionAnnotations assetNode={assetNode} repoAddress={repoAddress} />\n          </Box>\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            style={{flex: 1, flexBasis: 'content', flexGrow: 0, minHeight: 120}}\n          >\n            <Description\n              description={assetNode.description || 'No description provided.'}\n              maxHeight={260}\n            />\n          </Box>\n          {assetNode.opVersion && (\n            <>\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n              >\n                <Subheading>Code version</Subheading>\n              </Box>\n              <Box padding={{vertical: 16, horizontal: 24}} flex={{gap: 12, alignItems: 'center'}}>\n                <Version>{assetNode.opVersion}</Version>\n              </Box>\n            </>\n          )}\n          {liveDataForNode?.freshnessPolicy && (\n            <>\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n              >\n                <Subheading>Freshness Policy</Subheading>\n              </Box>\n              <Box padding={{vertical: 16, horizontal: 24}} flex={{gap: 12, alignItems: 'center'}}>\n                <CurrentMinutesLateTag liveData={liveDataForNode} />\n                <Body>{freshnessPolicyDescription(liveDataForNode.freshnessPolicy)}</Body>\n              </Box>\n            </>\n          )}\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n            flex={{justifyContent: 'space-between', gap: 8}}\n          >\n            <Subheading>\n              Upstream Assets{upstream?.length ? ` (${upstream.length})` : ''}\n            </Subheading>\n            <Link to=\"?view=lineage&lineageScope=upstream\">\n              <Box flex={{gap: 4, alignItems: 'center'}}>\n                View upstream graph\n                <Icon name=\"open_in_new\" color={Colors.Link} />\n              </Box>\n            </Link>\n          </Box>\n          {dependsOnSelf && <DependsOnSelfBanner />}\n          <AssetNodeList items={upstream} liveDataByNode={liveDataByNode} />\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n            flex={{justifyContent: 'space-between', gap: 8}}\n          >\n            <Subheading>\n              Downstream Assets{downstream?.length ? ` (${downstream.length})` : ''}\n            </Subheading>\n            <Link to=\"?view=lineage&lineageScope=downstream\">\n              <Box flex={{gap: 4, alignItems: 'center'}}>\n                View downstream graph\n                <Icon name=\"open_in_new\" color={Colors.Link} />\n              </Box>\n            </Link>\n          </Box>\n          <AssetNodeList items={downstream} liveDataByNode={liveDataByNode} />\n          {/** Ensures the line between the left and right columns goes to the bottom of the page */}\n          <div style={{flex: 1}} />\n        </Box>\n        {assetConfigSchema ? (\n          <Box\n            border={{side: 'vertical', width: 1, color: Colors.KeylineGray}}\n            style={{flex: 0.5, minWidth: 0}}\n            flex={{direction: 'column'}}\n          >\n            <Box\n              padding={{vertical: 16, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <Subheading>Config</Subheading>\n            </Box>\n            <Box padding={{vertical: 16, horizontal: 24}}>\n              <ConfigTypeSchema\n                type={assetConfigSchema}\n                typesInScope={assetConfigSchema.recursiveConfigTypes}\n              />\n            </Box>\n          </Box>\n        ) : null}\n\n        <Box style={{flex: 0.5, minWidth: 0}} flex={{direction: 'column'}}>\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Subheading>Type</Subheading>\n          </Box>\n          {assetType ? (\n            <DagsterTypeSummary type={assetType} />\n          ) : (\n            <Box padding={{vertical: 16, horizontal: 24}}>\n              <Description description=\"No type data provided.\" />\n            </Box>\n          )}\n          {assetMetadata.length > 0 && (\n            <>\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n                flex={{justifyContent: 'space-between', gap: 8}}\n              >\n                <Subheading>Metadata</Subheading>\n              </Box>\n              <Box style={{flex: 1}}>\n                <AssetMetadataTable\n                  assetMetadata={assetMetadata}\n                  repoLocation={repoAddress?.location}\n                />\n              </Box>\n            </>\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nconst DescriptionAnnotations: React.FC<{\n  assetNode: AssetNodeDefinitionFragment;\n  repoAddress: RepoAddress;\n}> = ({assetNode, repoAddress}) => (\n  <Box flex={{alignItems: 'baseline', gap: 16, wrap: 'wrap'}} style={{lineHeight: 0}}>\n    {assetNode.jobNames\n      .filter((jobName) => !isHiddenAssetGroupJob(jobName))\n      .map((jobName) => (\n        <Mono key={jobName}>\n          <PipelineReference\n            isJob\n            showIcon\n            pipelineName={jobName}\n            pipelineHrefContext={repoAddress}\n          />\n        </Mono>\n      ))}\n    <OpNamesDisplay assetNode={assetNode} repoAddress={repoAddress} />\n    {assetNode.isSource && (\n      <Caption style={{lineHeight: '16px', marginTop: 2}}>Source Asset</Caption>\n    )}\n  </Box>\n);\n\nconst OpNamesDisplay = (props: {\n  assetNode: AssetNodeDefinitionFragment;\n  repoAddress: RepoAddress;\n}) => {\n  const {assetNode, repoAddress} = props;\n  const {assetKey, graphName, opNames, jobNames} = assetNode;\n  const opCount = opNames.length;\n\n  if (!opCount) {\n    return null;\n  }\n\n  if (!graphName) {\n    const firstOp = opNames[0];\n    if (displayNameForAssetKey(assetKey) === firstOp) {\n      return null;\n    }\n    const opPath = workspacePathFromAddress(repoAddress, `/ops/${firstOp}`);\n    return (\n      <Box flex={{gap: 4, alignItems: 'center'}}>\n        <Icon name=\"op\" size={16} />\n        <Mono>\n          <Link to={opPath}>{firstOp}</Link>\n        </Mono>\n      </Box>\n    );\n  }\n\n  if (!jobNames.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{gap: 4, alignItems: 'center'}}>\n      <Icon name=\"schema\" size={16} />\n      <Mono>\n        <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n          {graphName}\n        </Link>\n        {` (${opCount === 1 ? '1 op' : `${opCount} ops`})`}\n      </Mono>\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_DEFINITION_FRAGMENT = gql`\n  fragment AssetNodeDefinitionFragment on AssetNode {\n    id\n    description\n    graphName\n    opNames\n    opVersion\n    jobNames\n    partitionDefinition {\n      description\n    }\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    ...AssetNodeConfigFragment\n    ...AssetNodeFragment\n    ...AssetNodeOpMetadataFragment\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${ASSET_NODE_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport flatMap from 'lodash/flatMap';\nimport React from 'react';\n\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetNodeInstigatorsFragment} from './types/AssetNodeInstigatorTag.types';\n\nexport const AssetNodeInstigatorTag: React.FC<{\n  assetNode: AssetNodeInstigatorsFragment;\n  repoAddress: RepoAddress;\n}> = ({assetNode, repoAddress}) => {\n  const schedules = flatMap(assetNode.jobs, (j) => j.schedules);\n  const sensors = flatMap(assetNode.jobs, (j) => j.sensors);\n\n  return (\n    <ScheduleOrSensorTag\n      repoAddress={repoAddress}\n      schedules={schedules}\n      sensors={sensors}\n      showSwitch={false}\n    />\n  );\n};\n\nexport const ASSET_NODE_INSTIGATORS_FRAGMENT = gql`\n  fragment AssetNodeInstigatorsFragment on AssetNode {\n    id\n    jobs {\n      id\n      name\n      schedules {\n        id\n        __typename\n        ...ScheduleSwitchFragment\n      }\n      sensors {\n        id\n        __typename\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {Box, Spinner} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AssetEdges} from '../asset-graph/AssetEdges';\nimport {MINIMAL_SCALE} from '../asset-graph/AssetGraphExplorer';\nimport {AssetGroupNode} from '../asset-graph/AssetGroupNode';\nimport {AssetNodeMinimal, AssetNode} from '../asset-graph/AssetNode';\nimport {AssetNodeLink} from '../asset-graph/ForeignNode';\nimport {GraphData, LiveData, toGraphId} from '../asset-graph/Utils';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {getJSONForKey} from '../hooks/useStateWithStorage';\n\nimport {AssetViewParams} from './AssetView';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\nimport {AssetNodeDefinitionFragment} from './types/AssetNodeDefinition.types';\n\nconst LINEAGE_GRAPH_ZOOM_LEVEL = 'lineageGraphZoomLevel';\n\nexport type AssetLineageScope = 'neighbors' | 'upstream' | 'downstream';\n\nexport const AssetNodeLineageGraph: React.FC<{\n  assetNode: AssetNodeDefinitionFragment;\n  assetGraphData: GraphData;\n  liveDataByNode: LiveData;\n  params: AssetViewParams;\n}> = ({assetNode, assetGraphData, liveDataByNode, params}) => {\n  const assetGraphId = toGraphId(assetNode.assetKey);\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const {layout, loading} = useAssetLayout(assetGraphData);\n  const viewportEl = React.useRef<SVGViewport>();\n  const history = useHistory();\n\n  const onClickAsset = (key: AssetKey) => {\n    history.push(assetDetailsPathForKey(key, {...params, lineageScope: 'neighbors'}));\n  };\n\n  React.useEffect(() => {\n    if (viewportEl.current && layout) {\n      const lastZoomLevel = Number(getJSONForKey(LINEAGE_GRAPH_ZOOM_LEVEL));\n      viewportEl.current.autocenter(false, lastZoomLevel);\n      viewportEl.current.focus();\n    }\n  }, [viewportEl, layout, assetGraphId]);\n\n  if (!layout || loading) {\n    return (\n      <Box style={{flex: 1}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  return (\n    <SVGViewport\n      ref={(r) => (viewportEl.current = r || undefined)}\n      interactor={SVGViewport.Interactors.PanAndZoom}\n      graphWidth={layout.width}\n      graphHeight={layout.height}\n      onDoubleClick={(e) => {\n        viewportEl.current?.autocenter(true);\n        e.stopPropagation();\n      }}\n      maxZoom={1.2}\n      maxAutocenterZoom={1.2}\n    >\n      {({scale}) => (\n        <SVGContainer width={layout.width} height={layout.height}>\n          {viewportEl.current && <SVGSaveZoomLevel scale={scale} />}\n          <AssetEdges highlighted={highlighted} edges={layout.edges} />\n\n          {Object.values(layout.groups)\n            .sort((a, b) => a.id.length - b.id.length)\n            .map((group) => (\n              <foreignObject {...group.bounds} key={group.id}>\n                <AssetGroupNode group={group} scale={scale} />\n              </foreignObject>\n            ))}\n\n          {Object.values(layout.nodes).map(({id, bounds}) => {\n            const graphNode = assetGraphData.nodes[id];\n            const path = JSON.parse(id);\n\n            return (\n              <foreignObject\n                {...bounds}\n                key={id}\n                style={{overflow: 'visible'}}\n                onMouseEnter={() => setHighlighted(id)}\n                onMouseLeave={() => setHighlighted(null)}\n                onClick={() => onClickAsset({path})}\n                onDoubleClick={(e) => {\n                  viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                  e.stopPropagation();\n                }}\n              >\n                {!graphNode ? (\n                  <AssetNodeLink assetKey={{path}} />\n                ) : scale < MINIMAL_SCALE ? (\n                  <AssetNodeMinimal\n                    definition={graphNode.definition}\n                    liveData={liveDataByNode[graphNode.id]}\n                    selected={graphNode.id === assetGraphId}\n                  />\n                ) : (\n                  <AssetNode\n                    definition={graphNode.definition}\n                    liveData={liveDataByNode[graphNode.id]}\n                    selected={graphNode.id === assetGraphId}\n                  />\n                )}\n              </foreignObject>\n            );\n          })}\n        </SVGContainer>\n      )}\n    </SVGViewport>\n  );\n};\n\nconst SVGSaveZoomLevel = ({scale}: {scale: number}) => {\n  React.useEffect(() => {\n    try {\n      window.localStorage.setItem(LINEAGE_GRAPH_ZOOM_LEVEL, JSON.stringify(scale));\n    } catch (err) {\n      // no-op\n    }\n  }, [scale]);\n  return <></>;\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n","import {Box, Button, ButtonGroup, Colors, Icon, JoinedButtons, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphData, LiveData} from '../asset-graph/Utils';\nimport {AssetGraphQueryItem, calculateGraphDistances} from '../asset-graph/useAssetGraphData';\n\nimport {AssetLineageScope, AssetNodeLineageGraph} from './AssetNodeLineageGraph';\nimport {AssetViewParams} from './AssetView';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {AssetNodeDefinitionFragment} from './types/AssetNodeDefinition.types';\n\nexport const AssetNodeLineage: React.FC<{\n  params: AssetViewParams;\n  setParams: (params: AssetViewParams) => void;\n  assetNode: AssetNodeDefinitionFragment;\n  assetGraphData: GraphData;\n  liveDataByNode: LiveData;\n  requestedDepth: number;\n  graphQueryItems: AssetGraphQueryItem[];\n}> = ({\n  params,\n  setParams,\n  assetNode,\n  liveDataByNode,\n  assetGraphData,\n  graphQueryItems,\n  requestedDepth,\n}) => {\n  const maxDistances = React.useMemo(\n    () => calculateGraphDistances(graphQueryItems, assetNode.assetKey),\n    [graphQueryItems, assetNode],\n  );\n  const maxDepth =\n    params.lineageScope === 'upstream'\n      ? maxDistances.upstream\n      : params.lineageScope === 'downstream'\n      ? maxDistances.downstream\n      : Math.max(maxDistances.upstream, maxDistances.downstream);\n\n  const currentDepth = Math.max(1, Math.min(maxDepth, requestedDepth));\n\n  return (\n    <Box\n      style={{width: '100%', flex: 1, minHeight: 0, position: 'relative'}}\n      flex={{direction: 'column'}}\n    >\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center', gap: 12}}\n        padding={{left: 24, right: 12, vertical: 12}}\n        border={{side: 'bottom', color: Colors.KeylineGray, width: 1}}\n      >\n        <ButtonGroup<AssetLineageScope>\n          activeItems={new Set([params.lineageScope || 'neighbors'])}\n          buttons={[\n            {id: 'neighbors', label: 'Nearest Neighbors', icon: 'graph_neighbors'},\n            {id: 'upstream', label: 'Upstream', icon: 'graph_upstream'},\n            {id: 'downstream', label: 'Downstream', icon: 'graph_downstream'},\n          ]}\n          onClick={(lineageScope) => setParams({...params, lineageScope, lineageDepth: undefined})}\n        />\n        <LineageDepthControl\n          value={currentDepth}\n          onChange={(depth) => setParams({...params, lineageDepth: depth})}\n          max={maxDepth}\n        />\n        <div style={{flex: 1}} />\n        {Object.values(assetGraphData.nodes).length > 1 ? (\n          <LaunchAssetExecutionButton\n            intent=\"none\"\n            liveDataForStale={liveDataByNode}\n            scope={{all: Object.values(assetGraphData.nodes).map((n) => n.definition)}}\n          />\n        ) : (\n          <Button icon={<Icon name=\"materialization\" />} disabled>\n            Materialize all\n          </Button>\n        )}\n      </Box>\n      {currentDepth < maxDepth && (\n        <DepthHidesAssetsNotice>\n          Not all upstream/downstream assets shown. Increase the depth to show more.\n        </DepthHidesAssetsNotice>\n      )}\n      <AssetNodeLineageGraph\n        assetNode={assetNode}\n        liveDataByNode={liveDataByNode}\n        assetGraphData={assetGraphData}\n        params={params}\n      />\n    </Box>\n  );\n};\n\nconst DepthHidesAssetsNotice = styled.div`\n  background: ${Colors.Gray100};\n  border-radius: 8px;\n  color: ${Colors.Gray500};\n  align-items: center;\n  display: flex;\n  padding: 4px 8px;\n  gap: 4px;\n  position: absolute;\n  right: 12px;\n  top: 70px;\n  z-index: 2;\n`;\n\nconst LineageDepthControl: React.FC<{\n  value: number;\n  max: number;\n  onChange: (v: number) => void;\n}> = ({value, max, onChange}) => {\n  const [text, setText] = React.useState(`${value}`);\n  React.useEffect(() => {\n    setText(`${value}`);\n  }, [value]);\n\n  // We maintain the value in a separate piece of state so the user can clear it\n  // or briefly have an invalid value, and also so that the graph doesn't re-render\n  // on each keystroke which could be expensive.\n  const commitText = () => {\n    const next = Number(text) ? Math.min(max, Number(text)) : value;\n    onChange(next);\n  };\n\n  return (\n    <Box flex={{gap: 8, alignItems: 'center'}}>\n      Graph depth\n      <JoinedButtons>\n        <Button\n          disabled={value <= 1}\n          onClick={() => onChange(value - 1)}\n          icon={<Icon name=\"subtract\" />}\n        />\n        <TextInput\n          min={1}\n          max={max}\n          disabled={max <= 1}\n          inputMode=\"numeric\"\n          style={{\n            width: 40,\n            marginLeft: -1,\n            textAlign: 'center',\n            height: 32,\n            padding: 6,\n            borderRadius: 0,\n            boxShadow: 'none',\n            border: `1px solid ${Colors.Gray300}`,\n          }}\n          key={value}\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyDown={(e) => (e.key === 'Enter' || e.key === 'Return' ? commitText() : undefined)}\n          onBlur={() => commitText()}\n        />\n        <Button\n          disabled={value >= max}\n          onClick={() => onChange(value + 1)}\n          icon={<Icon name=\"add\" />}\n        />\n        <Button disabled={value >= max} onClick={() => onChange(max)}>\n          All\n        </Button>\n      </JoinedButtons>\n    </Box>\n  );\n};\n","import {Box, Colors} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {PartitionState, partitionStateToStyle} from '../partitions/PartitionStatus';\nimport {Inner} from '../ui/VirtualizedTable';\n\nimport {AssetListRow, AssetListContainer} from './AssetEventList';\n\nexport const AssetPartitionList: React.FC<{\n  partitions: {dimensionKey: string; state: PartitionState}[];\n  focusedDimensionKey?: string;\n  setFocusedDimensionKey?: (dimensionKey: string | undefined) => void;\n}> = ({focusedDimensionKey, setFocusedDimensionKey, partitions}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: partitions.length,\n    getItemKey: (idx) => partitions[idx].dimensionKey,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 36,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  React.useEffect(() => {\n    if (focusedDimensionKey) {\n      rowVirtualizer.scrollToIndex(\n        partitions.findIndex((p) => p.dimensionKey === focusedDimensionKey),\n        {smoothScroll: false, align: 'auto'},\n      );\n    }\n  }, [focusedDimensionKey, rowVirtualizer, partitions]);\n\n  return (\n    <AssetListContainer\n      ref={parentRef}\n      tabIndex={-1}\n      onKeyDown={(e) => {\n        const shift = {ArrowDown: 1, ArrowUp: -1}[e.key];\n        if (!setFocusedDimensionKey || !shift || !focusedDimensionKey || e.isDefaultPrevented()) {\n          return;\n        }\n        const nextIdx = partitions.findIndex((p) => p.dimensionKey === focusedDimensionKey) + shift;\n        const next = partitions[nextIdx];\n        if (next) {\n          e.preventDefault();\n          setFocusedDimensionKey(next.dimensionKey);\n        }\n      }}\n    >\n      <Inner $totalHeight={totalHeight}>\n        {items.map(({index, key, size, start}) => {\n          const {dimensionKey, state} = partitions[index];\n\n          return (\n            <AssetListRow\n              key={key}\n              $height={size}\n              $start={start}\n              $focused={dimensionKey === focusedDimensionKey}\n              onClick={(e) => {\n                // If you're interacting with something in the row, don't trigger a focus change.\n                // Since focus is stored in the URL bar this overwrites any link click navigation.\n                // We could alternatively e.preventDefault() on every link but it's easy to forget.\n                if (e.target instanceof HTMLElement && e.target.closest('a')) {\n                  return;\n                }\n                setFocusedDimensionKey?.(\n                  focusedDimensionKey !== dimensionKey ? dimensionKey : undefined,\n                );\n              }}\n            >\n              <Box\n                style={{height: size}}\n                padding={{left: 24, right: 12}}\n                flex={{direction: 'column', justifyContent: 'center', gap: 8}}\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n              >\n                <Box flex={{gap: 4, direction: 'row', alignItems: 'center'}}>\n                  {dimensionKey}\n                  <div style={{flex: 1}} />\n                  {(state === PartitionState.SUCCESS_MISSING ||\n                    state === PartitionState.SUCCESS) && (\n                    <StateDot state={PartitionState.SUCCESS} />\n                  )}\n                  {(state === PartitionState.SUCCESS_MISSING ||\n                    state === PartitionState.MISSING) && (\n                    <StateDot state={PartitionState.MISSING} />\n                  )}\n                </Box>\n              </Box>\n            </AssetListRow>\n          );\n        })}\n      </Inner>\n    </AssetListContainer>\n  );\n};\n\nconst StateDot = ({state}: {state: PartitionState}) => (\n  <div\n    key={state}\n    style={{\n      width: 10,\n      height: 10,\n      borderRadius: '100%',\n      ...partitionStateToStyle(state),\n    }}\n  />\n);\n","import {Box, Colors, Icon, Spinner, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {RepositorySelector} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DimensionRangeWizard} from '../partitions/DimensionRangeWizard';\nimport {PartitionStateCheckboxes} from '../partitions/PartitionStateCheckboxes';\nimport {PartitionState} from '../partitions/PartitionStatus';\n\nimport {AssetPartitionDetailEmpty, AssetPartitionDetailLoader} from './AssetPartitionDetail';\nimport {AssetPartitionList} from './AssetPartitionList';\nimport {AssetViewParams} from './AssetView';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunsSinceMaterializationBanner} from './FailedRunsSinceMaterializationBanner';\nimport {explodePartitionKeysInSelection, isTimeseriesDimension} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {usePartitionDimensionSelections} from './usePartitionDimensionSelections';\nimport {PartitionDimensionSelection, usePartitionHealthData} from './usePartitionHealthData';\n\ninterface Props {\n  assetKey: AssetKey;\n  assetPartitionDimensions?: string[];\n  liveData?: LiveDataForNode;\n  params: AssetViewParams;\n  paramsTimeWindowOnly: boolean;\n  setParams: (params: AssetViewParams) => void;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n\n  repository?: RepositorySelector;\n  opName?: string | null;\n}\n\nconst DISPLAYED_STATES = [PartitionState.MISSING, PartitionState.SUCCESS];\n\nexport const AssetPartitions: React.FC<Props> = ({\n  assetKey,\n  assetPartitionDimensions,\n  assetLastMaterializedAt,\n  params,\n  setParams,\n  liveData,\n}) => {\n  const [assetHealth] = usePartitionHealthData([assetKey], assetLastMaterializedAt);\n  const [ranges, setRanges] = usePartitionDimensionSelections({\n    knownDimensionNames: assetPartitionDimensions,\n    modifyQueryString: true,\n    assetHealth,\n  });\n\n  const [stateFilters, setStateFilters] = useQueryPersistedState<PartitionState[]>({\n    defaults: {states: [...DISPLAYED_STATES].sort().join(',')},\n    encode: (val) => ({states: [...val].sort().join(',')}),\n    decode: (qs) =>\n      (qs.states || '').split(',').filter((s: PartitionState) => DISPLAYED_STATES.includes(s)),\n  });\n\n  const timeRangeIdx = ranges.findIndex((r) => isTimeseriesDimension(r.dimension));\n  const timeRange = timeRangeIdx !== -1 ? ranges[timeRangeIdx] : null;\n\n  const keysInSelection = React.useMemo(() => {\n    return assetHealth ? explodePartitionKeysInSelection(ranges, assetHealth.stateForKey) : [];\n  }, [ranges, assetHealth]);\n\n  const keysFiltered = React.useMemo(\n    () => keysInSelection.filter((p) => stateFilters.includes(p.state)),\n    [keysInSelection, stateFilters],\n  );\n\n  const focusedDimensionKeys = params.partition\n    ? ranges.length > 1\n      ? params.partition.split('|').filter(Boolean)\n      : [params.partition] // \"|\" character is allowed in 1D partition keys for historical reasons\n    : [];\n\n  const dimensionKeysOrdered = (range: PartitionDimensionSelection) => {\n    return isTimeseriesDimension(range.dimension)\n      ? [...range.selectedKeys].reverse()\n      : range.selectedKeys;\n  };\n  const dimensionRowsForRange = (range: PartitionDimensionSelection, idx: number) => {\n    if (timeRange && timeRange.selectedKeys.length === 0) {\n      return [];\n    }\n    return dimensionKeysOrdered(range)\n      .map((dimensionKey) => {\n        // Note: If you have clicked dimension 1, dimension 2 shows the state of each subkey. If\n        // you have not clicked dimension 1, dimension 2 shows the merged state of all the keys\n        // in that dimension (for all values of dimension 1)\n        const state =\n          idx === 1 && focusedDimensionKeys.length >= 1\n            ? assetHealth.stateForKey([focusedDimensionKeys[0], dimensionKey])\n            : assetHealth.stateForSingleDimension(\n                idx,\n                dimensionKey,\n                range !== timeRange ? timeRange?.selectedKeys : undefined,\n              );\n\n        return {dimensionKey, state};\n      })\n      .filter(\n        (row) =>\n          stateFilters.includes(row.state) ||\n          (row.state === PartitionState.SUCCESS_MISSING &&\n            (stateFilters.includes(PartitionState.SUCCESS) ||\n              stateFilters.includes(PartitionState.MISSING))),\n      );\n  };\n\n  return (\n    <>\n      <FailedRunsSinceMaterializationBanner\n        liveData={liveData}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      />\n\n      <CurrentRunsBanner\n        liveData={liveData}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      />\n      {timeRange && (\n        <Box\n          padding={{vertical: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <DimensionRangeWizard\n            partitionKeys={timeRange.dimension.partitionKeys}\n            partitionStateForKey={(dimensionKey) =>\n              assetHealth.stateForSingleDimension(timeRangeIdx, dimensionKey)\n            }\n            selected={timeRange.selectedKeys}\n            setSelected={(selectedKeys) =>\n              setRanges(ranges.map((r) => (r === timeRange ? {...r, selectedKeys} : r)))\n            }\n          />\n        </Box>\n      )}\n\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', justifyContent: 'space-between'}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      >\n        <div>{keysFiltered.length.toLocaleString()} Partitions Selected</div>\n        <PartitionStateCheckboxes\n          partitionKeysForCounts={keysInSelection}\n          allowed={[PartitionState.MISSING, PartitionState.SUCCESS]}\n          value={stateFilters}\n          onChange={setStateFilters}\n        />\n      </Box>\n      <Box style={{flex: 1, minHeight: 0, outline: 'none'}} flex={{direction: 'row'}} tabIndex={-1}>\n        {ranges.map((range, idx) => (\n          <Box\n            key={range.dimension.name}\n            style={{display: 'flex', flex: 1, paddingRight: 1, minWidth: 200}}\n            flex={{direction: 'column'}}\n            border={{side: 'right', color: Colors.KeylineGray, width: 1}}\n            background={Colors.Gray50}\n          >\n            {range.dimension.name !== 'default' && (\n              <Box\n                padding={{horizontal: 24, vertical: 8}}\n                flex={{gap: 8, alignItems: 'center'}}\n                background={Colors.White}\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n              >\n                <Icon name=\"partition\" />\n                <Subheading>{range.dimension.name}</Subheading>\n              </Box>\n            )}\n\n            {!assetHealth ? (\n              <Box flex={{alignItems: 'center', justifyContent: 'center'}} style={{flex: 1}}>\n                <Spinner purpose=\"section\" />\n              </Box>\n            ) : (\n              <AssetPartitionList\n                partitions={dimensionRowsForRange(range, idx)}\n                focusedDimensionKey={focusedDimensionKeys[idx]}\n                setFocusedDimensionKey={(dimensionKey) => {\n                  const nextFocusedDimensionKeys: string[] = [];\n                  for (let ii = 0; ii < idx; ii++) {\n                    nextFocusedDimensionKeys.push(\n                      focusedDimensionKeys[ii] || dimensionKeysOrdered(ranges[ii])[0],\n                    );\n                  }\n                  if (dimensionKey) {\n                    nextFocusedDimensionKeys.push(dimensionKey);\n                  }\n                  setParams({\n                    ...params,\n                    partition: nextFocusedDimensionKeys.join('|'),\n                  });\n                }}\n              />\n            )}\n          </Box>\n        ))}\n\n        <Box style={{flex: 3, minWidth: 0, overflowY: 'auto'}} flex={{direction: 'column'}}>\n          {params.partition && focusedDimensionKeys.length === ranges.length ? (\n            <AssetPartitionDetailLoader assetKey={assetKey} partitionKey={params.partition} />\n          ) : (\n            <AssetPartitionDetailEmpty />\n          )}\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import {Box, ButtonGroup, Colors, Spinner, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {AssetViewParams} from './AssetView';\nimport {useGroupedEvents} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  assetKey: AssetKey;\n  params: AssetViewParams;\n  assetHasDefinedPartitions: boolean;\n  setParams: (params: AssetViewParams) => void;\n}\n\nexport const AssetPlots: React.FC<Props> = ({\n  assetKey,\n  assetHasDefinedPartitions,\n  params,\n  setParams,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    xAxis,\n  } = useRecentAssetEvents(assetKey, params, {assetHasDefinedPartitions});\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n  const activeItems = React.useMemo(() => new Set([xAxis]), [xAxis]);\n\n  if (loading) {\n    return (\n      <Box>\n        <Box\n          flex={{justifyContent: 'space-between', alignItems: 'center'}}\n          border={{side: 'bottom', color: Colors.KeylineGray, width: 1}}\n          padding={{vertical: 16, left: 24, right: 12}}\n          style={{marginBottom: -1}}\n        >\n          <Subheading>Asset Plots</Subheading>\n        </Box>\n        <Box padding={{vertical: 48}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        border={{side: 'bottom', color: Colors.KeylineGray, width: 1}}\n        padding={{vertical: 16, left: 24, right: 12}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Asset Plots</Subheading>\n\n        {assetHasDefinedPartitions ? (\n          <div style={{margin: '-6px 0 '}}>\n            <ButtonGroup\n              activeItems={activeItems}\n              buttons={[\n                {id: 'partition', label: 'Partitions', icon: 'partition'},\n                {id: 'time', label: 'Events', icon: 'materialization'},\n              ]}\n              onClick={(id: string) =>\n                setParams(\n                  id === 'time'\n                    ? {...params, partition: undefined, time: ''}\n                    : {...params, partition: '', time: undefined},\n                )\n              }\n            />\n          </div>\n        ) : null}\n      </Box>\n      <AssetMaterializationGraphs xAxis={xAxis} groups={grouped} />\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  Colors,\n  NonIdealState,\n  Spinner,\n  Tab,\n  Tabs,\n  Tag,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {\n  GraphData,\n  LiveDataForNode,\n  nodeDependsOnSelf,\n  toGraphId,\n  tokenForAssetKey,\n} from '../asset-graph/Utils';\nimport {useAssetGraphData} from '../asset-graph/useAssetGraphData';\nimport {useLiveDataForAssetKeys} from '../asset-graph/useLiveDataForAssetKeys';\nimport {StaleTag} from '../assets/StaleTag';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetEvents} from './AssetEvents';\nimport {AssetNodeDefinition, ASSET_NODE_DEFINITION_FRAGMENT} from './AssetNodeDefinition';\nimport {AssetNodeInstigatorTag, ASSET_NODE_INSTIGATORS_FRAGMENT} from './AssetNodeInstigatorTag';\nimport {AssetNodeLineage} from './AssetNodeLineage';\nimport {AssetLineageScope} from './AssetNodeLineageGraph';\nimport {AssetPageHeader} from './AssetPageHeader';\nimport {AssetPartitions} from './AssetPartitions';\nimport {AssetPlots} from './AssetPlots';\nimport {CurrentMinutesLateTag} from './CurrentMinutesLateTag';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {AssetKey} from './types';\nimport {\n  AssetViewDefinitionNodeFragment,\n  AssetViewDefinitionQuery,\n  AssetViewDefinitionQueryVariables,\n} from './types/AssetView.types';\n\ninterface Props {\n  assetKey: AssetKey;\n}\n\nexport interface AssetViewParams {\n  view?: 'events' | 'definition' | 'lineage' | 'overview' | 'plots' | 'partitions';\n  lineageScope?: AssetLineageScope;\n  lineageDepth?: number;\n  partition?: string;\n  time?: string;\n  asOf?: string;\n}\n\nexport const AssetView: React.FC<Props> = ({assetKey}) => {\n  const [params, setParams] = useQueryPersistedState<AssetViewParams>({});\n\n  // Load the asset definition\n  const {definition, definitionQueryResult, lastMaterialization} = useAssetViewAssetDefinition(\n    assetKey,\n  );\n\n  const defaultTab = definition?.partitionDefinition ? 'partitions' : 'events';\n  const selectedTab = params.view || defaultTab;\n\n  // Load the asset graph - a large graph for the Lineage tab, a small graph for the Definition tab\n  // tab, or just the current node for other tabs. NOTE: Changing the query does not re-fetch data,\n  // it just re-filters.\n  const visible = getQueryForVisibleAssets(assetKey, params);\n  const visibleAssetGraph = useAssetGraphData(visible.query, {\n    hideEdgesToNodesOutsideQuery: true,\n  });\n\n  const {upstream, downstream} = useNeighborsFromGraph(visibleAssetGraph.assetGraphData, assetKey);\n  const node = visibleAssetGraph.assetGraphData?.nodes[toGraphId(assetKey)];\n\n  // Observe the live state of the visible assets. Note: We use the \"last materialization\"\n  // provided by this hook to trigger resets of the datasets inside the Activity / Plots tabs\n  const {liveDataRefreshState, liveDataByNode, runWatchers} = useLiveDataForAssetKeys(\n    visibleAssetGraph.graphAssetKeys,\n  );\n\n  // The \"live\" data is preferable and more current, but only available for SDAs. Fallback\n  // to the materialization timestamp we loaded from assetOrError if live data is not available.\n  const lastMaterializedAt = (\n    liveDataByNode[toGraphId(assetKey)]?.lastMaterialization || lastMaterialization\n  )?.timestamp;\n\n  const viewingMostRecent = !params.asOf || Number(lastMaterializedAt) <= Number(params.asOf);\n\n  const refreshState = useMergedRefresh(\n    useQueryRefreshAtInterval(definitionQueryResult, FIFTEEN_SECONDS),\n    liveDataRefreshState,\n  );\n\n  const renderDefinitionTab = () => {\n    if (!definition) {\n      return <AssetNoDefinitionState />;\n    }\n    return (\n      <AssetNodeDefinition\n        assetNode={definition}\n        upstream={upstream}\n        downstream={downstream}\n        dependsOnSelf={node ? nodeDependsOnSelf(node) : false}\n        liveDataByNode={liveDataByNode}\n      />\n    );\n  };\n\n  const renderLineageTab = () => {\n    if (!definition) {\n      return <AssetNoDefinitionState />;\n    }\n    if (!visibleAssetGraph.assetGraphData) {\n      return (\n        <Box style={{flex: 1}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    return (\n      <AssetNodeLineage\n        params={params}\n        setParams={setParams}\n        assetNode={definition}\n        liveDataByNode={liveDataByNode}\n        requestedDepth={visible.requestedDepth}\n        assetGraphData={visibleAssetGraph.assetGraphData}\n        graphQueryItems={visibleAssetGraph.graphQueryItems}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', width: '100%', overflowY: 'auto'}}>\n      {runWatchers}\n      <AssetPageHeader\n        assetKey={assetKey}\n        tags={\n          <AssetViewPageHeaderTags\n            definition={definition}\n            liveData={liveDataByNode[toGraphId(assetKey)]}\n            onShowUpstream={() => setParams({...params, view: 'lineage', lineageScope: 'upstream'})}\n          />\n        }\n        tabs={\n          <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n            <Tabs size=\"large\" selectedTabId={selectedTab}>\n              {definition?.partitionDefinition && (\n                <Tab\n                  id=\"partitions\"\n                  title=\"Partitions\"\n                  onClick={() => setParams({...params, view: 'partitions'})}\n                />\n              )}\n              <Tab\n                id=\"events\"\n                title=\"Events\"\n                onClick={() => setParams({...params, view: 'events', partition: undefined})}\n              />\n              <Tab id=\"plots\" title=\"Plots\" onClick={() => setParams({...params, view: 'plots'})} />\n              <Tab\n                id=\"definition\"\n                title=\"Definition\"\n                onClick={() => setParams({...params, view: 'definition'})}\n                disabled={!definition}\n              />\n              <Tab\n                id=\"lineage\"\n                title=\"Lineage\"\n                onClick={() => setParams({...params, view: 'lineage'})}\n                disabled={!definition}\n              />\n            </Tabs>\n            {refreshState && (\n              <Box padding={{bottom: 8}}>\n                <QueryRefreshCountdown refreshState={refreshState} />\n              </Box>\n            )}\n          </Box>\n        }\n        right={\n          <Box style={{margin: '-4px 0'}}>\n            {definition && definition.jobNames.length > 0 && upstream && (\n              <LaunchAssetExecutionButton scope={{all: [definition]}} />\n            )}\n          </Box>\n        }\n      />\n      {!viewingMostRecent && (\n        <HistoricalViewAlert\n          asOf={params.asOf}\n          onClick={() => setParams({asOf: undefined, time: params.asOf})}\n          hasDefinition={!!definition}\n        />\n      )}\n\n      {\n        // Avoid thrashing the events UI (which chooses a different default query based on whether\n        // data is partitioned) by waiting for the definition to be loaded before we show any tab content\n      }\n      {definitionQueryResult.loading && !definitionQueryResult.previousData ? (\n        <Box\n          style={{height: 390}}\n          flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <ErrorBoundary region=\"page\" resetErrorOnChange={[assetKey, params]}>\n          {selectedTab === 'definition' ? (\n            renderDefinitionTab()\n          ) : selectedTab === 'lineage' ? (\n            renderLineageTab()\n          ) : selectedTab === 'partitions' ? (\n            <AssetPartitions\n              assetKey={assetKey}\n              assetPartitionDimensions={definition?.partitionKeysByDimension.map((k) => k.name)}\n              assetLastMaterializedAt={lastMaterializedAt}\n              params={params}\n              paramsTimeWindowOnly={!!params.asOf}\n              setParams={setParams}\n              liveData={definition ? liveDataByNode[toGraphId(definition.assetKey)] : undefined}\n            />\n          ) : selectedTab === 'events' ? (\n            <AssetEvents\n              assetKey={assetKey}\n              assetHasDefinedPartitions={!!definition?.partitionDefinition}\n              assetLastMaterializedAt={lastMaterializedAt}\n              params={params}\n              paramsTimeWindowOnly={!!params.asOf}\n              setParams={setParams}\n              liveData={definition ? liveDataByNode[toGraphId(definition.assetKey)] : undefined}\n            />\n          ) : selectedTab === 'plots' ? (\n            <AssetPlots\n              assetKey={assetKey}\n              assetHasDefinedPartitions={!!definition?.partitionDefinition}\n              params={params}\n              setParams={setParams}\n            />\n          ) : (\n            <span />\n          )}\n        </ErrorBoundary>\n      )}\n    </Box>\n  );\n};\n\nconst AssetNoDefinitionState = () => (\n  <Box padding={{vertical: 32}}>\n    <NonIdealState\n      title=\"No definition\"\n      description=\"This asset doesn't have a software definition in any of your code locations.\"\n      icon=\"materialization\"\n    />\n  </Box>\n);\n\n// This is a helper method that returns the \"asset graph query string\" for the current\n// AssetView tab + page settings. eg:\n// - If you're viewing the \"Lineage > Upstream 4 layers\", it returns `++++token`\n// - If you're viewing the definition tab, it returns  \"+token+\" (upstream, downstream are visible)\n// - If you're viewing the overview / events tabs, it just returns \"token\"\n//\nfunction getQueryForVisibleAssets(assetKey: AssetKey, params: AssetViewParams) {\n  const token = tokenForAssetKey(assetKey);\n\n  if (params.view === 'definition') {\n    return {query: `+\"${token}\"+`, requestedDepth: 1};\n  }\n  if (params.view === 'lineage') {\n    const defaultDepth = params.lineageScope === 'neighbors' ? 2 : 5;\n    const requestedDepth = Number(params.lineageDepth) || defaultDepth;\n    const depthStr = '+'.repeat(requestedDepth);\n\n    // Load the asset lineage (for both lineage tab and definition \"Upstream\" / \"Downstream\")\n    const query =\n      params.view === 'lineage' && params.lineageScope === 'upstream'\n        ? `${depthStr}\"${token}\"`\n        : params.view === 'lineage' && params.lineageScope === 'downstream'\n        ? `\"${token}\"${depthStr}`\n        : `${depthStr}\"${token}\"${depthStr}`;\n\n    return {\n      query,\n      requestedDepth,\n    };\n  }\n  return {query: `\"${token}\"`, requestedDepth: 0};\n}\n\nfunction useNeighborsFromGraph(graphData: GraphData | null, assetKey: AssetKey) {\n  const graphId = toGraphId(assetKey);\n\n  return React.useMemo(() => {\n    if (!graphData) {\n      return {upstream: null, downstream: null};\n    }\n    return {\n      upstream: Object.values(graphData.nodes)\n        .filter((n) => graphData.upstream[graphId]?.[toGraphId(n.assetKey)])\n        .map((n) => n.definition),\n      downstream: Object.values(graphData.nodes)\n        .filter((n) => graphData.downstream[graphId]?.[toGraphId(n.assetKey)])\n        .map((n) => n.definition),\n    };\n  }, [graphData, graphId]);\n}\n\nconst useAssetViewAssetDefinition = (assetKey: AssetKey) => {\n  const result = useQuery<AssetViewDefinitionQuery, AssetViewDefinitionQueryVariables>(\n    ASSET_VIEW_DEFINITION_QUERY,\n    {\n      variables: {assetKey: {path: assetKey.path}},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {assetOrError} = result.data || result.previousData || {};\n  const asset = assetOrError && assetOrError.__typename === 'Asset' ? assetOrError : null;\n  return {\n    definitionQueryResult: result,\n    definition: asset?.definition || null,\n    lastMaterialization: asset?.assetMaterializations[0],\n  };\n};\n\nconst ASSET_VIEW_DEFINITION_QUERY = gql`\n  query AssetViewDefinitionQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetMaterializations(limit: 1) {\n          timestamp\n        }\n        definition {\n          id\n          ...AssetViewDefinitionNode\n        }\n      }\n    }\n  }\n\n  fragment AssetViewDefinitionNode on AssetNode {\n    id\n    groupName\n    partitionDefinition {\n      __typename\n      description\n    }\n    partitionKeysByDimension {\n      name\n    }\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n\n    ...AssetNodeInstigatorsFragment\n    ...AssetNodeDefinitionFragment\n  }\n\n  ${ASSET_NODE_INSTIGATORS_FRAGMENT}\n  ${ASSET_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst HistoricalViewAlert: React.FC<{\n  asOf: string | undefined;\n  onClick: () => void;\n  hasDefinition: boolean;\n}> = ({asOf, onClick, hasDefinition}) => (\n  <Box\n    padding={{vertical: 16, horizontal: 24}}\n    border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n  >\n    <Alert\n      intent=\"info\"\n      title={\n        <span>\n          This is a historical view of materializations as of{' '}\n          <span style={{fontWeight: 600}}>\n            <Timestamp\n              timestamp={{ms: Number(asOf)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </span>\n          .\n        </span>\n      }\n      description={\n        <ButtonLink onClick={onClick} underline=\"always\">\n          {hasDefinition\n            ? 'Show definition and latest materializations'\n            : 'Show latest materializations'}\n        </ButtonLink>\n      }\n    />\n  </Box>\n);\n\nconst AssetViewPageHeaderTags: React.FC<{\n  definition: AssetViewDefinitionNodeFragment | null;\n  liveData?: LiveDataForNode;\n  onShowUpstream: () => void;\n}> = ({definition, liveData, onShowUpstream}) => {\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n\n  return (\n    <>\n      {definition && repoAddress ? (\n        <Tag icon=\"asset\">\n          Asset in <RepositoryLink repoAddress={repoAddress} />\n        </Tag>\n      ) : (\n        <Tag icon=\"asset_non_sda\">Asset</Tag>\n      )}\n      {definition && repoAddress && (\n        <AssetNodeInstigatorTag assetNode={definition} repoAddress={repoAddress} />\n      )}\n      {definition && repoAddress && definition.groupName && (\n        <Tag icon=\"asset_group\">\n          <Link to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}>\n            {definition.groupName}\n          </Link>\n        </Tag>\n      )}\n      {liveData?.freshnessPolicy && <CurrentMinutesLateTag liveData={liveData} policyOnHover />}\n      <StaleTag liveData={liveData} onClick={onShowUpstream} />\n      {definition && (\n        <AssetComputeKindTag style={{position: 'relative'}} definition={definition} reduceColor />\n      )}\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Page, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\nimport {useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\n\nimport {AssetGlobalLineageLink, AssetPageHeader} from './AssetPageHeader';\nimport {AssetView} from './AssetView';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {\n  AssetsCatalogRootQuery,\n  AssetsCatalogRootQueryVariables,\n} from './types/AssetsCatalogRoot.types';\n\nexport const AssetsCatalogRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const history = useHistory();\n  const currentPath: string[] = (params['0'] || '')\n    .split('/')\n    .filter((x: string) => x)\n    .map(decodeURIComponent);\n\n  const queryResult = useQuery<AssetsCatalogRootQuery, AssetsCatalogRootQueryVariables>(\n    ASSETS_CATALOG_ROOT_QUERY,\n    {\n      skip: currentPath.length === 0,\n      variables: {assetKey: {path: currentPath}},\n    },\n  );\n\n  useDocumentTitle(\n    currentPath && currentPath.length\n      ? `Assets: ${displayNameForAssetKey({path: currentPath})}`\n      : 'Assets',\n  );\n\n  if (queryResult.loading) {\n    return (\n      <Page>\n        <AssetPageHeader assetKey={{path: currentPath}} />\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading assets…</div>\n          </Box>\n        </Box>\n      </Page>\n    );\n  }\n\n  if (\n    currentPath.length === 0 ||\n    queryResult.data?.assetOrError.__typename === 'AssetNotFoundError'\n  ) {\n    return (\n      <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n        <AssetPageHeader\n          assetKey={{path: currentPath}}\n          right={\n            <Box flex={{gap: 12, alignItems: 'center'}}>\n              <AssetGlobalLineageLink />\n              <ReloadAllButton label=\"Reload definitions\" />\n            </Box>\n          }\n        />\n        <AssetsCatalogTable\n          prefixPath={currentPath}\n          setPrefixPath={(prefixPath) => history.push(assetDetailsPathForKey({path: prefixPath}))}\n        />\n      </Box>\n    );\n  }\n\n  return <AssetView assetKey={{path: currentPath}} />;\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default AssetsCatalogRoot;\n\nconst ASSETS_CATALOG_ROOT_QUERY = gql`\n  query AssetsCatalogRootQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      __typename\n      ... on Asset {\n        id\n        key {\n          path\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\ntype State = {\n  checkedIds: Set<string>;\n  lastCheckedId: string | null;\n};\n\ntype Action =\n  | {type: 'toggle-one'; payload: {checked: boolean; id: string}}\n  | {\n      type: 'toggle-slice';\n      payload: {checked: boolean; id: string; allIds: string[]};\n    }\n  | {type: 'toggle-all'; payload: {checked: boolean; allIds: string[]}};\n\nconst reducer = (state: State, action: Action): State => {\n  const copy = new Set(Array.from(state.checkedIds));\n  switch (action.type) {\n    case 'toggle-one': {\n      const {checked, id} = action.payload;\n      checked ? copy.add(id) : copy.delete(id);\n      return {lastCheckedId: id, checkedIds: copy};\n    }\n\n    case 'toggle-slice': {\n      const {checked, id, allIds} = action.payload;\n      const {lastCheckedId} = state;\n\n      const indexOfLast = lastCheckedId ? allIds.indexOf(lastCheckedId) : -1;\n      const indexOfChecked = allIds.indexOf(id);\n      if (indexOfLast === -1 || indexOfChecked === -1) {\n        return state;\n      }\n\n      const [start, end] = [indexOfLast, indexOfChecked].sort();\n      for (let ii = start; ii <= end; ii++) {\n        checked ? copy.add(allIds[ii]) : copy.delete(allIds[ii]);\n      }\n\n      return {\n        lastCheckedId: id,\n        checkedIds: copy,\n      };\n    }\n\n    case 'toggle-all': {\n      const {checked, allIds} = action.payload;\n      return {\n        lastCheckedId: null,\n        checkedIds: checked ? new Set(allIds) : new Set(),\n      };\n    }\n  }\n};\n\nconst initialState: State = {\n  checkedIds: new Set(),\n  lastCheckedId: null,\n};\n\nexport function useSelectionReducer(allIds: string[]) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const onToggleFactory = (id: string) => (values: {checked: boolean; shiftKey: boolean}) => {\n    const {checked, shiftKey} = values;\n    if (shiftKey && state.lastCheckedId) {\n      dispatch({type: 'toggle-slice', payload: {checked, id, allIds}});\n    } else {\n      dispatch({type: 'toggle-one', payload: {checked, id}});\n    }\n  };\n\n  const onToggleAll = (checked: boolean) => {\n    dispatch({type: 'toggle-all', payload: {checked, allIds}});\n  };\n\n  return [state, {onToggleFactory, onToggleAll}] as const;\n}\n","import {Box, Colors, Icon, IconWrapper, MiddleTruncate, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ReloadRepositoryLocationButton} from './ReloadRepositoryLocationButton';\n\nexport const RepositoryLink: React.FC<{\n  repoAddress: RepoAddress;\n  showIcon?: boolean;\n  showRefresh?: boolean;\n}> = ({repoAddress, showIcon = false, showRefresh = true}) => {\n  const {location} = repoAddress;\n  const {canReloadRepositoryLocation} = usePermissionsForLocation(repoAddress.location);\n  const repoString = repoAddressAsHumanString(repoAddress);\n\n  return (\n    <Box flex={{display: 'inline-flex', direction: 'row', alignItems: 'center'}} title={repoString}>\n      {showIcon && <Icon name=\"folder\" style={{marginRight: 8}} color={Colors.Gray400} />}\n      <RepositoryName to={workspacePathFromAddress(repoAddress)} style={{flex: 1}}>\n        <MiddleTruncate text={repoString} />\n      </RepositoryName>\n      {canReloadRepositoryLocation.enabled && showRefresh ? (\n        <ReloadRepositoryLocationButton location={location}>\n          {({tryReload, reloading}) => (\n            <ReloadTooltip\n              content={\n                reloading ? (\n                  'Reloading…'\n                ) : (\n                  <>\n                    Reload location <strong>{location}</strong>\n                  </>\n                )\n              }\n            >\n              {reloading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <StyledButton onClick={tryReload}>\n                  <Icon name=\"refresh\" color={Colors.Gray400} />\n                </StyledButton>\n              )}\n            </ReloadTooltip>\n          )}\n        </ReloadRepositoryLocationButton>\n      ) : null}\n    </Box>\n  );\n};\n\nconst RepositoryName = styled(Link)`\n  max-width: 280px;\n`;\n\nconst ReloadTooltip = styled(Tooltip)`\n  margin-left: 4px;\n\n  && {\n    display: block;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  margin: 0;\n\n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & ${IconWrapper} {\n    display: block;\n    transition: color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    color: ${Colors.Blue500};\n  }\n`;\n","import {Box, ButtonLink, Colors, Tag, Tooltip, FontFamily, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitch.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitch.types';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleAndSensorDialog} from './ScheduleAndSensorDialog';\n\nexport const ScheduleOrSensorTag: React.FC<{\n  schedules: ScheduleSwitchFragment[];\n  sensors: SensorSwitchFragment[];\n  repoAddress: RepoAddress;\n  showSwitch?: boolean;\n}> = ({schedules, sensors, repoAddress, showSwitch = true}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const scheduleCount = schedules.length;\n  const sensorCount = sensors.length;\n\n  if (scheduleCount > 1 || sensorCount > 1 || (scheduleCount && sensorCount)) {\n    const buttonText =\n      scheduleCount && sensorCount\n        ? `${scheduleCount + sensorCount} schedules/sensors`\n        : scheduleCount\n        ? `${scheduleCount} schedules`\n        : `${sensorCount} sensors`;\n\n    const icon = scheduleCount > 1 ? 'schedule' : 'sensors';\n\n    return (\n      <>\n        <Tag icon={icon}>\n          <ButtonLink onClick={() => setOpen(true)} color={Colors.Link}>\n            {buttonText}\n          </ButtonLink>\n        </Tag>\n        <ScheduleAndSensorDialog\n          isOpen={open}\n          onClose={() => setOpen(false)}\n          repoAddress={repoAddress}\n          schedules={schedules}\n          sensors={sensors}\n          showSwitch={showSwitch}\n        />\n      </>\n    );\n  }\n\n  if (scheduleCount) {\n    return (\n      <MatchingSchedule schedule={schedules[0]} repoAddress={repoAddress} showSwitch={showSwitch} />\n    );\n  }\n\n  if (sensorCount) {\n    return <MatchingSensor sensor={sensors[0]} repoAddress={repoAddress} showSwitch={showSwitch} />;\n  }\n\n  return null;\n};\n\nconst MatchingSchedule: React.FC<{\n  schedule: ScheduleSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({schedule, repoAddress, showSwitch}) => {\n  const {cronSchedule, executionTimezone, scheduleState} = schedule;\n  const running = scheduleState.status === 'RUNNING';\n  const tag = (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"schedule\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n          style={{overflow: 'hidden', textOverflow: 'ellipsis'}}\n        >\n          {humanCronString(cronSchedule, executionTimezone || 'UTC')}\n        </Link>\n        {showSwitch ? (\n          <ScheduleSwitch size=\"small\" repoAddress={repoAddress} schedule={schedule} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n\n  return schedule.cronSchedule ? (\n    <Tooltip\n      placement=\"top-start\"\n      content={\n        <Box flex={{direction: 'column', gap: 4}}>\n          <div>\n            Name: <strong>{schedule.name}</strong>\n          </div>\n          <div>\n            Cron:{' '}\n            <span style={{fontFamily: FontFamily.monospace, marginLeft: '4px'}}>\n              ({schedule.cronSchedule})\n            </span>\n          </div>\n          <div>\n            Timezone: <strong>{schedule.executionTimezone || 'UTC'}</strong>\n          </div>\n        </Box>\n      }\n    >\n      {tag}\n    </Tooltip>\n  ) : (\n    tag\n  );\n};\n\nconst MatchingSensor: React.FC<{\n  sensor: SensorSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({sensor, repoAddress, showSwitch}) => {\n  const running = sensor.sensorState.status === 'RUNNING';\n  return (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"sensors\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n          style={{maxWidth: 200, overflow: 'hidden'}}\n        >\n          <MiddleTruncate text={sensor.name} />\n        </Link>\n        {showSwitch ? (\n          <SensorSwitch size=\"small\" repoAddress={repoAddress} sensor={sensor} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.Dark} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.Gray50};\n  border: 0;\n  box-shadow: inset 0px -1px 0 ${Colors.KeylineGray}, inset 0px 1px 0 ${Colors.KeylineGray};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.Gray100};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.Gray700};\n`;\n","// eslint-disable-next-line no-restricted-imports\nimport {\n  Box,\n  Colors,\n  CommonMenuItemProps,\n  IconWrapper,\n  iconWithColor,\n  MenuItem,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface MenuLinkProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof MenuItem>, 'icon' | 'onClick'>,\n    LinkProps {}\n\n/**\n * If you want to use a menu item as a link, use `MenuLink` and provide a `to` prop.\n */\nexport const MenuLink: React.FC<MenuLinkProps> = (props) => {\n  const {icon, intent, text, disabled, ...rest} = props;\n\n  if (disabled) {\n    return <MenuItem disabled icon={icon} intent={intent} text={text} />;\n  }\n  return (\n    <StyledMenuLink {...rest}>\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n        {iconWithColor(icon, intent)}\n        <div>{text}</div>\n      </Box>\n    </StyledMenuLink>\n  );\n};\n\nconst StyledMenuLink = styled(Link)`\n  text-decoration: none;\n\n  border-radius: 4px;\n  display: block;\n  line-height: 20px;\n  padding: 6px 8px 6px 12px;\n  transition: background-color 50ms, box-shadow 150ms;\n  align-items: flex-start;\n  user-select: none;\n\n  /**\n   * Use margin instead of align-items: center because the contents of the menu item may wrap \n   * in unusual circumstances.\n   */\n  ${IconWrapper} {\n    margin-top: 2px;\n  }\n\n  ${IconWrapper}:first-child {\n    margin-left: -4px;\n  }\n\n  &&&:link,\n  &&&:visited,\n  &&&:hover,\n  &&&:active {\n    color: ${Colors.Gray900};\n    text-decoration: none;\n  }\n\n  &&&:hover {\n    background: ${Colors.Gray100};\n  }\n`;\n","import {Box, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const HeaderCell: React.FC = ({children}) => (\n  <Box\n    padding={{vertical: 8, horizontal: 24}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n    style={{whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden'}}\n  >\n    {children}\n  </Box>\n);\n\nexport const RowCell: React.FC = ({children}) => (\n  <Box\n    padding={{horizontal: 24, vertical: 12}}\n    flex={{direction: 'column', justifyContent: 'flex-start'}}\n    style={{color: Colors.Gray500, overflow: 'hidden'}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n  >\n    {children}\n  </Box>\n);\n\nexport const Container = styled.div`\n  height: 100%;\n  overflow: auto;\n`;\n\ntype InnerProps = {\n  $totalHeight: number;\n};\n\nexport const Inner = styled.div.attrs<InnerProps>(({$totalHeight}) => ({\n  style: {\n    height: `${$totalHeight}px`,\n  },\n}))<InnerProps>`\n  position: relative;\n  width: 100%;\n`;\n\ntype RowProps = {$height: number; $start: number};\n\nexport const Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}> = ({queryResult, noneString = 'None'}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText: React.FC = ({children}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.Gray500};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: LazyQueryExecFunction<any, any>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n"],"names":["AssetLink","props","path","icon","url","isGroup","textStyle","linkUrl","assetDetailsPathForKey","assetPath","reduce","accum","elem","ii","join","flex","direction","alignItems","display","style","maxWidth","margin","right","top","name","color","Colors","to","overflow","wordBreak","text","AssetEventMetadataEntriesTable","event","observations","metadataEntries","length","timestamp","AssetEventMetadataScrollContainer","AssetEventMetadataTable","map","entry","label","MetadataEntry","expandSmallValues","opacity","description","obs","gap","Icon","size","marginTop","stepKey","runId","titleForRun","marginLeft","dayjs","from","styled","relativeTime","AssetMaterializationUpstreamData","assetKey","result","useQuery","ASSET_MATERIALIZATION_UPSTREAM_QUERY","skip","variables","displayName","displayNameForAssetKey","entries","data","assetNodeOrError","__typename","assetMaterializationUsedData","renderEntryAndParents","depth","isFirstAtDepth","entryDisplayName","entryLink","view","time","paddingLeft","Math","max","MiddleTruncate","whiteSpace","Timestamp","ms","Number","timeFormat","showSeconds","showTimezone","filter","e","downstreamAssetKey","idx","loading","AssetUpstreamDataTable","gql","AssetEventDetail","run","runOrError","repositoryOrigin","repoAddress","buildRepoAddress","repositoryName","repositoryLocationName","repo","useRepository","assetLineage","padding","horizontal","bottom","vertical","border","side","width","justifyContent","gridTemplateColumns","partition","minHeight","status","linkToRunEvent","isHiddenAssetGroupJob","pipelineName","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","spacing","AssetEventSystemTags","collapsible","AssetLineageElements","elements","AssetEventDetailEmpty","AssetEventList","groups","focused","setFocused","xAxis","parentRef","React","focusedRowRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","el","HTMLElement","scrollIntoView","block","AssetListContainer","ref","$totalHeight","index","key","start","group","AssetListRow","$height","$start","$focused","undefined","onClick","target","closest","height","left","AssetEventListPartitionRow","AssetEventListEventRow","Container","Row","p","latest","Tag","intent","userSelect","AssetEventsTable","hasPartitions","hasLineage","Table","minWidth","HoverableRow","EventGroupRow","isFocused","MetadataEntriesRow","NoneSpan","observationsAboutLatest","all","background","colSpan","fontSize","DetailsTable","focusCss","borderLeft","DisclosureTriangle","open","AllIndividualEventsLink","events","children","setOpen","ButtonLink","Dialog","isOpen","canEscapeKeyClose","canOutsideClickClose","onClose","title","stopPropagation","Button","DisclosureTriangleButton","$open","IconWrapper","AssetPartitionDetailLoader","ASSET_PARTITION_DETAIL_QUERY","partitionKey","materializations","assetMaterializations","sort","a","b","assetObservations","some","m","AssetPartitionDetail","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","hasLoadingState","Spinner","purpose","AssetPartitionDetailEmpty","AssetEvents","assetLastMaterializedAt","assetHasDefinedPartitions","params","setParams","liveData","useRecentAssetEvents","loadedPartitionKeys","refetch","asOf","grouped","useGroupedEvents","onSetFocused","updates","find","assetHasUndefinedPartitions","g","assetHasLineage","marginBottom","ButtonGroup","activeItems","Set","buttons","id","FailedRunsSinceMaterializationBanner","CurrentRunsBanner","outline","onKeyDown","shift","ArrowDown","ArrowUp","isDefaultPrevented","next","indexOf","preventDefault","tabIndex","overflowY","ErrorBoundary","region","resetErrorOnChange","AssetNodeList","liveDataByNode","history","useHistory","asset","AssetNodeWrapper","push","AssetNode","definition","selected","toGraphId","Box","AssetNodeDefinition","assetNode","upstream","downstream","dependsOnSelf","metadataForAssetNode","assetMetadata","assetType","liveDataForNode","assetConfigSchema","configField","configType","repository","location","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","DescriptionAnnotations","flexBasis","flexGrow","Description","maxHeight","opVersion","Version","freshnessPolicy","CurrentMinutesLateTag","freshnessPolicyDescription","DependsOnSelfBanner","ConfigTypeSchema","type","typesInScope","recursiveConfigTypes","DagsterType","AssetMetadata","repoLocation","wrap","lineHeight","jobNames","jobName","OpNamesDisplay","isSource","graphName","opNames","opCount","firstOp","opPath","workspacePathFromAddress","ASSET_NODE_DEFINITION_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","ASSET_NODE_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","AssetNodeInstigatorTag","schedules","flatMap","jobs","j","sensors","ScheduleOrSensorTag","showSwitch","ASSET_NODE_INSTIGATORS_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","LINEAGE_GRAPH_ZOOM_LEVEL","AssetNodeLineageGraph","assetGraphData","assetGraphId","highlighted","setHighlighted","useAssetLayout","layout","viewportEl","lastZoomLevel","getJSONForKey","autocenter","focus","SVGViewport","r","interactor","graphWidth","graphHeight","onDoubleClick","maxZoom","maxAutocenterZoom","scale","SVGContainer","SVGSaveZoomLevel","AssetEdges","edges","Object","values","bounds","AssetGroupNode","nodes","graphNode","JSON","parse","onMouseEnter","onMouseLeave","lineageScope","zoomToSVGBox","MINIMAL_SCALE","window","localStorage","setItem","stringify","err","AssetNodeLineage","graphQueryItems","requestedDepth","maxDistances","calculateGraphDistances","maxDepth","currentDepth","min","position","lineageDepth","LineageDepthControl","value","onChange","LaunchAssetExecutionButton","liveDataForStale","scope","n","disabled","DepthHidesAssetsNotice","setText","commitText","TextInput","inputMode","textAlign","borderRadius","boxShadow","onBlur","AssetPartitionList","focusedDimensionKey","setFocusedDimensionKey","partitions","getItemKey","dimensionKey","scrollToIndex","findIndex","smoothScroll","align","nextIdx","state","PartitionState","StateDot","partitionStateToStyle","DISPLAYED_STATES","AssetPartitions","assetPartitionDimensions","usePartitionHealthData","assetHealth","usePartitionDimensionSelections","knownDimensionNames","modifyQueryString","ranges","setRanges","useQueryPersistedState","defaults","states","encode","val","decode","qs","split","s","includes","stateFilters","setStateFilters","timeRangeIdx","isTimeseriesDimension","dimension","timeRange","keysInSelection","explodePartitionKeysInSelection","stateForKey","keysFiltered","focusedDimensionKeys","Boolean","dimensionKeysOrdered","range","selectedKeys","reverse","dimensionRowsForRange","stateForSingleDimension","row","DimensionRangeWizard","partitionKeys","partitionStateForKey","setSelected","toLocaleString","PartitionStateCheckboxes","partitionKeysForCounts","allowed","paddingRight","nextFocusedDimensionKeys","AssetPlots","AssetMaterializationGraphs","AssetView","useAssetViewAssetDefinition","definitionQueryResult","lastMaterialization","defaultTab","partitionDefinition","selectedTab","visible","token","tokenForAssetKey","query","defaultDepth","depthStr","repeat","getQueryForVisibleAssets","visibleAssetGraph","useAssetGraphData","hideEdgesToNodesOutsideQuery","graphData","graphId","useNeighborsFromGraph","node","useLiveDataForAssetKeys","graphAssetKeys","liveDataRefreshState","runWatchers","lastMaterializedAt","viewingMostRecent","refreshState","useMergedRefresh","useQueryRefreshAtInterval","FIFTEEN_SECONDS","AssetPageHeader","tags","AssetViewPageHeaderTags","onShowUpstream","tabs","Tabs","selectedTabId","QueryRefresh","HistoricalViewAlert","hasDefinition","previousData","nodeDependsOnSelf","AssetNoDefinitionState","partitionKeysByDimension","k","paramsTimeWindowOnly","NonIdealState","ASSET_VIEW_DEFINITION_QUERY","notifyOnNetworkStatusChange","assetOrError","Alert","fontWeight","underline","RepositoryLink","groupName","policyOnHover","StaleTag","reduceColor","AssetsCatalogRoot","useTrackPageView","useParams","currentPath","x","decodeURIComponent","queryResult","ASSETS_CATALOG_ROOT_QUERY","useDocumentTitle","Page","paddingTop","ReloadAllButton","AssetsCatalogTable","prefixPath","setPrefixPath","reducer","action","copy","Array","checkedIds","payload","checked","add","delete","lastCheckedId","allIds","indexOfLast","indexOfChecked","end","initialState","useSelectionReducer","dispatch","onToggleFactory","shiftKey","onToggleAll","showRefresh","canReloadRepositoryLocation","usePermissionsForLocation","repoString","repoAddressAsHumanString","marginRight","RepositoryName","enabled","tryReload","reloading","ReloadTooltip","content","StyledButton","Link","Tooltip","scheduleCount","sensorCount","buttonText","MatchingSchedule","schedule","MatchingSensor","sensor","cronSchedule","executionTimezone","running","scheduleState","tag","textOverflow","humanCronString","placement","fontFamily","FontFamily","sensorState","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","repoName","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","RepoName","RepoLocation","MenuLink","rest","StyledMenuLink","iconWithColor","HeaderCell","RowCell","Inner","transform","RepoRow","onToggle","getModifierState","LoadingOrNone","noneString","called","CaptionText","CaptionTextContainer","Caption","useDelayedRowQuery","lazyQueryFn","timer","setTimeout","clearTimeout"],"sourceRoot":""}