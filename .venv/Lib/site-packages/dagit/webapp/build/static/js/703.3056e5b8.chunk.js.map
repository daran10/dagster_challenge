{"version":3,"file":"static/js/703.3056e5b8.chunk.js","mappings":"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","sources":["../../core/src/pipelines/PipelineExplorerRoot.tsx","../../core/src/pipelines/PipelineRunsRoot.tsx","../../core/src/schedules/SchedulesNextTicks.tsx","../../core/src/ui/StickyTableContainer.tsx","../../core/src/assets/AssetGroupRoot.tsx","../../core/src/launchpad/LaunchpadSetupFromRunRoot.tsx","../../core/src/launchpad/LaunchpadSetupRoot.tsx","../../core/src/nav/LatestRunTag.tsx","../../core/src/nav/JobMetadata.tsx","../../core/src/nav/PipelineNav.tsx","../../core/src/partitions/JobBackfillsTable.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/OpJobPartitionsView.tsx","../../core/src/partitions/AssetJobPartitionsView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/PipelineOrJobDisambiguationRoot.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/resources/ResourceRoot.tsx","../../core/src/TickLogDialog.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickDetailsDialog.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleUtils.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorFragment.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/VirtualizedRepoAssetTable.tsx","../../core/src/workspace/WorkspaceTabs.tsx","../../core/src/workspace/WorkspaceHeader.tsx","../../core/src/workspace/WorkspaceAssetsRoot.tsx","../../core/src/workspace/VirtualizedGraphTable.tsx","../../core/src/workspace/WorkspaceGraphsRoot.tsx","../../core/src/workspace/VirtualizedJobTable.tsx","../../core/src/workspace/WorkspaceJobsRoot.tsx","../../core/src/ops/OpCard.tsx","../../core/src/ops/OpDetailsRoot.tsx","../../core/src/ops/OpsRoot.tsx","../../core/src/workspace/WorkspaceOpsRoot.tsx","../../core/src/workspace/WorkspacePipelineRoot.tsx","../../core/src/schedules/SchedulesRoot.tsx","../../core/src/sensors/SensorsTable.tsx","../../core/src/sensors/SensorsRoot.tsx","../../core/src/workspace/RepositoryAssetsList.tsx","../../core/src/workspace/RepositoryGraphsList.tsx","../../core/src/pipelines/PipelineTable.tsx","../../core/src/workspace/RepositoryPipelinesList.tsx","../../core/src/workspace/WorkspaceRepoRoot.tsx","../../core/src/workspace/VirtualizedScheduleTable.tsx","../../core/src/workspace/WorkspaceSchedulesRoot.tsx","../../core/src/workspace/VirtualizedSensorTable.tsx","../../core/src/workspace/WorkspaceSensorsRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_ASSET_NODE_FRAGMENT,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\nimport {\n  PipelineExplorerRootQuery,\n  PipelineExplorerRootQueryVariables,\n} from './types/PipelineExplorerRoot.types';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString(params['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={({assetKey}) => {\n        history.push(assetDetailsPathForKey(assetKey));\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer: React.FC<{\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}> = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}) => {\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery<PipelineExplorerRootQuery, PipelineExplorerRootQueryVariables>(\n    PIPELINE_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n        snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<PipelineExplorerRootQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = gql`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_ASSET_NODE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {\n  Box,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = ['status', 'tag'];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n            const runs = pipelineRunsOrError.results;\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n            return (\n              <>\n                <Box\n                  flex={{alignItems: 'flex-start', justifyContent: 'space-between'}}\n                  padding={{top: 8, horizontal: 24}}\n                >\n                  <Box flex={{direction: 'row', gap: 8}}>\n                    {permanentTokens.map(({token, value}) => (\n                      <Tag key={token}>{`${token}:${value}`}</Tag>\n                    ))}\n                  </Box>\n                  <QueryRefreshCountdown refreshState={refreshState} />\n                </Box>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <RunsFilterInput\n                        enabledFilters={ENABLED_FILTERS}\n                        tokens={filterTokens}\n                        onChange={setFilterTokens}\n                        loading={queryResult.loading}\n                      />\n                    }\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Table,\n  Subheading,\n  StyledReadOnlyCodeMirror,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationStatus} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunTags} from '../runs/RunTags';\nimport {MenuLink} from '../ui/MenuLink';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepository,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {\n  RepositoryForNextTicksFragment,\n  ScheduleFutureTickEvaluationResultFragment,\n  ScheduleFutureTickRunRequestFragment,\n  ScheduleNextFiveTicksFragment,\n  ScheduleTickConfigQuery,\n  ScheduleTickConfigQueryVariables,\n} from './types/SchedulesNextTicks.types';\n\ninterface ScheduleTick {\n  schedule: ScheduleNextFiveTicksFragment;\n  timestamp: number;\n  repoAddress: RepoAddress;\n}\n\nexport const SchedulesNextTicks: React.FC<{\n  repos: RepositoryForNextTicksFragment[];\n}> = React.memo(({repos}) => {\n  const nextTicks: ScheduleTick[] = [];\n  let anyPipelines = false;\n  let anySchedules = false;\n\n  const {options} = useRepositoryOptions();\n\n  repos.forEach((repo) => {\n    const {schedules} = repo;\n    anySchedules = anySchedules || schedules.length > 0;\n\n    const repoAddress = {\n      name: repo.name,\n      location: repo.location.name,\n    };\n\n    const futureTickSchedules = schedules.filter(\n      (schedule) =>\n        schedule.futureTicks.results.length &&\n        schedule.scheduleState.status === InstigationStatus.RUNNING,\n    );\n\n    const minMaxTimestamp = Math.min(\n      ...futureTickSchedules.map(\n        (schedule) =>\n          schedule.futureTicks.results[schedule.futureTicks.results.length - 1].timestamp!,\n      ),\n    );\n\n    futureTickSchedules.forEach((schedule) => {\n      schedule.futureTicks.results.forEach((tick) => {\n        if (tick.timestamp! <= minMaxTimestamp) {\n          nextTicks.push({schedule, timestamp: tick.timestamp!, repoAddress});\n        }\n      });\n    });\n\n    if (!anyPipelines) {\n      anyPipelines = schedules.some((schedule) => !!schedule.mode);\n    }\n  });\n\n  nextTicks.sort((a, b) => a.timestamp - b.timestamp);\n\n  if (!nextTicks.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No scheduled ticks\"\n          description={\n            anySchedules ? (\n              <>\n                There are no running schedules.{' '}\n                <Link to=\"/overview/schedules\">Start a schedule</Link> to see scheduled ticks.\n              </>\n            ) : (\n              <>\n                There are no schedules in this workspace. Create a running schedule to view its\n                scheduled ticks.\n              </>\n            )\n          }\n          action={\n            anySchedules ? null : (\n              <ExternalAnchorButton\n                icon={<Icon name=\"open_in_new\" />}\n                href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\"\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table $monospaceFont={false}>\n      <thead>\n        <tr>\n          <th style={{width: '260px'}}>Timestamp</th>\n          <th style={{width: '30%'}}>Schedule</th>\n          <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          <th>Metadata</th>\n        </tr>\n      </thead>\n      <tbody>\n        {nextTicks.map(({schedule, timestamp, repoAddress}) => {\n          const repo = findRepositoryAmongOptions(options, repoAddress);\n          return (\n            <tr key={`${schedule.id}:${timestamp}`}>\n              <td>\n                <TimestampDisplay\n                  timestamp={timestamp}\n                  timezone={schedule.executionTimezone}\n                  timeFormat={{showSeconds: false, showTimezone: true}}\n                />\n              </td>\n              <td>\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}>\n                  {schedule.name}\n                </Link>\n              </td>\n              <td>\n                <PipelineReference\n                  pipelineName={schedule.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isThisThingAJob(repo, schedule.pipelineName)}\n                />\n              </td>\n              <td>\n                <NextTickMenu\n                  repoAddress={repoAddress}\n                  schedule={schedule}\n                  tickTimestamp={timestamp}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n});\n\nconst NextTickMenu: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = React.memo(({repoAddress, schedule, tickTimestamp}) => {\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName: schedule.name,\n  };\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [loadTickConfig, {called, loading, data}] = useLazyQuery<\n    ScheduleTickConfigQuery,\n    ScheduleTickConfigQueryVariables\n  >(SCHEDULE_TICK_CONFIG_QUERY, {\n    variables: {\n      scheduleSelector,\n      tickTimestamp,\n    },\n  });\n\n  const infoReady = called ? !loading : false;\n  const evaluationResult =\n    data?.scheduleOrError?.__typename === 'Schedule'\n      ? data.scheduleOrError.futureTick.evaluationResult\n      : null;\n\n  const menuItems = infoReady ? (\n    <NextTickMenuItems\n      repoAddress={repoAddress}\n      schedule={schedule}\n      loading={loading}\n      onItemOpen={setOpen}\n      evaluationResult={evaluationResult}\n    />\n  ) : (\n    <Spinner purpose=\"body-text\" />\n  );\n  return (\n    <>\n      <Popover\n        content={<Menu>{menuItems}</Menu>}\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadTickConfig();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <NextTickDialog\n        repoAddress={repoAddress}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        schedule={schedule}\n        tickTimestamp={tickTimestamp}\n        evaluationResult={evaluationResult}\n      />\n    </>\n  );\n});\n\nconst NextTickMenuItems: React.FC<{\n  repoAddress: RepoAddress;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  loading: boolean;\n  onItemOpen: (value: boolean) => void;\n}> = ({repoAddress, schedule, evaluationResult, loading, onItemOpen}) => {\n  if (!evaluationResult) {\n    return <MenuItem text=\"Could not preview tick for this schedule\" />;\n  }\n\n  if (evaluationResult.skipReason) {\n    return <MenuItem text=\"View skip reason...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (evaluationResult.error) {\n    return <MenuItem text=\"View error...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (!evaluationResult.runRequests || !evaluationResult.runRequests.length) {\n    return <MenuItem text=\"No runs requested for this projected schedule tick\" />;\n  }\n\n  if (evaluationResult.runRequests.length === 1) {\n    const runRequest = evaluationResult.runRequests[0];\n    const runConfigYaml = runRequest ? runRequest.runConfigYaml : '';\n    return (\n      <>\n        <MenuItem\n          text={loading ? 'Loading Configuration...' : 'View Configuration...'}\n          icon=\"open_in_new\"\n          onClick={() => onItemOpen(true)}\n        />\n        <MenuLink\n          text=\"Open in Launchpad...\"\n          icon=\"edit\"\n          target=\"_blank\"\n          to={workspacePathFromAddress(\n            repoAddress,\n            `/pipeline_or_job/${schedule.pipelineName}/playground/setup?${qs.stringify({\n              mode: schedule.mode,\n              config: runConfigYaml,\n              solidSelection: schedule.solidSelection,\n            })}`,\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <MenuItem\n      text={`View ${evaluationResult.runRequests.length} run requests...`}\n      icon=\"edit\"\n      target=\"_blank\"\n      onClick={() => onItemOpen(true)}\n    />\n  );\n};\n\nconst NextTickDialog: React.FC<{\n  repoAddress: RepoAddress;\n  isOpen: boolean;\n  setOpen: (value: boolean) => void;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = ({repoAddress, evaluationResult, schedule, tickTimestamp, setOpen, isOpen}) => {\n  const [\n    selectedRunRequest,\n    setSelectedRunRequest,\n  ] = React.useState<ScheduleFutureTickRunRequestFragment | null>(\n    evaluationResult && evaluationResult.runRequests && evaluationResult.runRequests.length === 1\n      ? evaluationResult.runRequests[0]\n      : null,\n  );\n\n  const copy = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  React.useEffect(() => {\n    if (\n      evaluationResult &&\n      evaluationResult.runRequests &&\n      evaluationResult.runRequests.length === 1\n    ) {\n      setSelectedRunRequest(evaluationResult.runRequests[0]);\n    }\n  }, [evaluationResult]);\n\n  const close = () => {\n    setSelectedRunRequest(null);\n    setOpen(false);\n  };\n\n  let body;\n  if (!evaluationResult) {\n    body = null;\n  } else if (selectedRunRequest) {\n    body = (\n      <Box flex={{direction: 'column', gap: 20}}>\n        <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n          <Subheading>Tags</Subheading>\n          {selectedRunRequest.tags.length ? (\n            <RunTags tags={selectedRunRequest.tags} mode={isJob ? null : schedule.mode} />\n          ) : null}\n        </Box>\n        <div>\n          <Box\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            padding={{left: 24, bottom: 16}}\n          >\n            <Subheading>Config</Subheading>\n          </Box>\n          <StyledReadOnlyCodeMirror\n            value={selectedRunRequest.runConfigYaml}\n            options={{lineNumbers: true, mode: 'yaml'}}\n          />\n        </div>\n      </Box>\n    );\n  } else if (evaluationResult.error) {\n    body = (\n      <DialogBody>\n        <PythonErrorInfo error={evaluationResult.error} />\n      </DialogBody>\n    );\n  } else if (evaluationResult.skipReason) {\n    body = (\n      <DialogBody>\n        <SkipWrapper>{evaluationResult.skipReason}</SkipWrapper>\n      </DialogBody>\n    );\n  } else if (evaluationResult.runRequests) {\n    body = (\n      <DialogBody>\n        <RunRequestBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Run key</th>\n                <th>Config</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {evaluationResult.runRequests.map((runRequest, idx) => {\n                if (!runRequest) {\n                  return null;\n                }\n                return (\n                  <tr key={idx}>\n                    <td>{runRequest.runKey || <span>&mdash;</span>}</td>\n                    <td>\n                      <ButtonLink\n                        onClick={() => setSelectedRunRequest(runRequest)}\n                        underline={false}\n                      >\n                        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                          <Icon name=\"open_in_new\" color={Colors.Gray400} />\n                          <span>View config</span>\n                        </Group>\n                      </ButtonLink>\n                    </td>\n                    <td>\n                      <Popover\n                        content={\n                          <Menu>\n                            <MenuLink\n                              text=\"Open in Launchpad...\"\n                              icon=\"edit\"\n                              target=\"_blank\"\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/${isJob ? 'jobs' : 'pipelines'}/${\n                                  schedule.pipelineName\n                                }/playground/setup?${qs.stringify({\n                                  mode: schedule.mode,\n                                  config: runRequest.runConfigYaml,\n                                  solidSelection: schedule.solidSelection,\n                                })}`,\n                              )}\n                            />\n                          </Menu>\n                        }\n                        position=\"bottom\"\n                      >\n                        <Button icon={<Icon name=\"expand_more\" />} />\n                      </Popover>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </RunRequestBody>\n      </DialogBody>\n    );\n  }\n\n  return (\n    <Dialog\n      onClose={() => close()}\n      style={{width: '50vw'}}\n      title={\n        <Box flex={{direction: 'row', gap: 4}}>\n          <TimestampDisplay timestamp={tickTimestamp} timezone={schedule.executionTimezone} />\n          {selectedRunRequest?.runKey ? <div>: {selectedRunRequest?.runKey}</div> : null}\n        </Box>\n      }\n      isOpen={isOpen}\n    >\n      {body}\n      <DialogFooter topBorder>\n        {selectedRunRequest ? (\n          <Button\n            autoFocus={false}\n            onClick={() => {\n              copy(selectedRunRequest.runConfigYaml);\n              SharedToaster.show({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n        ) : null}\n        <Button intent=\"primary\" autoFocus={true} onClick={() => close()}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT = gql`\n  fragment ScheduleNextFiveTicksFragment on Schedule {\n    id\n    name\n    executionTimezone\n    mode\n    solidSelection\n    pipelineName\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n\nexport const REPOSITORY_FOR_NEXT_TICKS_FRAGMENT = gql`\n  fragment RepositoryForNextTicksFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleNextFiveTicksFragment\n    }\n  }\n\n  ${SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT}\n`;\n\nconst SCHEDULE_TICK_CONFIG_QUERY = gql`\n  query ScheduleTickConfigQuery($scheduleSelector: ScheduleSelector!, $tickTimestamp: Int!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        futureTick(tickTimestamp: $tickTimestamp) {\n          evaluationResult {\n            ...ScheduleFutureTickEvaluationResult\n          }\n        }\n      }\n    }\n  }\n\n  fragment ScheduleFutureTickEvaluationResult on TickEvaluation {\n    runRequests {\n      ...ScheduleFutureTickRunRequest\n    }\n    skipReason\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment ScheduleFutureTickRunRequest on RunRequest {\n    runKey\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunRequestBody = styled.div`\n  font-size: 13px;\n`;\n\nconst SkipWrapper = styled.div`\n  background-color: #fdfcf2;\n  border: 1px solid ${Colors.Yellow500};\n  border-radius: 3px;\n`;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","import {Page, PageHeader, Heading, Box, Tag, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetGlobalLineageLink} from './AssetPageHeader';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  groupName: string;\n  prefixPath: string;\n  0: string;\n}\n\nexport const AssetGroupRoot: React.FC<{repoAddress: RepoAddress; tab: 'lineage' | 'list'}> = ({\n  repoAddress,\n  tab,\n}) => {\n  useTrackPageView();\n\n  const {groupName, 0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Asset Group: ${groupName}`);\n\n  const groupPath = workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`);\n  const groupSelector = React.useMemo(\n    () => ({\n      groupName,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [groupName, repoAddress],\n  );\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](`${groupPath}/${explorerPathToString(path)}`);\n    },\n    [groupPath, history],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (node.groupName && node.repoAddress) {\n        history.replace(\n          workspacePathFromAddress(\n            node.repoAddress,\n            `/asset-groups/${node.groupName}/lineage/${node.assetKey.path\n              .map(encodeURIComponent)\n              .join('/')}`,\n          ),\n        );\n      } else {\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n      }\n    },\n    [history],\n  );\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>{groupName}</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n        tags={\n          <Tag icon=\"asset_group\">\n            Asset Group in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        tabs={\n          <Box\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            margin={{right: 4}}\n          >\n            <Tabs selectedTabId={tab}>\n              <TabLink id=\"lineage\" title=\"Lineage\" to={`${groupPath}/lineage`} />\n              <TabLink id=\"list\" title=\"List\" to={`${groupPath}/list`} />\n            </Tabs>\n            <AssetGlobalLineageLink />\n          </Box>\n        }\n      />\n      {tab === 'lineage' ? (\n        <AssetGraphExplorer\n          fetchOptions={{groupSelector}}\n          options={{preferAssetRendering: true, explodeComposites: true}}\n          explorerPath={explorerPathFromString(path || 'lineage/')}\n          onChangeExplorerPath={onChangeExplorerPath}\n          onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n        />\n      ) : (\n        <AssetsCatalogTable\n          groupSelector={groupSelector}\n          prefixPath={path.split('/').map(decodeURIComponent).filter(Boolean)}\n          setPrefixPath={(prefixPath) =>\n            history.push(`${groupPath}/list/${prefixPath.map(encodeURIComponent).join('/')}`)\n          }\n        />\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {\n  ConfigForRunQuery,\n  ConfigForRunQueryVariables,\n} from './types/LaunchpadSetupFromRunRoot.types';\n\nexport const LaunchpadSetupFromRunRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissionsForLocation(repoAddress.location);\n  const {repoPath, pipelinePath, runId} = useParams<{\n    repoPath: string;\n    pipelinePath: string;\n    runId: string;\n  }>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return (\n    <LaunchpadSetupFromRunAllowedRoot\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n      runId={runId}\n    />\n  );\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  runId: string;\n}\n\n/**\n * For a given run ID, retrieve the run config and populate a new Launchpad session with its\n * values, then redirect to the launchpad. The newly created session will be the open launchpad\n * config tab.\n */\nconst LaunchpadSetupFromRunAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress, runId} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [storageData, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n\n  const {data, loading} = useQuery<ConfigForRunQuery, ConfigForRunQueryVariables>(\n    CONFIG_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const runOrError = data?.runOrError;\n  const run = runOrError?.__typename === 'Run' ? runOrError : null;\n\n  React.useEffect(() => {\n    // Wait until we have a run, then create the session.\n    if (!run) {\n      return;\n    }\n\n    const {runConfigYaml, mode, solidSelection} = run;\n    if (runConfigYaml || mode || solidSelection) {\n      // Name the session after this run ID.\n      const newSession: Partial<IExecutionSession> = {name: `From run ${run.id.slice(0, 8)}`};\n\n      if (typeof runConfigYaml === 'string') {\n        newSession.runConfigYaml = runConfigYaml;\n      }\n      if (typeof mode === 'string') {\n        newSession.mode = mode;\n      }\n      if (solidSelection instanceof Array && solidSelection.length > 0) {\n        newSession.solidSelection = solidSelection as string[];\n      } else if (typeof solidSelection === 'string' && solidSelection) {\n        newSession.solidSelection = [solidSelection];\n      }\n\n      onSave(applyCreateSession(storageData, newSession));\n    }\n  }, [run, storageData, onSave]);\n\n  if (loading) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (!runOrError || runOrError.__typename === 'RunNotFoundError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"No run found\"\n        description=\"The run with this ID does not exist or has been cleaned up.\"\n      />\n    );\n  }\n\n  if (runOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError icon=\"error\" title=\"Python error\" description={runOrError.message} />\n    );\n  }\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n\nconst CONFIG_FOR_RUN_QUERY = gql`\n  query ConfigForRunQuery($runId: ID!) {\n    runOrError(runId: $runId) {\n      ... on Run {\n        id\n        mode\n        runConfigYaml\n        solidSelection\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import qs from 'qs';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const LaunchpadSetupRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissionsForLocation(repoAddress.location);\n  const {repoPath, pipelinePath} = useParams<{repoPath: string; pipelinePath: string}>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return <LaunchpadSetupAllowedRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />;\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nconst LaunchpadSetupAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [data, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n  const queryString = qs.parse(window.location.search, {ignoreQueryPrefix: true});\n\n  React.useEffect(() => {\n    if (queryString.config || queryString.mode || queryString.solidSelection) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof queryString.config === 'string') {\n        newSession.runConfigYaml = queryString.config;\n      }\n      if (typeof queryString.mode === 'string') {\n        newSession.mode = queryString.mode;\n      }\n      if (queryString.solidSelection instanceof Array && queryString.solidSelection.length > 0) {\n        newSession.solidSelection = queryString.solidSelection as string[];\n      } else if (typeof queryString.solidSelection === 'string' && queryString.solidSelection) {\n        newSession.solidSelection = [queryString.solidSelection];\n      }\n      if (typeof queryString.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = queryString.solidSelectionQuery;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, StyledTable, Tag, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {RunStatus} from '../graphql/types';\nimport {timingStringForStatus} from '../runs/RunDetails';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunTime, RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTagQuery, LatestRunTagQueryVariables} from './types/LatestRunTag.types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const LatestRunTag: React.FC<{pipelineName: string; repoAddress: RepoAddress}> = ({\n  pipelineName,\n  repoAddress,\n}) => {\n  const lastRunQuery = useQuery<LatestRunTagQuery, LatestRunTagQueryVariables>(\n    LATEST_RUN_TAG_QUERY,\n    {\n      variables: {\n        runsFilter: {\n          pipelineName,\n          tags: [\n            {\n              key: DagsterTag.RepositoryLabelTag,\n              value: repoAddressAsTag(repoAddress),\n            },\n          ],\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(lastRunQuery, FIFTEEN_SECONDS);\n\n  const run = React.useMemo(() => {\n    const runsOrError = lastRunQuery.data?.pipelineRunsOrError;\n    if (runsOrError && runsOrError.__typename === 'Runs') {\n      return runsOrError.results[0] || null;\n    }\n    return null;\n  }, [lastRunQuery]);\n\n  if (!run) {\n    return null;\n  }\n\n  const stats = {start: run.startTime, end: run.endTime, status: run.status};\n  const intent = () => {\n    switch (run.status) {\n      case RunStatus.SUCCESS:\n        return 'success';\n      case RunStatus.CANCELED:\n      case RunStatus.CANCELING:\n      case RunStatus.FAILURE:\n        return 'danger';\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <Tag intent={intent()}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={run.status} size={10} />\n        Latest run:\n        {stats ? (\n          <Tooltip\n            placement=\"bottom\"\n            content={\n              <StyledTable>\n                <tbody>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>\n                      <Box padding={{right: 16}}>Started</Box>\n                    </td>\n                    <td>\n                      {stats.start ? (\n                        <TimestampDisplay timestamp={stats.start} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>Ended</td>\n                    <td>\n                      {stats.end ? (\n                        <TimestampDisplay timestamp={stats.end} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </StyledTable>\n            }\n          >\n            <Link to={`/runs/${run.id}`}>\n              <RunTime run={run} />\n            </Link>\n          </Tooltip>\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n\nconst LATEST_RUN_TAG_QUERY = gql`\n  query LatestRunTagQuery($runsFilter: RunsFilter) {\n    pipelineRunsOrError(filter: $runsFilter, limit: 1) {\n      ... on PipelineRuns {\n        results {\n          id\n          status\n          ...RunTimeFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, ButtonLink, Colors, DialogFooter, Dialog, Table, Tag} from '@dagster-io/ui';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTag} from './LatestRunTag';\nimport {ScheduleOrSensorTag} from './ScheduleOrSensorTag';\nimport {\n  JobMetadataAssetNodeFragment,\n  JobMetadataFragment,\n  JobMetadataQuery,\n  JobMetadataQueryVariables,\n  RunMetadataFragment,\n} from './types/JobMetadata.types';\n\ntype JobMetadata = {\n  assetNodes: JobMetadataAssetNodeFragment[] | null;\n  job: JobMetadataFragment | null;\n  runsForAssetScan: RunMetadataFragment[];\n};\n\nexport function useJobNavMetadata(repoAddress: RepoAddress, pipelineName: string) {\n  const {data} = useQuery<JobMetadataQuery, JobMetadataQueryVariables>(JOB_METADATA_QUERY, {\n    variables: {\n      runsFilter: {\n        pipelineName,\n        tags: [\n          {\n            key: DagsterTag.RepositoryLabelTag,\n            value: repoAddressAsTag(repoAddress),\n          },\n        ],\n      },\n      params: {\n        pipelineName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  return React.useMemo<JobMetadata>(() => {\n    return {\n      assetNodes: data?.assetNodes || null,\n      job:\n        data?.pipelineOrError && data.pipelineOrError.__typename === 'Pipeline'\n          ? data.pipelineOrError\n          : null,\n      runsForAssetScan:\n        data?.pipelineRunsOrError && data.pipelineRunsOrError.__typename === 'Runs'\n          ? data.pipelineRunsOrError.results\n          : [],\n    };\n  }, [data]);\n}\n\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n}\n\nexport const JobMetadata: React.FC<Props> = (props) => {\n  const {pipelineName, repoAddress} = props;\n  const metadata = useJobNavMetadata(repoAddress, pipelineName);\n\n  return (\n    <>\n      {metadata.job ? (\n        <JobScheduleOrSensorTag job={metadata.job} repoAddress={repoAddress} />\n      ) : null}\n      <LatestRunTag pipelineName={pipelineName} repoAddress={repoAddress} />\n      {metadata.runsForAssetScan ? (\n        <RelatedAssetsTag relatedAssets={getRelatedAssets(metadata)} />\n      ) : null}\n    </>\n  );\n};\n\nconst JobScheduleOrSensorTag: React.FC<{\n  job: JobMetadataFragment;\n  repoAddress: RepoAddress;\n}> = ({job, repoAddress}) => {\n  const matchingSchedules = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.schedules.length) {\n      return job.schedules;\n    }\n    return [];\n  }, [job]);\n\n  const matchingSensors = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.sensors.length) {\n      return job.sensors;\n    }\n    return [];\n  }, [job]);\n\n  return (\n    <ScheduleOrSensorTag\n      schedules={matchingSchedules}\n      sensors={matchingSensors}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\nfunction getRelatedAssets(metadata: JobMetadata) {\n  if (metadata.assetNodes) {\n    return metadata.assetNodes.map((node) => tokenForAssetKey(node.assetKey));\n  }\n\n  return uniq(\n    metadata.runsForAssetScan.flatMap((r) => r.assets.map((a) => tokenForAssetKey(a.key))),\n  );\n}\n\nconst RelatedAssetsTag: React.FC<{relatedAssets: string[]}> = ({relatedAssets}) => {\n  const [open, setOpen] = React.useState(false);\n\n  if (relatedAssets.length === 0) {\n    return null;\n  }\n\n  if (relatedAssets.length === 1) {\n    const key = relatedAssets[0];\n    return (\n      <Tag icon=\"asset\">\n        Asset: <Link to={`/assets/${key}`}>{key}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Tag icon=\"asset\">\n        <ButtonLink\n          color={Colors.Link}\n          onClick={() => setOpen(true)}\n        >{`View ${relatedAssets.length} assets`}</ButtonLink>\n      </Tag>\n      <Dialog\n        title=\"Related assets\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        style={{maxWidth: '80%', minWidth: '500px', width: 'auto'}}\n      >\n        <Box padding={{bottom: 12}}>\n          <Table>\n            <tbody>\n              {relatedAssets.map((key) => (\n                <tr key={key}>\n                  <td>\n                    <Link key={key} to={`/assets/${key}`} style={{wordBreak: 'break-word'}}>\n                      {key}\n                    </Link>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst JOB_METADATA_QUERY = gql`\n  query JobMetadataQuery($params: PipelineSelector!, $runsFilter: RunsFilter!) {\n    pipelineOrError(params: $params) {\n      ... on Pipeline {\n        id\n        ...JobMetadataFragment\n      }\n    }\n    assetNodes(pipeline: $params) {\n      id\n      ...JobMetadataAssetNode\n    }\n    pipelineRunsOrError(filter: $runsFilter, limit: 5) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...RunMetadataFragment\n        }\n      }\n    }\n  }\n\n  fragment JobMetadataAssetNode on AssetNode {\n    id\n    assetKey {\n      path\n    }\n  }\n\n  fragment JobMetadataFragment on Pipeline {\n    id\n    isJob\n    name\n    schedules {\n      id\n      mode\n      ...ScheduleSwitchFragment\n    }\n    sensors {\n      id\n      targets {\n        pipelineName\n        mode\n      }\n      ...SensorSwitchFragment\n    }\n  }\n\n  fragment RunMetadataFragment on PipelineRun {\n    id\n    status\n    assets {\n      id\n      key {\n        path\n      }\n    }\n    ...RunTimeFragment\n  }\n\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {Box, PageHeader, Tabs, Tag, Heading, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {PermissionsMap, PermissionResult, usePermissionsForLocation} from '../app/Permissions';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {JobMetadata} from './JobMetadata';\nimport {RepositoryLink} from './RepositoryLink';\n\ninterface TabConfig {\n  title: string;\n  pathComponent: string;\n  getPermissionsResult?: (permissions: PermissionsMap) => PermissionResult;\n}\n\nconst pipelineTabs: {[key: string]: TabConfig} = {\n  overview: {title: 'Overview', pathComponent: ''},\n  playground: {\n    title: 'Launchpad',\n    pathComponent: 'playground',\n    getPermissionsResult: (permissions: PermissionsMap) => permissions.canLaunchPipelineExecution,\n  },\n  runs: {\n    title: 'Runs',\n    pathComponent: 'runs',\n  },\n  partitions: {\n    title: 'Partitions',\n    pathComponent: 'partitions',\n  },\n};\n\nconst currentOrder = ['overview', 'playground', 'runs', 'partitions'];\n\nfunction tabForPipelinePathComponent(component?: string): TabConfig {\n  const tabList = Object.keys(pipelineTabs);\n  const match =\n    tabList.find((t) => pipelineTabs[t].pathComponent === component) ||\n    tabList.find((t) => pipelineTabs[t].pathComponent === '')!;\n  return pipelineTabs[match];\n}\n\nconst tabForKey = (repoAddress: RepoAddress, isJob: boolean, explorerPath: ExplorerPath) => {\n  const explorerPathForTab = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  // When you click one of the top tabs, it resets the snapshot you may be looking at\n  // in the Definition tab and also clears solids from the path\n  return (key: string) => {\n    const tab = pipelineTabs[key];\n    return {\n      text: tab.title,\n      href: workspacePathFromAddress(\n        repoAddress,\n        `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathForTab}${tab.pathComponent}`,\n      ),\n      getPermissionsResult: tab.getPermissionsResult,\n    };\n  };\n};\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineNav: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const permissions = usePermissionsForLocation(repoAddress.location);\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/pipelines/:selector/:tab?',\n    '/locations/:repoPath/jobs/:selector/:tab?',\n    '/locations/:repoPath/pipeline_or_job/:selector/:tab?',\n  ]);\n\n  const active = tabForPipelinePathComponent(match!.params.tab);\n  const explorerPath = explorerPathFromString(match!.params.selector);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const repoJobEntry = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!repoJobEntry?.isJob;\n  const isAssetJob = !!repoJobEntry?.isAssetJob;\n\n  // If using pipeline:mode tuple (crag flag), check for partition sets that are for this specific\n  // pipeline:mode tuple. Otherwise, just check for a pipeline name match.\n  const partitionSets = repo?.repository.partitionSets || [];\n  const hasLaunchpad = !isAssetJob;\n  const hasPartitionSet = partitionSets.some(\n    (partitionSet) => partitionSet.pipelineName === pipelineName,\n  );\n\n  const tabs = currentOrder\n    .filter(\n      (key) => (hasLaunchpad || key !== 'playground') && (hasPartitionSet || key !== 'partitions'),\n    )\n    .map(tabForKey(repoAddress, isJob, explorerPath));\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        tags={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8, wrap: 'wrap'}}>\n            <Tag icon=\"job\">\n              {isJob ? 'Job in ' : 'Pipeline in '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {snapshotId ? null : (\n              <JobMetadata pipelineName={pipelineName} repoAddress={repoAddress} />\n            )}\n          </Box>\n        }\n        tabs={\n          <Tabs size=\"large\" selectedTabId={active.title}>\n            {tabs.map((tab) => {\n              const {href, text, getPermissionsResult} = tab;\n              let permissionsResult = null;\n              if (getPermissionsResult) {\n                permissionsResult = getPermissionsResult(permissions);\n              }\n              const disabled = !!(permissionsResult && !permissionsResult.enabled);\n              const title =\n                permissionsResult && disabled ? (\n                  <Tooltip content={permissionsResult.disabledReason} placement=\"top\">\n                    {text}\n                  </Tooltip>\n                ) : (\n                  text\n                );\n              return <TabLink key={text} id={text} title={title} disabled={disabled} to={href} />;\n            })}\n          </Tabs>\n        }\n      />\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, CursorPaginationControls, CursorPaginationProps, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {RepositorySelector} from '../graphql/types';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from '../instance/BackfillTable';\nimport {Loading} from '../ui/Loading';\n\nimport {JobBackfillsQuery, JobBackfillsQueryVariables} from './types/JobBackfillsTable.types';\n\nconst BACKFILL_PAGE_SIZE = 10;\n\nexport const JobBackfillsTable = ({\n  partitionSetName,\n  partitionNames,\n  repositorySelector,\n  refetchCounter,\n}: {\n  partitionSetName: string;\n  partitionNames: string[];\n  repositorySelector: RepositorySelector;\n  refetchCounter: number;\n}) => {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = React.useState<string | undefined>();\n  const queryResult = useQuery<JobBackfillsQuery, JobBackfillsQueryVariables>(JOB_BACKFILLS_QUERY, {\n    variables: {\n      partitionSetName,\n      repositorySelector,\n      cursor,\n      limit: BACKFILL_PAGE_SIZE,\n    },\n    partialRefetch: true,\n  });\n\n  const refetch = queryResult.refetch;\n  React.useEffect(() => {\n    refetchCounter && refetch();\n  }, [refetch, refetchCounter]);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (partitionSetOrError.__typename === 'PartitionSetNotFoundError') {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title=\"Partition set not found.\" icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        if (partitionSetOrError.__typename === 'PythonError') {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title=\"An error occurred.\" icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        const {backfills, pipelineName} = partitionSetOrError;\n\n        if (!backfills.length) {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title={`No backfills for ${pipelineName}`} icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        const paginationProps: CursorPaginationProps = {\n          hasPrevCursor: !!cursor,\n          hasNextCursor: backfills && backfills.length === BACKFILL_PAGE_SIZE,\n          popCursor: () => {\n            const nextStack = [...cursorStack];\n            setCursor(nextStack.pop());\n            setCursorStack(nextStack);\n          },\n          advanceCursor: () => {\n            if (cursor) {\n              setCursorStack((current) => [...current, cursor]);\n            }\n            const nextCursor = backfills && backfills[backfills.length - 1].backfillId;\n            if (!nextCursor) {\n              return;\n            }\n            setCursor(nextCursor);\n          },\n          reset: () => {\n            setCursorStack([]);\n            setCursor(undefined);\n          },\n        };\n        return (\n          <>\n            <BackfillTable\n              backfills={backfills}\n              refetch={refetch}\n              showBackfillTarget={false}\n              allPartitions={partitionNames}\n            />\n            <CursorPaginationControls {...paginationProps} />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst JOB_BACKFILLS_QUERY = gql`\n  query JobBackfillsQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $cursor: String\n    $limit: Int\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        pipelineName\n        backfills(cursor: $cursor, limit: $limit) {\n          ...BackfillTableFragment\n        }\n      }\n    }\n  }\n\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport styled from 'styled-components/macro';\n\nimport {colorHash} from '../app/Util';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  partitionNames: string[];\n  jobDataByPartition?: {[partitionName: string]: PointValue};\n  stepDataByPartition?: {[partitionName: string]: {[key: string]: PointValue[]}};\n  title?: string;\n  yLabel?: string;\n  isJob: boolean;\n  hiddenStepKeys?: string[];\n}\n\nexport const PartitionGraph = ({\n  partitionNames,\n  jobDataByPartition,\n  stepDataByPartition,\n  title,\n  yLabel,\n  isJob,\n  hiddenStepKeys,\n}: PartitionGraphProps) => {\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: title},\n          },\n        }\n      : undefined;\n\n    return {\n      title: titleOptions,\n      animation: false,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n      maintainAspectRatio: false,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const buildDatasetData = () => {\n    const jobData: Point[] = [];\n    const stepData = {};\n\n    partitionNames.forEach((partitionName) => {\n      const hidden = !!hiddenPartitions[partitionName];\n      if (jobDataByPartition) {\n        jobData.push({\n          x: partitionName,\n          y: !hidden ? jobDataByPartition[partitionName] : undefined,\n        });\n      }\n\n      if (stepDataByPartition) {\n        const stepDataByKey = stepDataByPartition[partitionName];\n        Object.keys(stepDataByKey || {}).forEach((stepKey) => {\n          if (hiddenStepKeys?.includes(stepKey) || !stepDataByKey[stepKey]) {\n            return;\n          }\n          stepData[stepKey] = [\n            ...(stepData[stepKey] || []),\n            {\n              x: partitionName,\n              y: !hidden ? stepDataByKey[stepKey] : undefined,\n            },\n          ];\n        });\n      }\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      stepData[stepKey] = _fillPartitions(partitionNames, stepData[stepKey]);\n    });\n\n    return {jobData, stepData};\n  };\n\n  const {jobData, stepData} = buildDatasetData();\n  const allLabel = isJob ? 'Total job' : 'Total pipeline';\n  const graphData = {\n    labels: partitionNames,\n    datasets: [\n      ...(!jobDataByPartition || (hiddenStepKeys && hiddenStepKeys.includes(allLabel))\n        ? []\n        : [\n            {\n              label: allLabel,\n              data: jobData,\n              borderColor: Colors.Gray500,\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          ]),\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  // Passing graphData as a closure prevents ChartJS from trying to isEqual, which is fairly\n  // unlikely to save a render and is time consuming given the size of the data structure.\n  // We have a useMemo around the entire <PartitionGraphSet /> and there aren't many extra renders.\n  return (\n    <PartitionGraphContainer>\n      <Line type=\"line\" data={() => graphData} height={300} options={defaultOptions} ref={chart} />\n    </PartitionGraphContainer>\n  );\n};\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    pointData[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: pointData[partitionName],\n  }));\n};\n\nconst PartitionGraphContainer = styled.div`\n  display: flex;\n  color: ${Colors.Gray700};\n  padding: 24px 12px;\n  text-decoration: none;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, Dialog, Icon, Tooltip, Colors, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useViewport} from '../gantt/useViewport';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BackfillPartitionSelector} from './BackfillSelector';\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionState, PartitionStatus, runStatusToPartitionState} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerOpStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {\n  OpJobPartitionSetFragment,\n  OpJobPartitionStatusFragment,\n  PartitionsStatusQuery,\n  PartitionsStatusQueryVariables,\n} from './types/OpJobPartitionsView.types';\nimport {PartitionRuns} from './useMatrixData';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\ntype PartitionStatus = OpJobPartitionStatusFragment;\n\nexport const OpJobPartitionsView: React.FC<{\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery<PartitionsStatusQuery, PartitionsStatusQueryVariables>(\n    PARTITIONS_STATUS_QUERY,\n    {\n      variables: {partitionSetName, repositorySelector},\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (\n          partitionSetOrError.__typename !== 'PartitionSet' ||\n          partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ) {\n          return null;\n        }\n\n        const partitionNames = partitionSetOrError.partitionsOrError.results.map(({name}) => name);\n\n        return (\n          <OpJobPartitionsViewContent\n            partitionNames={partitionNames}\n            partitionSet={partitionSetOrError}\n            repoAddress={repoAddress}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport function usePartitionDurations(partitions: PartitionRuns[]) {\n  return React.useMemo(() => {\n    const stepDurationData: {[name: string]: {[key: string]: (number | undefined)[]}} = {};\n    const runDurationData: {[name: string]: number | undefined} = {};\n\n    partitions.forEach((p) => {\n      if (!p.runsLoaded || p.runs.length === 0) {\n        return;\n      }\n      const sortedRuns = p.runs.sort((a, b) => a.startTime || 0 - (b.startTime || 0));\n      const lastRun = sortedRuns[sortedRuns.length - 1];\n      stepDurationData[p.name] = {};\n      runDurationData[p.name] =\n        lastRun?.endTime && lastRun?.startTime ? lastRun.endTime - lastRun.startTime : undefined;\n\n      lastRun.stepStats.forEach((s) => {\n        stepDurationData[p.name][s.stepKey] = [\n          s.endTime && s.startTime ? s.endTime - s.startTime : undefined,\n        ];\n      });\n    });\n\n    return {runDurationData, stepDurationData};\n  }, [partitions]);\n}\n\nconst OpJobPartitionsViewContent: React.FC<{\n  partitionNames: string[];\n  partitionSet: OpJobPartitionSetFragment;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, partitionNames, repoAddress}) => {\n  const {canLaunchPartitionBackfill} = usePermissionsForLocation(repoAddress.location);\n  const {viewport, containerProps} = useViewport();\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showSteps, setShowSteps] = React.useState(false);\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const [backfillRefetchCounter, setBackfillRefetchCounter] = React.useState(0);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter: [],\n    repositorySelector,\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !showSteps,\n  });\n\n  React.useEffect(() => {\n    if (viewport.width && !showSteps) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, showSteps, setPageSize]);\n\n  const selectedPartitions = showSteps\n    ? partitionNames.slice(\n        Math.max(0, partitionNames.length - 1 - offset - pageSize),\n        partitionNames.length - offset,\n      )\n    : partitionNames;\n\n  const runDurationData: {[name: string]: number | undefined} = {};\n  const stepDurationData = usePartitionDurations(partitions).stepDurationData;\n\n  // Note: This view reads \"run duration\" from the `partitionStatusesOrError` GraphQL API,\n  // rather than looking at the duration of the most recent run returned in `partitions` above\n  // so that the latter can be loaded when you click \"Show per-step status\" only.\n\n  const statusData: {[name: string]: PartitionState} = {};\n  (partitionSet.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ? partitionSet.partitionStatusesOrError.results\n    : []\n  ).forEach((p) => {\n    statusData[p.partitionName] = runStatusToPartitionState(p.runStatus);\n    if (selectedPartitions.includes(p.partitionName)) {\n      runDurationData[p.partitionName] = p.runDuration || undefined;\n    }\n  });\n\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, zIndex: 1000}}\n        title={`Launch ${partitionSet.pipelineName} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <BackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            pipelineName={partitionSet.pipelineName}\n            onCancel={() => setShowBackfillSetup(false)}\n            onLaunch={(_backfillId, _stepQuery) => {\n              setBackfillRefetchCounter(backfillRefetchCounter + 1);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowSteps(!showSteps)} active={showBackfillSetup}>\n            {showSteps ? 'Hide per-step status' : 'Show per-step status'}\n          </Button>\n          {canLaunchPartitionBackfill.enabled ? (\n            <Button\n              onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n              icon={<Icon name=\"add_circle\" />}\n              active={showBackfillSetup}\n            >\n              Launch backfill...\n            </Button>\n          ) : (\n            <Tooltip content={canLaunchPartitionBackfill.disabledReason}>\n              <Button icon={<Icon name=\"add_circle\" />} disabled>\n                Launch backfill...\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={partitionNames.length} label=\"Total partitions\" />\n        <CountBox\n          count={partitionNames.filter((x) => statusData[x] === PartitionState.FAILURE).length}\n          label=\"Failed partitions\"\n        />\n        <CountBox\n          count={partitionNames.filter((x) => !statusData[x]).length}\n          label=\"Missing partitions\"\n        />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={partitionNames}\n            partitionStateForKey={(name) => statusData[name]}\n            selected={showSteps ? selectedPartitions : undefined}\n            selectionWindowSize={pageSize}\n            onClick={(partitionName) => {\n              const maxIdx = partitionNames.length - 1;\n              const selectedIdx = partitionNames.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n              if (!showSteps) {\n                setShowSteps(true);\n              }\n            }}\n            tooltipMessage=\"Click to view per-step status\"\n          />\n        </div>\n        {showSteps ? (\n          <Box margin={{top: 16}}>\n            <PartitionPerOpStatus\n              partitionNames={partitionNames}\n              partitions={partitions}\n              pipelineName={partitionSet.pipelineName}\n              repoAddress={repoAddress}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={showSteps ? selectedPartitions : partitionNames}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      {showSteps ? (\n        <>\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <Subheading>Step duration</Subheading>\n          </Box>\n          <Box margin={24}>\n            <PartitionGraph\n              isJob={true}\n              title=\"Execution time by partition\"\n              yLabel=\"Execution time (secs)\"\n              partitionNames={selectedPartitions}\n              stepDataByPartition={stepDurationData}\n            />\n          </Box>\n        </>\n      ) : null}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSet.name}\n          repositorySelector={repositorySelector}\n          partitionNames={partitionNames}\n          refetchCounter={backfillRefetchCounter}\n        />\n      </Box>\n    </div>\n  );\n};\n\nexport const CountBox: React.FC<{\n  count: number;\n  label: string;\n}> = ({count, label}) => (\n  <Box padding={16} style={{flex: 1}} border={{side: 'right', width: 1, color: Colors.KeylineGray}}>\n    <div style={{fontSize: 18, marginBottom: 4}}>\n      <strong>{count}</strong>\n    </div>\n    <div>{label}</div>\n  </Box>\n);\n\nconst PARTITIONS_STATUS_QUERY = gql`\n  query PartitionsStatusQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        ...OpJobPartitionSet\n      }\n    }\n  }\n\n  fragment OpJobPartitionSet on PartitionSet {\n    id\n    name\n    pipelineName\n    partitionsOrError {\n      ... on Partitions {\n        results {\n          name\n        }\n      }\n    }\n    partitionStatusesOrError {\n      __typename\n      ... on PartitionStatuses {\n        results {\n          id\n          ...OpJobPartitionStatus\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment OpJobPartitionStatus on PartitionStatus {\n    id\n    partitionName\n    runStatus\n    runDuration\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Subheading} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {useAssetGraphData} from '../asset-graph/useAssetGraphData';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {\n  mergedAssetHealth,\n  explodePartitionKeysInSelection,\n  isTimeseriesDimension,\n} from '../assets/MultipartitioningSupport';\nimport {usePartitionHealthData} from '../assets/usePartitionHealthData';\nimport {useViewport} from '../gantt/useViewport';\nimport {RepositorySelector} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {CountBox, usePartitionDurations} from './OpJobPartitionsView';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionState, PartitionStatus} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerAssetStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {allPartitionsRange} from './SpanRepresentation';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\nexport const AssetJobPartitionsView: React.FC<{\n  pipelineName: string;\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress, pipelineName}) => {\n  const {viewport, containerProps} = useViewport();\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const assetGraph = useAssetGraphData('', {\n    pipelineSelector: {\n      pipelineName,\n      repositoryName: repoAddress.name,\n      repositoryLocationName: repoAddress.location,\n    },\n  });\n\n  const assetHealth = usePartitionHealthData(assetGraph.graphAssetKeys);\n\n  const {total, missing, merged} = React.useMemo(() => {\n    const merged = mergedAssetHealth(assetHealth.filter((h) => h.dimensions.length > 0));\n    const selection = merged.dimensions.map((d) => ({\n      selectedKeys: d.partitionKeys,\n      selectedRanges: [allPartitionsRange(d)],\n      dimension: d,\n    }));\n    const allKeys = explodePartitionKeysInSelection(selection, merged.stateForKey);\n\n    return {\n      merged,\n      total: allKeys.length,\n      missing: allKeys.filter((p) => p.state === PartitionState.MISSING).length,\n    };\n  }, [assetHealth]);\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showAssets, setShowAssets] = React.useState(false);\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, setPageSize]);\n\n  let dimensionIdx = merged.dimensions.findIndex(isTimeseriesDimension);\n  if (dimensionIdx === -1) {\n    dimensionIdx = 0; // may as well show something\n  }\n\n  const dimension = merged.dimensions[dimensionIdx] ? merged.dimensions[dimensionIdx] : null;\n  const dimensionKeys = dimension?.partitionKeys || [];\n\n  const selectedDimensionKeys = dimensionKeys.slice(\n    Math.max(0, dimensionKeys.length - 1 - offset - pageSize),\n    dimensionKeys.length - offset,\n  );\n  return (\n    <div>\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowAssets(!showAssets)}>\n            {showAssets ? 'Hide per-asset status' : 'Show per-asset status'}\n          </Button>\n          <LaunchAssetExecutionButton\n            scope={{all: assetGraph.graphQueryItems.map((g) => g.node), skipAllTerm: true}}\n            preferredJobName={pipelineName}\n          />\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={total} label=\"Total partitions\" />\n        <CountBox count={missing} label=\"Missing partitions\" />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={dimensionKeys}\n            splitPartitions={dimension ? !isTimeseriesDimension(dimension) : false}\n            partitionStateForKey={(key) => merged.stateForSingleDimension(dimensionIdx, key)}\n            selected={selectedDimensionKeys}\n            selectionWindowSize={pageSize}\n            tooltipMessage=\"Click to view per-asset status\"\n            onClick={(partitionName) => {\n              const maxIdx = dimensionKeys.length - 1;\n              const selectedIdx = dimensionKeys.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n            }}\n          />\n        </div>\n        {showAssets && dimension && (\n          <Box margin={{top: 16}}>\n            <PartitionPerAssetStatus\n              rangeDimensionIdx={dimensionIdx}\n              rangeDimension={dimension}\n              assetHealth={assetHealth}\n              assetQueryItems={assetGraph.graphQueryItems}\n              pipelineName={pipelineName}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        )}\n      </Box>\n      {showAssets && (\n        <AssetJobPartitionGraphs\n          repositorySelector={repositorySelector}\n          pipelineName={pipelineName}\n          partitionSetName={partitionSetName}\n          multidimensional={(merged?.dimensions.length || 0) > 1}\n          dimensionName={dimension ? dimension.name : null}\n          dimensionKeys={dimensionKeys}\n          selected={selectedDimensionKeys}\n          offset={offset}\n          pageSize={pageSize}\n        />\n      )}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSetName}\n          repositorySelector={repositorySelector}\n          partitionNames={dimensionKeys}\n          refetchCounter={1}\n        />\n      </Box>\n    </div>\n  );\n};\n\nexport const AssetJobPartitionGraphs: React.FC<{\n  repositorySelector: RepositorySelector;\n  pipelineName: string;\n  partitionSetName: string;\n  multidimensional: boolean;\n  dimensionName: string | null;\n  dimensionKeys: string[];\n  selected: string[];\n  pageSize: number;\n  offset: number;\n}> = ({\n  repositorySelector,\n  dimensionKeys,\n  dimensionName,\n  selected,\n  pageSize,\n  partitionSetName,\n  multidimensional,\n  pipelineName,\n  offset,\n}) => {\n  const partitions = usePartitionStepQuery({\n    partitionSetName,\n    partitionTagName: multidimensional\n      ? `${DagsterTag.Partition}/${dimensionName}`\n      : DagsterTag.Partition,\n    partitionNames: dimensionKeys,\n    repositorySelector,\n    pageSize,\n    runsFilter: [],\n    jobName: pipelineName,\n    offset,\n    skipQuery: !dimensionName,\n  });\n\n  const {stepDurationData, runDurationData} = usePartitionDurations(partitions);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Step durations</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          stepDataByPartition={stepDurationData}\n        />\n      </Box>\n    </>\n  );\n};\n","import {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {usePartitionNameForPipeline} from '../assets/usePartitionNameForPipeline';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetJobPartitionsView} from './AssetJobPartitionsView';\nimport {OpJobPartitionsView} from './OpJobPartitionsView';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const pipelineInfo = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!pipelineInfo?.isJob;\n  const isAssetJob = !!pipelineInfo?.isAssetJob;\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(params);\n\n  const {partitionSet, partitionSetError} = usePartitionNameForPipeline(repoAddress, pipelineName);\n\n  if (!partitionSet && !partitionSetError) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n  if (partitionSetError) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Partitions\" description={partitionSetError.message} />\n      </Box>\n    );\n  }\n\n  if (!partitionSet) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Partitions\"\n          description={\n            <div>\n              There are no partition sets defined for {isJob ? 'job' : 'pipeline'}{' '}\n              <code>{pipelineName}</code>.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return isAssetJob ? (\n    <AssetJobPartitionsView\n      pipelineName={pipelineName}\n      partitionSetName={partitionSet.name}\n      repoAddress={repoAddress}\n    />\n  ) : (\n    <OpJobPartitionsView partitionSetName={partitionSet.name} repoAddress={repoAddress} />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, useLocation, useParams} from 'react-router-dom';\n\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOrJobDisambiguationRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const location = useLocation();\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n\n  const {pipelineName: pipelineOrJobName} = explorerPathFromString(pipelinePath);\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineOrJobName);\n  const {pathname, search} = location;\n\n  const replacedPath = pathname.replace('/pipeline_or_job/', isJob ? '/jobs/' : '/pipelines/');\n\n  return <Redirect to={`${replacedPath}${search}`} />;\n};\n","import * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {useJobTitle} from './useJobTitle';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, explorerPath.pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, action: 'push' | 'replace') => {\n      history[action]({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n        ),\n      });\n    },\n    [history, location.search, repoAddress, isJob],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (!node.jobName || !node.opNames.length || !node.repoAddress) {\n        // This op has no definition in any loaded repository (source asset).\n        // The best we can do is show the asset page. This will still be mostly empty,\n        // but there can be a description.\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n        return;\n      }\n\n      // Note: asset location can be in another job AND in another repo! Need\n      // to build a full job URL using the `node` info here.\n      history.replace({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          node.repoAddress,\n          `/jobs/${explorerPathToString({\n            ...explorerPath,\n            opNames: [tokenForAssetKey(node.assetKey)],\n            opsQuery: '',\n            pipelineName: node.jobName!,\n          })}`,\n        ),\n      });\n    },\n    [explorerPath, history, location.search],\n  );\n\n  return (\n    <PipelineExplorerContainer\n      repoAddress={repoAddress}\n      explorerPath={explorerPath}\n      onChangeExplorerPath={onChangeExplorerPath}\n      onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n    />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {JobLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchpadSetupFromRunRoot} from '../launchpad/LaunchpadSetupFromRunRoot';\nimport {LaunchpadSetupRoot} from '../launchpad/LaunchpadSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOrJobDisambiguationRoot} from './PipelineOrJobDisambiguationRoot';\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route path=\"/locations/:repoPath/pipeline_or_job/:pipelinePath/(/?.*)\">\n          <PipelineOrJobDisambiguationRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n        >\n          <LaunchpadSetupRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup-from-run/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup-from-run/:runId',\n          ]}\n        >\n          <LaunchpadSetupFromRunRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground',\n            '/locations/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n        >\n          <JobLaunchpad repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs',\n            '/locations/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n        >\n          <PipelineRunsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/partitions',\n            '/locations/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n        >\n          <PipelinePartitionsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/overview',\n            '/locations/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect to={`/locations/${props.match.url.replace(/\\/overview$/i, '')}`} />\n          )}\n        />\n        <Route path={['/locations/:repoPath/pipelines/(/?.*)', '/locations/:repoPath/jobs/(/?.*)']}>\n          <PipelineOverviewRoot repoAddress={repoAddress} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  Heading,\n  Page,\n  PageHeader,\n  SplitPanelContainer,\n  Table,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ResourceRootQuery} from './types/ResourceRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nconst remapName = (inName: string): string => {\n  if (inName === 'StringSourceType') {\n    return 'String';\n  } else if (inName === 'IntSourceType') {\n    return 'Int';\n  } else if (inName === 'BoolSourceType') {\n    return 'Bool';\n  }\n  return inName;\n};\n\nexport const ResourceRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n\n  const {resourceName} = useParams<{resourceName: string}>();\n\n  useDocumentTitle(`Resource: ${resourceName}`);\n\n  const resourceSelector = {\n    ...repoAddressToSelector(repoAddress),\n    resourceName,\n  };\n  const queryResult = useQuery<ResourceRootQuery>(RESOURCE_ROOT_QUERY, {\n    variables: {\n      resourceSelector,\n    },\n  });\n\n  return (\n    <Page style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>{resourceName}</Heading>} />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({topLevelResourceDetailsOrError}) => {\n          if (topLevelResourceDetailsOrError.__typename !== 'ResourceDetails') {\n            let message: string | null = null;\n            if (topLevelResourceDetailsOrError.__typename === 'PythonError') {\n              message = topLevelResourceDetailsOrError.message;\n            }\n\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load resource.</div>\n                    {message && (\n                      <ButtonLink\n                        color={Colors.Link}\n                        underline=\"always\"\n                        onClick={() => {\n                          showCustomAlert({\n                            title: 'Python error',\n                            body: message,\n                          });\n                        }}\n                      >\n                        View error\n                      </ButtonLink>\n                    )}\n                  </Group>\n                }\n              />\n            );\n          }\n\n          const configuredValues = Object.fromEntries(\n            topLevelResourceDetailsOrError.configuredValues.map((cv) => [cv.key, cv.value]),\n          );\n\n          return (\n            <div style={{height: '100%', display: 'flex'}}>\n              <SplitPanelContainer\n                identifier=\"explorer\"\n                firstInitialPercent={70}\n                firstMinSize={400}\n                first={\n                  <Table $monospaceFont={false}>\n                    <thead>\n                      <tr>\n                        <th style={{width: 120}}>Key</th>\n                        <th style={{width: 90}}>Type</th>\n                        <th style={{width: 90}}>Value</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {topLevelResourceDetailsOrError.configFields.map((field) => {\n                        const defaultValue = field.defaultValueAsJson;\n                        const actualValue =\n                          field.name in configuredValues\n                            ? configuredValues[field.name]\n                            : defaultValue;\n\n                        const isDefault = defaultValue === actualValue;\n\n                        return (\n                          <tr key={field.name}>\n                            <td>\n                              <Box flex={{direction: 'column', gap: 4, alignItems: 'flex-start'}}>\n                                <strong>{field.name}</strong>\n                                <div style={{fontSize: 12, color: Colors.Gray700}}>\n                                  {field.description}\n                                </div>\n                              </Box>\n                            </td>\n                            <td>{remapName(field.configTypeKey)}</td>\n                            <td>\n                              <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                                <Tooltip\n                                  content={<>Default: {defaultValue}</>}\n                                  canShow={!isDefault}\n                                >\n                                  {actualValue}\n                                </Tooltip>\n                                {isDefault && <Tag>Default</Tag>}\n                              </Box>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n                }\n                second={\n                  <RightInfoPanel>\n                    <RightInfoPanelContent>\n                      <Box\n                        flex={{gap: 4, direction: 'column'}}\n                        margin={{left: 24, right: 12, vertical: 16}}\n                      >\n                        <Heading>{resourceName}</Heading>\n                      </Box>\n\n                      <SidebarSection title=\"Definition\">\n                        <Box padding={{vertical: 16, horizontal: 24}}>\n                          <Tag icon=\"resource\">\n                            Resource in{' '}\n                            <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                          </Tag>\n                        </Box>\n                      </SidebarSection>\n                      {topLevelResourceDetailsOrError.description ? (\n                        <SidebarSection title=\"Description\">\n                          <Box padding={{vertical: 16, horizontal: 24}}>\n                            {topLevelResourceDetailsOrError.description}\n                          </Box>\n                        </SidebarSection>\n                      ) : null}\n                    </RightInfoPanelContent>\n                  </RightInfoPanel>\n                }\n              />\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nexport const RightInfoPanel = styled.div`\n  position: relative;\n\n  height: 100%;\n  min-height: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: ${Colors.White};\n`;\n\nexport const RightInfoPanelContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst RESOURCE_ROOT_QUERY = gql`\n  query ResourceRootQuery($resourceSelector: ResourceSelector!) {\n    topLevelResourceDetailsOrError(resourceSelector: $resourceSelector) {\n      ... on ResourceDetails {\n        name\n        description\n        configFields {\n          name\n          description\n          configTypeKey\n          isRequired\n          defaultValueAsJson\n        }\n        configuredValues {\n          key\n          value\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, DialogFooter, Dialog, Colors, DialogBody} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {InstigationSelector} from './graphql/types';\nimport {HistoryTickFragment} from './instigation/types/TickHistory.types';\nimport {EventTypeColumn, TimestampColumn, Row} from './runs/LogsRowComponents';\nimport {\n  ColumnWidthsProvider,\n  ColumnWidthsContext,\n  HeadersContainer,\n  HeaderContainer,\n  Header,\n} from './runs/LogsScrollingTableHeader';\nimport {TimestampDisplay} from './schedules/TimestampDisplay';\nimport {\n  TickLogEventFragment,\n  TickLogEventsQuery,\n  TickLogEventsQueryVariables,\n} from './types/TickLogDialog.types';\n\nexport const TickLogDialog: React.FC<{\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({tick, instigationSelector, onClose}) => {\n  const {data} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(TICK_LOG_EVENTS_QUERY, {\n    variables: {instigationSelector, timestamp: tick.timestamp},\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!events}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      <DialogBody>\n        {events && events.length ? (\n          <TickLogsTable events={events} />\n        ) : (\n          <Box\n            flex={{justifyContent: 'center', alignItems: 'center'}}\n            style={{flex: 1, color: Colors.Gray600}}\n          >\n            No logs available\n          </Box>\n        )}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst TickLogsTable: React.FC<{events: TickLogEventFragment[]}> = ({events}) => {\n  return (\n    <div style={{overflow: 'hidden', borderBottom: '0.5px solid #ececec', flex: 1}}>\n      <ColumnWidthsProvider onWidthsChanged={() => {}}>\n        <Headers />\n        {events.map((event, idx) => (\n          <TickLogRow event={event} key={idx} />\n        ))}\n      </ColumnWidthsProvider>\n    </div>\n  );\n};\n\nconst Headers = () => {\n  const widths = React.useContext(ColumnWidthsContext);\n  return (\n    <HeadersContainer>\n      <Header\n        width={widths.eventType}\n        onResize={(width) => widths.onChange({...widths, eventType: width})}\n      >\n        Event Type\n      </Header>\n      <HeaderContainer style={{flex: 1}}>Info</HeaderContainer>\n      <Header\n        handleSide=\"left\"\n        width={widths.timestamp}\n        onResize={(width) => widths.onChange({...widths, timestamp: width})}\n      >\n        Timestamp\n      </Header>\n    </HeadersContainer>\n  );\n};\n\nconst TickLogRow: React.FC<{event: TickLogEventFragment}> = ({event}) => {\n  return (\n    <Row level={event.level} highlighted={false}>\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{event.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {event.message}\n      </Box>\n      <TimestampColumn time={event.timestamp} />\n    </Row>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...TickLogEvent\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment TickLogEvent on InstigationEvent {\n    message\n    timestamp\n    level\n  }\n`;\n","import {Colors} from '@dagster-io/ui';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../graphql/types';\n\nimport {NextTickForHistoryFragment, HistoryTickFragment} from './types/TickHistory.types';\n\ntype FutureTick = NextTickForHistoryFragment;\ntype InstigationTick = HistoryTickFragment;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.Blue500,\n  [InstigationTickStatus.FAILURE]: Colors.Red500,\n  [InstigationTickStatus.STARTED]: Colors.Gray400,\n  [InstigationTickStatus.SKIPPED]: Colors.Yellow500,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp!)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp! <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp!, y: 0});\n    tickColors.push(Colors.Gray200);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.Gray100,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.Gray200,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.Gray100,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label(tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            const cursorLabel = tick.cursor ? `Cursor: ${tick.cursor}\\n` : '';\n\n            // returning an array of strings ensures that each string is displayed on its own line\n            // in the tooltip\n\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return cursorLabel ? [tick.skipReason, cursorLabel] : tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return cursorLabel ? [...tick.runIds, cursorLabel] : tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return cursorLabel ? [...tick.originRunIds, cursorLabel] : tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return cursorLabel ? [tick.error.message, cursorLabel] : tick.error.message;\n            }\n            return cursorLabel;\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n\n    maintainAspectRatio: false,\n  };\n\n  return <Line type=\"line\" data={graphData} height={150} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {Button, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {copyValue} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationSelector, InstigationTickStatus} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {FailedRunList, RunList, TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\n\nexport const TickDetailsDialog: React.FC<{\n  timestamp: number | undefined;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({timestamp, instigationSelector, onClose}) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, timestamp: timestamp || 0},\n    skip: !timestamp,\n    partialRefetch: true,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!tick}\n      onClose={onClose}\n      style={{\n        width: tick && tick.status === InstigationTickStatus.SKIPPED ? '50vw' : '90vw',\n      }}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      {tick ? (\n        <DialogBody>\n          {tick.status === InstigationTickStatus.SUCCESS ? (\n            tick.runIds.length ? (\n              <RunList runIds={tick.runIds} />\n            ) : (\n              <FailedRunList originRunIds={tick.originRunIds} />\n            )\n          ) : null}\n          {tick.status === InstigationTickStatus.SKIPPED ? (\n            <Group direction=\"row\" spacing={16}>\n              <TickTag tick={tick} />\n              <span>{tick.skipReason || 'No skip reason provided'}</span>\n            </Group>\n          ) : tick.status === InstigationTickStatus.FAILURE && tick.error ? (\n            <PythonErrorInfo error={tick.error} />\n          ) : undefined}\n        </DialogBody>\n      ) : null}\n      <DialogFooter>\n        <Button\n          icon={<Icon name=\"copy_to_clipboard\" />}\n          onClick={(e) => copyValue(e, window.location.href)}\n        >\n          Copy Link\n        </Button>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Spinner,\n  Table,\n  Subheading,\n  FontFamily,\n  Icon,\n  IconWrapper,\n} from '@dagster-io/ui';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {TickLogDialog} from '../TickLogDialog';\nimport {SharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ONE_MONTH, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationTickStatus, InstigationType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {RunStatusLink, RUN_STATUS_FRAGMENT} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {\n  HistoryTickFragment,\n  TickHistoryQuery,\n  TickHistoryQueryVariables,\n} from './types/TickHistory.types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: false,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        queryState[state.toLowerCase()] = String(states[state]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          status[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n  const copyToClipboard = useCopyToClipboard();\n  const {flagSensorScheduleLogging} = useFeatureFlags();\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = Object.keys(shownStates)\n    .filter((status) => shownStates[status])\n    .map((status) => status as InstigationTickStatus);\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {ticks, instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box margin={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Runs</th>\n              {flagSensorScheduleLogging ? <th style={{width: 180}}>Logs</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick) => (\n              <tr key={tick.id}>\n                <td>\n                  <TimestampDisplay\n                    timestamp={tick.timestamp}\n                    timeFormat={{showTimezone: false, showSeconds: true}}\n                  />\n                </td>\n                <td>\n                  <TickTag tick={tick} />\n                </td>\n                {instigationType === InstigationType.SENSOR ? (\n                  <td style={{width: 120}}>\n                    {tick.cursor ? (\n                      <Box flex={{direction: 'row', alignItems: 'center'}}>\n                        <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                          <>{truncate(tick.cursor || '')}</>\n                        </Box>\n                        <CopyButton\n                          onClick={() => {\n                            copyToClipboard(tick.cursor || '');\n                            SharedToaster.show({\n                              message: <div>Copied value</div>,\n                              intent: 'success',\n                            });\n                          }}\n                        >\n                          <Icon name=\"assignment\" />\n                        </CopyButton>\n                      </Box>\n                    ) : (\n                      <>&mdash;</>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  {tick.runIds.length ? (\n                    tick.runs.map((run) => (\n                      <>\n                        <RunStatusLink key={run.id} run={run} />\n                      </>\n                    ))\n                  ) : (\n                    <>&mdash;</>\n                  )}\n                </td>\n                {flagSensorScheduleLogging ? (\n                  <td>\n                    {tick.logKey ? <a onClick={() => setLogTick(tick)}>View logs</a> : <>&mdash;</>}\n                  </td>\n                ) : null}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n}) => {\n  const [selectedTime, setSelectedTime] = useQueryPersistedState<number | undefined>({\n    encode: (timestamp) => ({time: timestamp}),\n    decode: (qs) => (qs['time'] ? Number(qs['time']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {instigationSelector, limit: 15},\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, pollingPaused ? ONE_MONTH : 1000);\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <>\n        <Box\n          padding={{top: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  const {ticks, nextTick} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTime(tick ? tick.timestamp : undefined);\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        timestamp={selectedTime}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      </Box>\n    </>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          ...NextTickForHistory\n        }\n        ticks(dayRange: $dayRange, limit: $limit, cursor: $cursor, statuses: $statuses) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment NextTickForHistory on DryRunInstigationTick {\n    timestamp\n  }\n\n  fragment HistoryTick on InstigationTick {\n    id\n    status\n    timestamp\n    cursor\n    skipReason\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray600};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.Link};\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Code,\n  Heading,\n  Mono,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  refreshState: QueryRefreshState;\n}> = (props) => {\n  const {repoAddress, schedule, refreshState} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const copyToClipboard = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          </Box>\n        }\n        tags={\n          <>\n            <Tag icon=\"schedule\">\n              Schedule in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {futureTicks.results.length && running ? (\n              <Tag icon=\"timer\">\n                Next tick:{' '}\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp!}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Tag>\n            ) : null}\n            <Box flex={{display: 'inline-flex'}} margin={{top: 2}}>\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.Gray400, hover: Colors.Gray600}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Box>\n          </>\n        }\n        right={<QueryRefreshCountdown refreshState={refreshState} />}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {schedule.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{schedule.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <TimestampDisplay\n                    timestamp={latestTick.timestamp}\n                    timezone={executionTimezone}\n                    timeFormat={TIME_FORMAT}\n                  />\n                  <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n                </Group>\n              ) : (\n                'Schedule has never run'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>{isJob ? 'Job' : 'Pipeline'}</td>\n            <td>\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Partition set</td>\n            <td>\n              {partitionSet ? (\n                <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n              ) : (\n                'None'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Schedule</td>\n            <td>\n              {cronSchedule ? (\n                <Group direction=\"row\" spacing={8}>\n                  <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n                  <Code>({cronSchedule})</Code>\n                </Group>\n              ) : (\n                <div>&mdash;</div>\n              )}\n            </td>\n          </tr>\n          {executionTimezone ? (\n            <tr>\n              <td>Execution timezone</td>\n              <td>{executionTimezone}</td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {REPOSITORY_INFO_FRAGMENT} from '../workspace/RepositoryInformation';\n\nexport const SCHEDULE_FRAGMENT = gql`\n  fragment ScheduleFragment on Schedule {\n    id\n    name\n    cronSchedule\n    executionTimezone\n    pipelineName\n    solidSelection\n    mode\n    description\n    partitionSet {\n      id\n      name\n    }\n    scheduleState {\n      id\n      ...InstigationStateFragment\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n\nexport const REPOSITORY_SCHEDULES_FRAGMENT = gql`\n  fragment RepositorySchedulesFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleFragment\n    }\n    ...RepositoryInfoFragment\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${REPOSITORY_INFO_FRAGMENT}\n`;\n\nexport const SCHEDULES_ROOT_QUERY = gql`\n  query SchedulesRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        ...RepositorySchedulesFragment\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${REPOSITORY_SCHEDULES_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Tabs, Tab, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable} from '../instigation/TickHistory';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {\n  PreviousRunsForScheduleQuery,\n  PreviousRunsForScheduleQueryVariables,\n  ScheduleRootQuery,\n  ScheduleRootQueryVariables,\n} from './types/ScheduleRoot.types';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {scheduleName} = useParams<{scheduleName: string}>();\n\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n\n  const queryResult = useQuery<ScheduleRootQuery, ScheduleRootQueryVariables>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <ScheduleDetails\n              repoAddress={repoAddress}\n              schedule={scheduleOrError}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={scheduleOrError.name} />\n            ) : (\n              <SchedulePreviousRuns\n                repoAddress={repoAddress}\n                schedule={scheduleOrError}\n                tabs={tabs}\n              />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const SchedulePreviousRuns: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({schedule, highlightedIds, tabs}) => {\n  const queryResult = useQuery<PreviousRunsForScheduleQuery, PreviousRunsForScheduleQueryVariables>(\n    PREVIOUS_RUNS_FOR_SCHEDULE_QUERY,\n    {\n      variables: {\n        limit: 20,\n        filter: {\n          pipelineName: schedule.pipelineName,\n          tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n        },\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  } else if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SCHEDULER\") {\n          id\n          healthy\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on Error {\n        message\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    jobOriginId\n    name\n    description\n    minIntervalSeconds\n    nextTick {\n      timestamp\n    }\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({sensor, highlightedIds, tabs}) => {\n  const {data} = useQuery<PreviousRunsForSensorQuery, PreviousRunsForSensorQueryVariables>(\n    PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n          tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n        },\n      },\n    },\n  );\n\n  if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nexport const NoTargetSensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = () => {\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.Gray400}}>\n        <Box margin={{vertical: 64}}>\n          <NonIdealState\n            icon=\"sensors\"\n            title=\"No runs to display\"\n            description=\"This sensor does not target a pipeline or job.\"\n          />\n        </Box>\n      </div>\n    </Group>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tab, Tabs, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable, TickHistoryTimeline} from '../instigation/TickHistory';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery, SensorRootQueryVariables} from './types/SensorRoot.types';\n\nexport const SensorRoot: React.FC<{repoAddress: RepoAddress}> = ({repoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename === 'SensorNotFoundError') {\n          return (\n            <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"error\"\n                title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n              />\n            </Box>\n          );\n        } else if (sensorOrError.__typename === 'PythonError') {\n          return <PythonErrorInfo error={sensorOrError} />;\n        } else if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <SensorDetails\n              repoAddress={repoAddress}\n              sensor={sensorOrError}\n              daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SensorInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} />\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={sensorOrError.name} />\n            ) : (\n              <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, PageHeader, Tag, Heading} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from '../pipelines/GraphExplorer';\nimport {explorerPathFromString, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {Loading} from '../ui/Loading';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RepoAddress} from './types';\nimport {GraphExplorerRootQuery, GraphExplorerRootQueryVariables} from './types/GraphRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const path = explorerPathFromString(params[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title = path.opNames.length > 1 ? path.opNames[path.opNames.length - 2] : path.pipelineName;\n  useDocumentTitle(`Graph: ${title}`);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <PageHeader\n        title={<Heading>{title}</Heading>}\n        tags={\n          <Tag icon=\"schema\">\n            Graph in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n      />\n      <Box\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        style={{minHeight: 0, flex: 1, display: 'flex'}}\n      >\n        <GraphExplorerRoot repoAddress={repoAddress} />\n      </Box>\n    </div>\n  );\n};\n\nconst GraphExplorerRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n  const history = useHistory();\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const graphResult = useQuery<GraphExplorerRootQuery, GraphExplorerRootQueryVariables>(\n    GRAPH_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        graphSelector: {\n          repositoryName: repoAddress?.name || '',\n          repositoryLocationName: repoAddress?.location || '',\n          graphName: explorerPath.pipelineName,\n        },\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<GraphExplorerRootQuery> queryResult={graphResult}>\n      {({graphOrError: result}) => {\n        if (result.__typename === 'GraphNotFoundError') {\n          return (\n            <NonIdealState icon=\"error\" title=\"Graph not found\" description={result.message} />\n          );\n        }\n        if (result.__typename === 'PythonError') {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" description={result.message} />;\n        }\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={(path, mode) => {\n              const fullPath = workspacePathFromAddress(\n                props.repoAddress,\n                `/graphs/${explorerPathToString(path)}`,\n              );\n              if (mode === 'push') {\n                history.push(fullPath);\n              } else {\n                history.replace(fullPath);\n              }\n            }}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={true}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst GRAPH_EXPLORER_ROOT_QUERY = gql`\n  query GraphExplorerRootQuery(\n    $graphSelector: GraphSelector\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    graphOrError(selector: $graphSelector) {\n      ... on Graph {\n        id\n        name\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on GraphNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper, Tag} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {Container, Inner, Row} from '../ui/VirtualizedTable';\n\nimport {VirtualizedAssetHeader, VirtualizedAssetRow} from './VirtualizedAssetRow';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ntype Asset = {id: string; groupName: string | null; assetKey: {path: string[]}};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  assets: Asset[];\n}\n\ntype RowType =\n  | {type: 'group'; name: string; assetCount: number}\n  | {type: 'asset'; id: string; path: string[]};\n\nconst UNGROUPED_NAME = 'UNGROUPED';\nconst ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY = 'assets-virtualized-expansion-state';\n\nexport const VirtualizedRepoAssetTable: React.FC<Props> = ({repoAddress, assets}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const repoKey = repoAddressAsHumanString(repoAddress);\n  const {expandedKeys, onToggle} = useAssetGroupExpansionState(\n    `${repoKey}-${ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY}`,\n  );\n\n  const grouped: {[key: string]: Asset[]} = React.useMemo(() => {\n    const groups = {};\n    for (const asset of assets) {\n      const groupName = asset.groupName || UNGROUPED_NAME;\n      const assetsForGroup = groups[groupName] || [];\n      groups[groupName] = [...assetsForGroup, asset];\n    }\n    return groups;\n  }, [assets]);\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.keys(grouped).forEach((groupName) => {\n      const assetsForGroup = grouped[groupName];\n      flat.push({type: 'group', name: groupName, assetCount: assetsForGroup.length});\n      if (expandedKeys.includes(groupName)) {\n        assetsForGroup.forEach(({id, assetKey}) => {\n          flat.push({type: 'asset', id, path: assetKey.path});\n        });\n      }\n    });\n    return flat;\n  }, [grouped, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'group' ? 48 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedAssetHeader nameLabel=\"Asset name\" />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'group' ? (\n                <GroupNameRow\n                  repoAddress={repoAddress}\n                  groupName={row.name}\n                  assetCount={row.assetCount}\n                  expanded={expandedKeys.includes(row.name)}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                />\n              ) : (\n                <VirtualizedAssetRow\n                  showCheckboxColumn={false}\n                  key={key}\n                  // todo dish: Fix this\n                  type=\"asset\"\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  showRepoColumn={false}\n                  height={size}\n                  start={start}\n                  // todo dish: Fix this\n                  checked={false}\n                  onToggleChecked={() => {}}\n                  onWipe={() => {}}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport const GroupNameRow: React.FC<{\n  repoAddress: RepoAddress;\n  groupName: string;\n  assetCount: number;\n  expanded: boolean;\n  height: number;\n  start: number;\n  onToggle: (groupName: string) => void;\n}> = ({repoAddress, groupName, assetCount, expanded, height, start, onToggle}) => {\n  return (\n    <ClickableRow\n      $height={height}\n      $start={start}\n      onClick={() => onToggle(groupName)}\n      $open={expanded}\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.code === 'Space' || e.code === 'Enter') {\n          e.preventDefault();\n          onToggle(groupName);\n        }\n      }}\n    >\n      <Box\n        background={Colors.Gray50}\n        flex={{direction: 'row', alignItems: 'center', gap: 8, justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        style={{height: '100%'}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"asset_group\" />\n          {groupName === UNGROUPED_NAME ? (\n            <div>Ungrouped assets</div>\n          ) : (\n            <>\n              <strong>{groupName}</strong>\n              {groupName !== UNGROUPED_NAME ? (\n                <Box margin={{left: 12}}>\n                  <Link to={workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`)}>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                      <span>View lineage</span>\n                      <Icon name=\"open_in_new\" size={16} color={Colors.Link} />\n                    </Box>\n                  </Link>\n                </Box>\n              ) : null}\n            </>\n          )}\n        </Box>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n          <Tag>{assetCount === 1 ? '1 asset' : `${assetCount} assets`}</Tag>\n          <Icon name=\"arrow_drop_down\" size={20} />\n        </Box>\n      </Box>\n    </ClickableRow>\n  );\n};\n\nconst ClickableRow = styled(Row)<{$open: boolean}>`\n  cursor: pointer;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of asset groups.\n */\nexport const useAssetGroupExpansionState = (storageKey: string) => {\n  const {basePath} = React.useContext(AppContext);\n  const [expandedKeys, setExpandedKeys] = useStateWithStorage<string[]>(\n    `${basePath}:dagit.${storageKey}`,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (groupName: string) => {\n      setExpandedKeys((current) => {\n        const nextExpandedKeys = new Set(current || []);\n        if (nextExpandedKeys.has(groupName)) {\n          nextExpandedKeys.delete(groupName);\n        } else {\n          nextExpandedKeys.add(groupName);\n        }\n        return Array.from(nextExpandedKeys);\n      });\n    },\n    [setExpandedKeys],\n  );\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n    }),\n    [expandedKeys, onToggle],\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"assets\" title=\"Assets\" to={workspacePathFromAddress(repoAddress, '/assets')} />\n        <TabLink id=\"jobs\" title=\"Jobs\" to={workspacePathFromAddress(repoAddress, '/jobs')} />\n        <TabLink\n          id=\"schedules\"\n          title=\"Schedules\"\n          to={workspacePathFromAddress(repoAddress, '/schedules')}\n        />\n        <TabLink\n          id=\"sensors\"\n          title=\"Sensors\"\n          to={workspacePathFromAddress(repoAddress, '/sensors')}\n        />\n        <TabLink id=\"graphs\" title=\"Graphs\" to={workspacePathFromAddress(repoAddress, '/graphs')} />\n        <TabLink id=\"ops\" title=\"Ops\" to={workspacePathFromAddress(repoAddress, '/ops')} />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {PageHeader, Box, Heading, Colors, Button, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\n\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  tab: string;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n}\n\nexport const WorkspaceHeader = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, tab, refreshState, queryData} = props;\n\n  return (\n    <PageHeader\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Heading>\n            <Link to=\"/locations\" style={{color: Colors.Dark}}>\n              Deployment\n            </Link>\n          </Heading>\n          <Heading>/</Heading>\n          <Heading style={{color: Colors.Gray600}}>{repoAddressAsHumanString(repoAddress)}</Heading>\n        </Box>\n      }\n      tabs={\n        <WorkspaceTabs\n          repoAddress={repoAddress}\n          tab={tab}\n          refreshState={refreshState}\n          queryData={queryData}\n        />\n      }\n      right={\n        <ReloadRepositoryLocationButton location={repoAddress.location}>\n          {({tryReload, reloading}) => {\n            return (\n              <Button\n                onClick={() => tryReload()}\n                loading={reloading}\n                icon={<Icon name=\"refresh\" />}\n              >\n                Reload definitions\n              </Button>\n            );\n          }}\n        </ReloadRepositoryLocationButton>\n      }\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetNodeSearch} from '../assets/useAssetSearch';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {VirtualizedRepoAssetTable} from './VirtualizedRepoAssetTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceAssetsQuery,\n  WorkspaceAssetsQueryVariables,\n} from './types/WorkspaceAssetsRoot.types';\n\nexport const WorkspaceAssetsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Assets: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceAssetsQuery, WorkspaceAssetsQueryVariables>(\n    WORKSPACE_ASSETS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const assetNodes = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.assetNodes;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = useAssetNodeSearch(searchValue, assetNodes);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading assets…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                <div>\n                  No assets matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={`No assets were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedRepoAssetTable repoAddress={repoAddress} assets={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"assets\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by asset name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_ASSETS_QUERY = gql`\n  query WorkspaceAssetsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          groupName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleGraphQuery, SingleGraphQueryVariables} from './types/VirtualizedGraphTable.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nexport type Graph = {name: string; path: string; description: string | null};\n\ninterface Props {\n  graphs: Graph[];\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedGraphTable: React.FC<Props> = ({repoAddress, graphs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: graphs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <Box\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '100%',\n          height: '32px',\n          fontSize: '12px',\n          color: Colors.Gray600,\n        }}\n      >\n        <HeaderCell>Graph</HeaderCell>\n      </Box>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Graph = graphs[index];\n              return (\n                <GraphRow\n                  key={key}\n                  name={row.name}\n                  description={row.description}\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\ninterface GraphRowProps {\n  name: string;\n  path: string;\n  description: string | null;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nconst GraphRow = (props: GraphRowProps) => {\n  const {name, path, description, repoAddress, start, height} = props;\n\n  const [queryGraph, queryResult] = useLazyQuery<SingleGraphQuery, SingleGraphQueryVariables>(\n    SINGLE_GRAPH_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          graphName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryGraph);\n  const {data} = queryResult;\n\n  const displayedDescription = React.useMemo(() => {\n    if (description) {\n      return description;\n    }\n    if (data?.graphOrError.__typename === 'Graph') {\n      return data.graphOrError.description;\n    }\n    return null;\n  }, [data, description]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Box flex={{direction: 'column'}}>\n            <div style={{whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, path)}>{name}</Link>\n            </div>\n            {displayedDescription ? (\n              <div\n                style={{\n                  maxWidth: '100%',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                <Caption\n                  style={{\n                    color: Colors.Gray500,\n                    whiteSpace: 'nowrap',\n                  }}\n                >\n                  {displayedDescription}\n                </Caption>\n              </div>\n            ) : null}\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 100%;\n  height: 100%;\n`;\n\nconst SINGLE_GRAPH_QUERY = gql`\n  query SingleGraphQuery($selector: GraphSelector!) {\n    graphOrError(selector: $selector) {\n      ... on Graph {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {Graph, VirtualizedGraphTable} from './VirtualizedGraphTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceGraphsQuery,\n  WorkspaceGraphsQueryVariables,\n} from './types/WorkspaceGraphsRoot.types';\n\nexport const WorkspaceGraphsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Graphs: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceGraphsQuery, WorkspaceGraphsQueryVariables>(\n    WORSKPACE_GRAPHS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const graphs = React.useMemo(() => {\n    const repo = data?.repositoryOrError;\n    if (!repo || repo.__typename !== 'Repository') {\n      return [];\n    }\n\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n\n    const items: Graph[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return graphs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [graphs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading graphs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching graphs\"\n              description={\n                <div>\n                  No graphs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No graphs\"\n            description={`No graphs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedGraphTable repoAddress={repoAddress} graphs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"graphs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by graph name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORSKPACE_GRAPHS_QUERY = gql`\n  query WorkspaceGraphsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          name\n          isJob\n          graphName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedJobHeader, VirtualizedJobRow} from './VirtualizedJobRow';\nimport {RepoAddress} from './types';\n\ntype Job = {isJob: boolean; name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  jobs: Job[];\n}\n\nexport const VirtualizedJobTable: React.FC<Props> = ({repoAddress, jobs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: jobs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Job = jobs[index];\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {VirtualizedJobTable} from './VirtualizedJobTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceJobsQuery, WorkspaceJobsQueryVariables} from './types/WorkspaceJobsRoot.types';\n\nexport const WorkspaceJobsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Jobs: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceJobsQuery, WorkspaceJobsQueryVariables>(\n    WORKSPACE_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const jobs = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.pipelines;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return jobs.filter(\n      ({name}) => !isHiddenAssetGroupJob(name) && name.toLocaleLowerCase().includes(searchToLower),\n    );\n  }, [jobs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                <div>\n                  No jobs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={`No jobs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedJobTable repoAddress={repoAddress} jobs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"jobs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nexport const WORKSPACE_JOBS_QUERY = gql`\n  query WorkspaceJobsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        pipelines {\n          id\n          name\n          isJob\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {OpNode, OP_NODE_DEFINITION_FRAGMENT} from '../graph/OpNode';\nimport {layoutOp} from '../graph/asyncGraphLayout';\n\nimport {OpCardSolidDefinitionFragment} from './types/OpCard.types';\n\ninterface OpCardProps {\n  definition: OpCardSolidDefinitionFragment;\n}\n\nexport const OpCard: React.FC<OpCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutOp(\n    {\n      name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n      definition: {\n        description: null,\n        assetNodes: [],\n      },\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <Box padding={24}>\n      <OpCardContainer style={{height: layout.bounds.height}}>\n        <OpNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </OpCardContainer>\n    </Box>\n  );\n};\n\nexport const OP_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment OpCardSolidDefinitionFragment on ISolidDefinition {\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n    ...OpNodeDefinitionFragment\n  }\n\n  ${OP_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst OpCardContainer = styled.div`\n  flex: 1;\n  max-width: 450px;\n  position: relative;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarOpDefinition,\n  SIDEBAR_OP_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarOpDefinition';\nimport {SidebarOpInvocationInfo} from '../pipelines/SidebarOpHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpCard, OP_CARD_SOLID_DEFINITION_FRAGMENT} from './OpCard';\nimport {UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables} from './types/OpDetailsRoot.types';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarOpInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables>(\n    USED_SOLID_DETAILS_QUERY,\n    {\n      variables: {\n        name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <OpCard definition={usedSolid.definition} />\n            <SidebarOpDefinition\n              definition={usedSolid.definition}\n              showingSubgraph={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...OpCardSolidDefinitionFragment\n            ...SidebarOpDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${OP_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_OP_DEFINITION_FRAGMENT}\n`;\n\nexport const OpDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n  FontFamily,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {OpDetailScrollContainer, UsedSolidDetails} from './OpDetailsRoot';\nimport {OpTypeSignature, OP_TYPE_SIGNATURE_FRAGMENT} from './OpTypeSignature';\nimport {OpsRootQuery, OpsRootQueryVariables, OpsRootUsedSolidFragment} from './types/OpsRoot.types';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = OpsRootUsedSolidFragment;\n\nfunction searchSuggestionsForOps(solids: Solid[]): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: 'job',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => !i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'pipeline',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const OpsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n  useDocumentTitle('Ops');\n\n  const {name} = useParams<{name?: string}>();\n  const {repoAddress} = props;\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<OpsRootQuery, OpsRootQueryVariables>(OPS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <div style={{height: '100%'}}>\n      <Loading queryResult={queryResult}>\n        {({repositoryOrError}) => {\n          if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n            return (\n              <OpsRootWithData\n                {...props}\n                name={name}\n                repoAddress={repoAddress}\n                usedSolids={repositoryOrError.usedSolids}\n              />\n            );\n          }\n          return null;\n        }}\n      </Loading>\n    </div>\n  );\n};\n\nconst OpsRootWithData: React.FC<Props & {name?: string; usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n\n  const {q, typeExplorer} = qs.parse(location.search, {ignoreQueryPrefix: true});\n  const suggestions = searchSuggestionsForOps(usedSolids);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${qs.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickOp = (defName: string) => {\n    history.replace(workspacePathFromAddress(repoAddress, `/ops/${defName}?${qs.stringify({q})}`));\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickOp(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipeline_or_job/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier=\"ops\"\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <OpListColumnContainer>\n            <Box\n              padding={{vertical: 12, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder=\"Filter by name or input/output type...\"\n              />\n            </Box>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <OpList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickOp={onClickOp}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </OpListColumnContainer>\n        }\n        second={\n          selected ? (\n            <OpDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </OpDetailScrollContainer>\n          ) : (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"No op selected\"\n                description=\"Select an op to see its definition and invocations\"\n              />\n            </Box>\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface OpListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickOp: (name: string) => void;\n}\n\nconst OpList: React.FC<OpListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <Container>\n      <List\n        width={props.width}\n        height={props.height}\n        rowCount={props.items.length}\n        rowHeight={cache.current.rowHeight}\n        scrollToIndex={selectedIndex}\n        className=\"solids-list\"\n        rowRenderer={({parent, index, key, style}) => {\n          const solid = props.items[index];\n          return (\n            <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n              <OpListItem\n                style={style}\n                selected={solid === props.selected}\n                onClick={() => props.onClickOp(solid.definition.name)}\n              >\n                <OpName>{solid.definition.name}</OpName>\n                <OpTypeSignature definition={solid.definition} />\n              </OpListItem>\n            </CellMeasurer>\n          );\n        }}\n        overscanRowCount={10}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .solids-list:focus {\n    outline: none;\n  }\n`;\n\nconst OPS_ROOT_QUERY = gql`\n  query OpsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          ...OpsRootUsedSolid\n        }\n      }\n    }\n  }\n\n  fragment OpsRootUsedSolid on UsedSolid {\n    definition {\n      name\n      ...OpTypeSignatureFragment\n    }\n    invocations {\n      pipeline {\n        id\n        isJob\n        name\n      }\n    }\n  }\n\n  ${OP_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst OpListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.Gray100 : Colors.White)};\n  box-shadow: ${({selected}) => (selected ? Colors.HighlightGreen : 'transparent')} 4px 0 0 inset,\n    ${Colors.KeylineGray} 0 -1px 0 inset;\n  color: ${Colors.Gray800};\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 24px;\n  user-select: none;\n\n  & > code.bp3-code {\n    color: ${Colors.Gray800};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst OpName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst OpListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OpsRoot} from '../ops/OpsRoot';\n\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\nexport const WorkspaceOpsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Ops: ${repoName}`);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader repoAddress={repoAddress} tab=\"ops\" />\n      <OpsRoot repoAddress={repoAddress} />\n    </Box>\n  );\n};\n","import {Alert, Box, NonIdealState, Page, PageHeader, Table, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useParams, useRouteMatch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {isThisThingAJob, optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPathForHuman} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\nexport const WorkspacePipelineRoot = () => {\n  useTrackPageView();\n\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const entireMatch = useRouteMatch(['/locations/pipelines/(/?.*)', '/locations/jobs/(/?.*)']);\n  const location = useLocation();\n\n  const toAppend = entireMatch!.params[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(pipelinePath);\n  const {loading, options} = useRepositoryOptions();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No matching jobs\"\n          description={\n            <div>\n              <div>\n                <strong>{pipelineName}</strong>\n              </div>\n              was not found in any repositories in this workspace.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const match = reposWithMatch[0];\n    const repoAddress = optionToRepoAddress(match);\n    const isJob = isThisThingAJob(match, pipelineName);\n    const to = workspacePathFromAddress(\n      repoAddress,\n      `/${isJob ? 'jobs' : 'pipelines'}/${toAppend}${search}`,\n    );\n    return <Redirect to={to} />;\n  }\n\n  const anyPipelines = reposWithMatch.some((repo) => !isThisThingAJob(repo, pipelineName));\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon=\"job\"\n        description={\n          anyPipelines\n            ? 'Job / pipeline in multiple code locations'\n            : 'Job in multiple code locations'\n        }\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {anyPipelines ? (\n                <>\n                  Jobs or pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  code locations.\n                </>\n              ) : (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple code locations.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Code location</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPathForHuman(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link\n                    to={workspacePath(\n                      name,\n                      location,\n                      `/${\n                        isThisThingAJob(repository, pipelineName) ? 'jobs' : 'pipelines'\n                      }/${pipelineName}`,\n                    )}\n                  >\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n","import {useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {InstigationType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SCHEDULES_ROOT_QUERY} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {SchedulesNextTicks} from './SchedulesNextTicks';\nimport {SchedulesTable} from './SchedulesTable';\nimport {SchedulesRootQuery, SchedulesRootQueryVariables} from './types/ScheduleUtils.types';\n\nexport const SchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n  useDocumentTitle('Schedules');\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SchedulesRootQuery, SchedulesRootQueryVariables>(\n    SCHEDULES_ROOT_QUERY,\n    {\n      variables: {\n        repositorySelector,\n        instigationType: InstigationType.SCHEDULE,\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {repositoryOrError, unloadableInstigationStatesOrError, instance} = result;\n        let schedulesSection = null;\n        const repoName = repoAddressAsHumanString(repoAddress);\n\n        if (repositoryOrError.__typename === 'PythonError') {\n          schedulesSection = <PythonErrorInfo error={repositoryOrError} />;\n        } else if (repositoryOrError.__typename === 'RepositoryNotFoundError') {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Definitions not found\"\n              description={`Could not load ${repoName}.`}\n            />\n          );\n        } else if (!repositoryOrError.schedules.length) {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"schedule\"\n              title=\"No schedules found\"\n              description={\n                <p>\n                  {repoName} does not have any schedules defined. Visit the{' '}\n                  <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\">\n                    scheduler documentation\n                  </a>{' '}\n                  for more information about scheduling runs in Dagster.\n                </p>\n              }\n            />\n          );\n        } else {\n          schedulesSection = repositoryOrError.schedules.length > 0 && (\n            <>\n              <SchedulesTable schedules={repositoryOrError.schedules} repoAddress={repoAddress} />\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n              >\n                <Subheading>Scheduled ticks</Subheading>\n              </Box>\n              <SchedulesNextTicks repos={[repositoryOrError]} />\n            </>\n          );\n        }\n\n        return (\n          <>\n            <SchedulerInfo\n              daemonHealth={instance.daemonHealth}\n              padding={{horizontal: 24, vertical: 16}}\n            />\n            {schedulesSection}\n            {unloadableInstigationStatesOrError.__typename === 'PythonError' ? (\n              <PythonErrorInfo error={unloadableInstigationStatesOrError} />\n            ) : (\n              <UnloadableSchedules scheduleStates={unloadableInstigationStatesOrError.results} />\n            )}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n","import {Box, Colors, Icon, Table, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {InstigatedRunStatus} from '../instigation/InstigationUtils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {humanizeSensorInterval} from './SensorDetails';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment.types';\n\nexport const SensorsTable: React.FC<{\n  repoAddress: RepoAddress;\n  sensors: SensorFragment[];\n}> = ({repoAddress, sensors}) => {\n  const lastTick = 'Status of the last tick: One of `Started`, `Skipped`, `Requested`, `Failed`';\n  const lastRun = 'The status of the last run requested by this sensor';\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '60px'}}></th>\n          <th>Sensor Name</th>\n          <th style={{width: '15%'}}>Frequency</th>\n          <th style={{width: '10%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last tick\n              <Tooltip position=\"top\" content={lastTick}>\n                <Icon name=\"info\" color={Colors.Gray500} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: '25%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last Run\n              <Tooltip position=\"top\" content={lastRun}>\n                <Icon name=\"info\" color={Colors.Gray500} />\n              </Tooltip>\n            </Box>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sensors.map((sensor) => (\n          <SensorRow key={sensor.name} repoAddress={repoAddress} sensor={sensor} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst SensorRow: React.FC<{\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}> = ({repoAddress, sensor}) => {\n  const repo = useRepository(repoAddress);\n  const {name, sensorState} = sensor;\n  const {ticks} = sensorState;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  return (\n    <tr key={name}>\n      <td>\n        <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n      </td>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>{name}</Link>\n          </span>\n          {sensor.targets && sensor.targets.length ? (\n            <Box flex={{direction: 'column', gap: 2}}>\n              {sensor.targets.map((target) => (\n                <PipelineReference\n                  key={target.pipelineName}\n                  showIcon\n                  size=\"small\"\n                  pipelineName={target.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                />\n              ))}\n            </Box>\n          ) : null}\n          {sensor.metadata.assetKeys && sensor.metadata.assetKeys.length ? (\n            <Box flex={{direction: 'column', gap: 2}}>\n              {sensor.metadata.assetKeys.map((key) => (\n                <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n              ))}\n            </Box>\n          ) : null}\n        </Box>\n      </td>\n      <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {InstigationType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorsTable} from './SensorsTable';\nimport {SensorsRootQuery, SensorsRootQueryVariables} from './types/SensorsRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const SensorsRoot = (props: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Sensors');\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  const queryResult = useQuery<SensorsRootQuery, SensorsRootQueryVariables>(SENSORS_ROOT_QUERY, {\n    variables: {\n      repositorySelector,\n      instigationType: InstigationType.SENSOR,\n    },\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {sensorsOrError, unloadableInstigationStatesOrError, instance} = result;\n        const content = () => {\n          if (sensorsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={sensorsOrError} />;\n          } else if (unloadableInstigationStatesOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={unloadableInstigationStatesOrError} />;\n          } else if (sensorsOrError.__typename === 'RepositoryNotFoundError') {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"error\"\n                  title=\"Definitions not found\"\n                  description={`Could not load definitions for ${repoName}`}\n                />\n              </Box>\n            );\n          } else if (!sensorsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"sensors\"\n                  title=\"No sensors defined\"\n                  description={\n                    <p>\n                      {repoName} does not have any sensors defined. Visit the{' '}\n                      <a\n                        href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        sensors documentation\n                      </a>{' '}\n                      for more information about creating sensors in Dagster.\n                    </p>\n                  }\n                />\n              </Box>\n            );\n          } else {\n            return (\n              <>\n                {sensorsOrError.results.length > 0 && (\n                  <SensorInfo\n                    daemonHealth={instance.daemonHealth}\n                    padding={{horizontal: 24, vertical: 16}}\n                  />\n                )}\n                <SensorsTable repoAddress={repoAddress} sensors={sensorsOrError.results} />\n                <UnloadableSensors sensorStates={unloadableInstigationStatesOrError.results} />\n              </>\n            );\n          }\n        };\n\n        return <div>{content()}</div>;\n      }}\n    </Loading>\n  );\n};\n\nconst SENSORS_ROOT_QUERY = gql`\n  query SensorsRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    sensorsOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Sensors {\n        results {\n          id\n          ...SensorFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {RepositoryLink} from '../nav/RepositoryLink';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryAssetsListQuery,\n  RepositoryAssetsListQueryVariables,\n} from './types/RepositoryAssetsList.types';\n\nconst REPOSITORY_ASSETS_LIST_QUERY = gql`\n  query RepositoryAssetsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opNames\n          description\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryAssetsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryAssetsListQuery,\n    RepositoryAssetsListQueryVariables\n  >(REPOSITORY_ASSETS_LIST_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const assetsForTable = React.useMemo(\n    () =>\n      (repo?.__typename === 'Repository' ? [...repo.assetNodes] : []).sort((a, b) =>\n        displayNameForAssetKey(a.assetKey).localeCompare(displayNameForAssetKey(b.assetKey)),\n      ),\n    [repo],\n  );\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !assetsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!assetsForTable.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No assets found\"\n          description={`No @asset definitions for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Asset Key</th>\n          <th>Defined In</th>\n        </tr>\n      </thead>\n      <tbody>\n        {assetsForTable.map((asset) => (\n          <tr key={asset.id}>\n            <td>\n              <Box flex={{direction: 'column', gap: 4}}>\n                <Link to={assetDetailsPathForKey(asset.assetKey)}>\n                  {displayNameForAssetKey(asset.assetKey)}\n                </Link>\n                <Description>{asset.description}</Description>\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'column'}}>\n                <RepositoryLink\n                  repoAddress={{\n                    name: asset.repository.name,\n                    location: asset.repository.location.name,\n                  }}\n                />\n              </Box>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryGraphsListQuery,\n  RepositoryGraphsListQueryVariables,\n} from './types/RepositoryGraphsList.types';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_GRAPHS_LIST_QUERY = gql`\n  query RepositoryGraphsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          description\n          name\n          isJob\n          graphName\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\ninterface Item {\n  name: string;\n  description: string | null;\n  path: string;\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryGraphsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryGraphsListQuery,\n    RepositoryGraphsListQueryVariables\n  >(REPOSITORY_GRAPHS_LIST_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const graphsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n    const items: Item[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n      repoAddress,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n          repoAddress,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !graphsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!graphsForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"schema\"\n          title=\"No graphs found\"\n          description={`${repoName} does not have any graphs defined.`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Graph</th>\n        </tr>\n      </thead>\n      <tbody>\n        {graphsForTable.map(({name, description, path, repoAddress}) => (\n          <tr key={`${name}-${repoAddressAsHumanString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>{name}</Link>\n                <Description>{description}</Description>\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Table, Caption} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineReference} from './PipelineReference';\nimport {PipelineTableFragment} from './types/PipelineTable.types';\n\ntype PipelineForTable = {\n  pipelineOrJob: PipelineTableFragment;\n  repoAddress: RepoAddress;\n};\n\ninterface Props {\n  pipelinesOrJobs: PipelineForTable[];\n  showRepo: boolean;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const {pipelinesOrJobs, showRepo} = props;\n\n  const anyPipelines = pipelinesOrJobs.some(({pipelineOrJob}) => !pipelineOrJob.isJob);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%', minWidth: '400px'}}>\n            {anyPipelines ? 'Job or Pipeline' : 'Job'}\n          </th>\n          <th>Schedules</th>\n          <th>Sensors</th>\n          <th style={{whiteSpace: 'nowrap'}}>Recent runs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pipelinesOrJobs.map(({pipelineOrJob, repoAddress}) => (\n          <tr key={`${pipelineOrJob.name}-${repoAddressAsHumanString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <PipelineReference\n                  isJob={pipelineOrJob.isJob}\n                  pipelineName={pipelineOrJob.name}\n                  pipelineHrefContext={repoAddress}\n                  truncationThreshold={80}\n                />\n                {showRepo ? <Caption>{repoAddressAsHumanString(repoAddress)}</Caption> : null}\n                <Description>{pipelineOrJob.description}</Description>\n              </Group>\n            </td>\n            <td>\n              {pipelineOrJob.schedules?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.schedules.map((schedule) => (\n                    <Link\n                      key={schedule.name}\n                      to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n                    >\n                      {schedule.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              {pipelineOrJob.sensors?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.sensors.map((sensor) => (\n                    <Link\n                      key={sensor.name}\n                      to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n                    >\n                      {sensor.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              <Group direction=\"row\" spacing={4} alignItems=\"center\">\n                {pipelineOrJob.runs.map((run) => (\n                  <RunStatusWithStats\n                    key={run.id}\n                    runId={run.runId}\n                    status={run.status}\n                    size={12}\n                  />\n                ))}\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n\nexport const PIPELINE_TABLE_FRAGMENT = gql`\n  fragment PipelineTableFragment on Pipeline {\n    id\n    description\n    isJob\n    name\n    modes {\n      id\n      name\n    }\n    runs(limit: 5) {\n      id\n      mode\n      runId\n      status\n    }\n    schedules {\n      id\n      name\n      mode\n    }\n    sensors {\n      id\n      name\n      targets {\n        mode\n        pipelineName\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineTable, PIPELINE_TABLE_FRAGMENT} from '../pipelines/PipelineTable';\n\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryPipelinesListQuery,\n  RepositoryPipelinesListQueryVariables,\n} from './types/RepositoryPipelinesList.types';\n\nconst REPOSITORY_PIPELINES_LIST_QUERY = gql`\n  query RepositoryPipelinesListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        pipelines {\n          id\n          ...PipelineTableFragment\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n\n  ${PIPELINE_TABLE_FRAGMENT}\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  display: 'jobs' | 'pipelines';\n}\n\nexport const RepositoryPipelinesList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {display, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryPipelinesListQuery,\n    RepositoryPipelinesListQueryVariables\n  >(REPOSITORY_PIPELINES_LIST_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const pipelinesForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    return repo.pipelines\n      .filter((pipelineOrJob) => !isHiddenAssetGroupJob(pipelineOrJob.name))\n      .map((pipelineOrJob) => ({\n        pipelineOrJob,\n        repoAddress,\n      }))\n      .filter(({pipelineOrJob}) =>\n        display === 'jobs' ? pipelineOrJob.isJob : !pipelineOrJob.isJob,\n      );\n  }, [display, repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (error || !pipelinesForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load pipelines\"\n          description={`Could not load pipelines for ${repoName}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!pipelinesForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"job\"\n          title={display === 'jobs' ? 'No jobs found' : 'No pipelines found'}\n          description={\n            <div>\n              {display === 'jobs'\n                ? `${repoName} does not have any jobs defined.`\n                : `${repoName} does not have any pipelines defined.`}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return <PipelineTable pipelinesOrJobs={pipelinesForTable} showRepo={false} />;\n};\n","import {Box, PageHeader, Tabs, Tag, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {OpsRoot} from '../ops/OpsRoot';\nimport {SchedulesRoot} from '../schedules/SchedulesRoot';\nimport {SensorsRoot} from '../sensors/SensorsRoot';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepositoryAssetsList} from './RepositoryAssetsList';\nimport {RepositoryGraphsList} from './RepositoryGraphsList';\nimport {RepositoryPipelinesList} from './RepositoryPipelinesList';\nimport {useRepository} from './WorkspaceContext';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const WorkspaceRepoRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const {tab} = useParams<{tab?: string}>();\n\n  const path = repoAddressAsHumanString(repoAddress);\n  const repo = useRepository(repoAddress);\n\n  const anyPipelines = React.useMemo(() => {\n    return repo?.repository.pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n  }, [repo]);\n\n  const tabs = React.useMemo(() => {\n    const tabList = [\n      {\n        text: 'Assets',\n        href: workspacePathFromAddress(repoAddress, '/assets'),\n      },\n      {text: 'Jobs', href: workspacePathFromAddress(repoAddress, '/jobs')},\n      anyPipelines\n        ? {text: 'Pipelines', href: workspacePathFromAddress(repoAddress, '/pipelines')}\n        : null,\n      {text: 'Graphs', href: workspacePathFromAddress(repoAddress, '/graphs')},\n      {\n        text: 'Ops',\n        href: workspacePathFromAddress(repoAddress, '/ops'),\n      },\n      {text: 'Schedules', href: workspacePathFromAddress(repoAddress, '/schedules')},\n      {text: 'Sensors', href: workspacePathFromAddress(repoAddress, '/sensors')},\n    ];\n\n    return tabList.filter(Boolean) as {text: string; href: string}[];\n  }, [anyPipelines, repoAddress]);\n\n  const activeTab = () => {\n    switch (tab) {\n      case 'schedules':\n        return 'Schedules';\n      case 'sensors':\n        return 'Sensors';\n      case 'solids':\n        return 'Solids';\n      case 'ops':\n        return 'Ops';\n      case 'graphs':\n        return 'Graphs';\n      case 'jobs':\n        return 'Jobs';\n      case 'pipelines':\n        return 'Pipelines';\n      case 'assets':\n        return 'Assets';\n      default:\n        return 'Jobs';\n    }\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%'}}>\n      <PageHeader\n        title={<Heading>{path}</Heading>}\n        tags={<Tag icon=\"folder\">Repository</Tag>}\n        tabs={\n          <Tabs size=\"small\" selectedTabId={activeTab()}>\n            {tabs.map(({href, text}) => (\n              <TabLink key={text} id={text} title={text} to={href} />\n            ))}\n          </Tabs>\n        }\n      />\n      <Container>\n        <Switch>\n          <Route path=\"/locations/:repoPath/schedules\">\n            <SchedulesRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/sensors\">\n            <SensorsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/assets(/?.*)\">\n            <RepositoryAssetsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/ops/:name?\">\n            <OpsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route\n            path=\"/locations/:repoPath/solids/:name?\"\n            render={(props) => <Redirect to={props.match.url.replace(/\\/solids\\/?/, '/ops/')} />}\n          />\n          <Route path=\"/locations/:repoPath/pipelines\">\n            <RepositoryPipelinesList display=\"pipelines\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/jobs\">\n            <RepositoryPipelinesList display=\"jobs\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/graphs\" exact>\n            <RepositoryGraphsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/locations/:repoPath/(.*)?\" render={() => <Redirect to={tabs[0].href} />} />\n        </Switch>\n      </Container>\n    </Box>\n  );\n};\n\nconst Container = styled.div`\n  flex: 1;\n  flex-grow: 1;\n  min-height: 0;\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedScheduleHeader, VirtualizedScheduleRow} from './VirtualizedScheduleRow';\nimport {RepoAddress} from './types';\n\ntype Schedule = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  schedules: Schedule[];\n}\n\nexport const VirtualizedScheduleTable: React.FC<Props> = ({repoAddress, schedules}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: schedules.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Schedule = schedules[index];\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {VirtualizedScheduleTable} from './VirtualizedScheduleTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceSchedulesQuery,\n  WorkspaceSchedulesQueryVariables,\n} from './types/WorkspaceSchedulesRoot.types';\n\nexport const WorkspaceSchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Schedules: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceSchedulesQuery, WorkspaceSchedulesQueryVariables>(\n    WORKSPACE_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const schedules = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.schedules;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [schedules, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                <div>\n                  No schedules matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={`No schedules were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedScheduleTable repoAddress={repoAddress} schedules={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"schedules\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SCHEDULES_QUERY = gql`\n  query WorkspaceSchedulesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        schedules {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from './VirtualizedSensorRow';\nimport {RepoAddress} from './types';\ntype Sensor = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensors: Sensor[];\n}\n\nexport const VirtualizedSensorTable: React.FC<Props> = ({repoAddress, sensors}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: sensors.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Sensor = sensors[index];\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {VirtualizedSensorTable} from './VirtualizedSensorTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceSensorsQuery,\n  WorkspaceSensorsQueryVariables,\n} from './types/WorkspaceSensorsRoot.types';\n\nexport const WorkspaceSensorsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Sensors: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceSensorsQuery, WorkspaceSensorsQueryVariables>(\n    WORKSPACE_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const sensors = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.sensors;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [sensors, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                <div>\n                  No sensors matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={`No sensors were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedSensorTable repoAddress={repoAddress} sensors={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"sensors\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SENSORS_QUERY = gql`\n  query WorkspaceSensorsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        sensors {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, MainContent, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {AssetGroupRoot} from '../assets/AssetGroupRoot';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ResourceRoot} from '../resources/ResourceRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\n\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceAssetsRoot} from './WorkspaceAssetsRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceGraphsRoot} from './WorkspaceGraphsRoot';\nimport {WorkspaceJobsRoot} from './WorkspaceJobsRoot';\nimport {WorkspaceOpsRoot} from './WorkspaceOpsRoot';\nimport {WorkspacePipelineRoot} from './WorkspacePipelineRoot';\nimport {WorkspaceRepoRoot} from './WorkspaceRepoRoot';\nimport {WorkspaceSchedulesRoot} from './WorkspaceSchedulesRoot';\nimport {WorkspaceSensorsRoot} from './WorkspaceSensorsRoot';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressFromPath} from './repoAddressFromPath';\n\nconst RepoRouteContainer = () => {\n  const {repoPath} = useParams<{repoPath: string}>();\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Invalid code location path\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not a valid code location path.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active code locations, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unknown code location\"\n          description={\n            <div>\n              <div>\n                <strong>{repoAddressAsHumanString(addressForPath)}</strong>\n              </div>\n              {'  is not loaded in the current workspace.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/locations/:repoPath/assets\" exact>\n        <WorkspaceAssetsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/jobs\" exact>\n        <WorkspaceJobsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules\" exact>\n        <WorkspaceSchedulesRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors\" exact>\n        <WorkspaceSensorsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs\" exact>\n        <WorkspaceGraphsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/ops/:name?\" exact>\n        <WorkspaceOpsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs/(/?.*)\">\n        <GraphRoot repoAddress={addressForPath} />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/pipelines/(/?.*)',\n          '/locations/:repoPath/jobs/(/?.*)',\n          '/locations/:repoPath/pipeline_or_job/(/?.*)',\n        ]}\n      >\n        <PipelineRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules/:scheduleName/:runTab?\">\n        <ScheduleRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors/:sensorName\">\n        <SensorRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/resources/:resourceName\">\n        <ResourceRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path={['/locations/:repoPath/asset-groups/:groupName/list(/?.*)']}>\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"list\" />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/asset-groups/:groupName/(/?.*)',\n          '/locations/:repoPath/asset-groups/:groupName',\n        ]}\n      >\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"lineage\" />\n      </Route>\n      <Route path=\"/locations/:repoPath/:tab?\">\n        <WorkspaceRepoRoot repoAddress={addressForPath} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => {\n  return (\n    <MainContent>\n      <Switch>\n        <Route path={['/locations/pipelines/:pipelinePath', '/locations/jobs/:pipelinePath']}>\n          <WorkspacePipelineRoot />\n        </Route>\n        <Route path=\"/locations/:repoPath\">\n          <RepoRouteContainer />\n        </Route>\n      </Switch>\n    </MainContent>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","params","useParams","explorerPath","explorerPathFromString","pipelineName","snapshotId","history","useHistory","useDocumentTitle","slice","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","assetKey","push","assetDetailsPathForKey","repoAddress","isGraph","React","explodeComposites","preferAssetRendering","options","setOptions","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","queryResult","result","pipelineSnapshotOrError","__typename","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","fetchOptions","container","handles","getInvocations","definitionName","filter","s","name","map","handleID","gql","METADATA_ENTRY_FRAGMENT","GRAPH_EXPLORER_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","GRAPH_EXPLORER_ASSET_NODE_FRAGMENT","PYTHON_ERROR_FRAGMENT","ENABLED_FILTERS","PipelineRunsRoot","props","pipelinePath","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","token","value","Boolean","allTokens","repoToken","DagsterTag","repoAddressAsTag","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","runId","getResultArray","data","paginationProps","onAddTag","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refetch","allowStaleData","padding","vertical","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","flex","alignItems","justifyContent","top","horizontal","direction","gap","$top","actionBarComponents","enabledFilters","tokens","onChange","loading","style","marginTop","RUN_TABLE_RUN_FRAGMENT","SchedulesNextTicks","repos","nextTicks","anyPipelines","anySchedules","useRepositoryOptions","forEach","schedules","location","futureTickSchedules","schedule","futureTicks","scheduleState","status","InstigationStatus","minMaxTimestamp","Math","min","timestamp","tick","sort","a","b","$monospaceFont","width","findRepositoryAmongOptions","timezone","executionTimezone","timeFormat","showSeconds","showTimezone","to","workspacePathFromAddress","pipelineHrefContext","NextTickMenu","tickTimestamp","id","action","href","scheduleSelector","repoAddressToSelector","scheduleName","isOpen","setOpen","useLazyQuery","SCHEDULE_TICK_CONFIG_QUERY","loadTickConfig","called","infoReady","evaluationResult","scheduleOrError","futureTick","menuItems","NextTickMenuItems","onItemOpen","purpose","content","position","onOpening","NextTickDialog","text","skipReason","onClick","error","runRequests","runRequest","runConfigYaml","target","qs","config","solidSelection","selectedRunRequest","setSelectedRunRequest","copy","useCopyToClipboard","body","close","tags","border","side","color","Colors","left","bottom","lineNumbers","SkipWrapper","RunRequestBody","idx","runKey","underline","spacing","onClose","topBorder","autoFocus","SharedToaster","intent","SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT","REPOSITORY_FOR_NEXT_TICKS_FRAGMENT","styled","StickyTableContainer","AssetGroupRoot","tab","groupName","groupPath","groupSelector","repositoryLocationName","repositoryName","node","replace","encodeURIComponent","view","Page","display","flexDirection","paddingBottom","PageHeader","right","marginBottom","ReloadAllButton","label","Tag","RepositoryLink","tabs","margin","Tabs","selectedTabId","TabLink","AssetGraphExplorer","AssetsCatalogTable","prefixPath","split","decodeURIComponent","setPrefixPath","LaunchpadSetupFromRunRoot","canLaunchPipelineExecution","usePermissionsForLocation","repoPath","enabled","LaunchpadSetupFromRunAllowedRoot","useExecutionSessionStorage","storageData","onSave","CONFIG_FOR_RUN_QUERY","runOrError","run","newSession","Array","applyCreateSession","LaunchpadSessionLoading","LaunchpadSessionError","pathname","LaunchpadSetupRoot","LaunchpadSetupAllowedRoot","queryString","window","search","ignoreQueryPrefix","solidSelectionQuery","TIME_FORMAT","LatestRunTag","lastRunQuery","LATEST_RUN_TAG_QUERY","runsFilter","key","notifyOnNetworkStatusChange","runsOrError","stats","start","startTime","end","endTime","RunStatus","size","Tooltip","placement","TimestampDisplay","timingStringForStatus","RUN_TIME_FRAGMENT","JobMetadata","metadata","JOB_METADATA_QUERY","job","pipelineOrError","runsForAssetScan","useJobNavMetadata","JobScheduleOrSensorTag","RelatedAssetsTag","relatedAssets","getRelatedAssets","matchingSchedules","matchingSensors","sensors","ScheduleOrSensorTag","tokenForAssetKey","uniq","flatMap","r","assets","open","ButtonLink","Dialog","canOutsideClickClose","canEscapeKeyClose","maxWidth","minWidth","Table","wordBreak","Button","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","pipelineTabs","overview","pathComponent","playground","getPermissionsResult","permissions","partitions","currentOrder","PipelineNav","match","useRouteMatch","active","component","tabList","Object","keys","find","t","tabForPipelinePathComponent","selector","repoJobEntry","repository","pipelines","pipelineOrJob","isAssetJob","partitionSets","hasLaunchpad","hasPartitionSet","partitionSet","explorerPathForTab","tabForKey","wrap","permissionsResult","disabled","disabledReason","JobBackfillsTable","partitionSetName","partitionNames","repositorySelector","refetchCounter","cursorStack","setCursorStack","cursor","setCursor","JOB_BACKFILLS_QUERY","limit","partialRefetch","Loading","partitionSetOrError","backfills","popCursor","nextStack","pop","advanceCursor","current","nextCursor","backfillId","reset","BackfillTable","showBackfillTarget","allPartitions","BACKFILL_TABLE_FRAGMENT","PartitionGraph","jobDataByPartition","stepDataByPartition","yLabel","hiddenStepKeys","hiddenPartitions","setHiddenPartitions","chart","onGraphClick","event","instance","xAxis","scales","offsetX","offsetY","type","chartArea","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","animation","y","x","plugins","legend","_e","_legendItem","maintainAspectRatio","jobData","stepData","hidden","stepDataByKey","stepKey","includes","_fillPartitions","buildDatasetData","allLabel","graphData","datasets","borderColor","backgroundColor","colorHash","PartitionGraphContainer","height","ref","points","pointData","point","OpJobPartitionsView","PARTITIONS_STATUS_QUERY","partitionsOrError","OpJobPartitionsViewContent","usePartitionDurations","stepDurationData","runDurationData","p","runsLoaded","sortedRuns","lastRun","stepStats","canLaunchPartitionBackfill","useViewport","viewport","containerProps","setPageSize","offset","setOffset","showSteps","setShowSteps","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","backfillRefetchCounter","setBackfillRefetchCounter","usePartitionStepQuery","partitionTagName","jobName","skipQuery","approxPageSize","getVisibleItemCount","GRID_FLOATING_CONTAINER_WIDTH","selectedPartitions","max","statusData","partitionStatusesOrError","runStatusToPartitionState","runStatus","runDuration","onSubmit","zIndex","partitionData","onCancel","onLaunch","_backfillId","_stepQuery","Icon","CountBox","count","PartitionState","PartitionStatus","partitionStateForKey","selected","selectionWindowSize","maxIdx","selectedIdx","indexOf","nextOffset","tooltipMessage","fontSize","AssetJobPartitionsView","assetGraph","useAssetGraphData","assetHealth","usePartitionHealthData","graphAssetKeys","merged","mergedAssetHealth","dimensions","selection","d","selectedKeys","partitionKeys","selectedRanges","allPartitionsRange","dimension","allKeys","explodePartitionKeysInSelection","stateForKey","total","missing","state","showAssets","setShowAssets","dimensionIdx","findIndex","isTimeseriesDimension","dimensionKeys","selectedDimensionKeys","LaunchAssetExecutionButton","scope","all","graphQueryItems","g","skipAllTerm","preferredJobName","splitPartitions","stateForSingleDimension","rangeDimensionIdx","rangeDimension","assetQueryItems","AssetJobPartitionGraphs","multidimensional","dimensionName","PipelinePartitionsRoot","pipelineInfo","useStripSnapshotFromPath","usePartitionNameForPipeline","partitionSetError","PipelineOrJobDisambiguationRoot","useLocation","pipelineOrJobName","replacedPath","PipelineOverviewRoot","opsQuery","PipelineRoot","render","url","ResourceRoot","resourceName","resourceSelector","RESOURCE_ROOT_QUERY","overflow","topLevelResourceDetailsOrError","Alert","showCustomAlert","configuredValues","fromEntries","cv","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","configFields","field","inName","defaultValue","defaultValueAsJson","actualValue","isDefault","configTypeKey","canShow","second","RightInfoPanel","RightInfoPanelContent","showRefresh","TickLogDialog","instigationSelector","TICK_LOG_EVENTS_QUERY","events","instigationStateOrError","logEvents","TickLogsTable","borderBottom","onWidthsChanged","Headers","TickLogRow","widths","ColumnWidthsContext","eventType","onResize","handleSide","level","highlighted","marginLeft","time","COLOR_MAP","InstigationTickStatus","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","Date","now","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","setInterval","clearInterval","nextTickRadius","sin","PI","tickData","tickColors","tickRadii","fill","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","duration","grid","bounds","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","cursorLabel","runIds","originRunIds","_event","activeElements","item","index","onHover","elements","HTMLElement","element","TickDetailsDialog","JOB_SELECTED_TICK_QUERY","skip","PythonErrorInfo","e","copyValue","TICK_TAG_FRAGMENT","Chart","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","useQueryPersistedState","encode","states","queryState","toLowerCase","String","decode","shownStates","setShownStates","copyToClipboard","flagSensorScheduleLogging","useFeatureFlags","statuses","JOB_TICK_HISTORY_QUERY","logTick","setLogTick","instigationType","StatusFilter","Checkbox","checked","InstigationType","fontFamily","FontFamily","marginRight","str","TRUNCATION_THRESHOLD","CopyButton","logKey","TickHistoryTimeline","onHighlightRunIds","Number","selectedTime","setSelectedTime","pollingPaused","pausePolling","ONE_MONTH","Spinner","onTickClick","RUN_STATUS_FRAGMENT","IconWrapper","ScheduleDetails","cronSchedule","copyText","setCopyText","setTimeout","clearTimeout","latestTick","running","ScheduleSwitch","link","hover","QueryRefresh","MetadataTable","PipelineReference","SchedulePartitionStatus","humanCronString","SCHEDULE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","REPOSITORY_SCHEDULES_FRAGMENT","REPOSITORY_INFO_FRAGMENT","SCHEDULES_ROOT_QUERY","INSTANCE_HEALTH_FRAGMENT","ScheduleRoot","selectedTab","setSelectedTab","SCHEDULE_ROOT_QUERY","showDaemonWarning","daemonHealth","daemonStatus","healthy","SchedulerInfo","SchedulePreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","RunTable","SENSOR_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorDetails","SensorInfo","GraphRoot","minHeight","GraphExplorerRoot","graphResult","GRAPH_EXPLORER_ROOT_QUERY","graphSelector","graphName","graphOrError","GraphExplorer","fullPath","UNGROUPED_NAME","VirtualizedRepoAssetTable","parentRef","repoKey","repoAddressAsHumanString","useAssetGroupExpansionState","expandedKeys","onToggle","grouped","groups","asset","assetsForGroup","flattened","flat","assetCount","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","nameLabel","$totalHeight","GroupNameRow","expanded","VirtualizedAssetRow","showCheckboxColumn","showRepoColumn","onToggleChecked","onWipe","ClickableRow","$height","$start","$open","tabIndex","onKeyDown","code","preventDefault","background","Row","validateExpandedKeys","parsed","isArray","storageKey","basePath","AppContext","useStateWithStorage","setExpandedKeys","nextExpandedKeys","Set","has","delete","add","from","WorkspaceTabs","WorkspaceHeader","queryData","ReloadRepositoryLocationButton","tryReload","reloading","WorkspaceAssetsRoot","repoName","searchValue","setSearchValue","queryResultOverview","WORKSPACE_ASSETS_QUERY","fetchPolicy","anySearch","trim","toLocaleLowerCase","repositoryOrError","filteredBySearch","useAssetNodeSearch","TextInput","placeholder","paddingTop","VirtualizedGraphTable","graphs","gridTemplateColumns","GraphRow","SINGLE_GRAPH_QUERY","queryGraph","useDelayedRowQuery","displayedDescription","RowGrid","whiteSpace","fontWeight","textOverflow","Box","WorkspaceGraphsRoot","WORSKPACE_GRAPHS_QUERY","sanitizedSearch","jobGraphNames","isHiddenAssetGroupJob","usedSolids","invocations","pipeline","localeCompare","searchToLower","VirtualizedJobTable","jobs","VirtualizedJobRow","WorkspaceJobsRoot","WORKSPACE_JOBS_QUERY","OpCard","inputDefinitions","outputDefinitions","layout","layoutOp","inputs","dependsOn","outputs","dependedBy","OpCardContainer","OpNode","invocation","minified","onDoubleClick","onEnterComposite","onHighlightEdges","focused","highlightedEdges","dim","OP_CARD_SOLID_DEFINITION_FRAGMENT","OP_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","usedSolid","SidebarOpDefinition","showingSubgraph","i","SIDEBAR_OP_DEFINITION_FRAGMENT","OpDetailScrollContainer","flatUniq","arrs","arr","OpsRoot","OPS_ROOT_QUERY","OpsRootWithData","solids","q","typeExplorer","suggestions","values","displayName","tokenizedValuesFromString","filtered","startsWith","filterSolidsWithSearch","onSearch","stringFromValue","onClickOp","defName","OpListColumnContainer","TokenizingField","suggestionProviders","nonce","__webpack_nonce__","OpList","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","Container","rowCount","rowHeight","scrollToIndex","className","rowRenderer","parent","OpListItem","OpName","OpTypeSignature","overscanRowCount","OP_TYPE_SIGNATURE_FRAGMENT","WorkspaceOpsRoot","WorkspacePipelineRoot","entireMatch","toAppend","reposWithMatch","findRepoContainingPipeline","optionToRepoAddress","repositoryLocation","repoString","buildRepoPathForHuman","workspacePath","SchedulesRoot","unloadableInstigationStatesOrError","schedulesSection","SchedulesTable","Unloadable","scheduleStates","SensorsTable","SensorRow","sensorState","SensorSwitch","showIcon","assetKeys","AssetLink","humanizeSensorInterval","minIntervalSeconds","instigationState","SensorsRoot","SENSORS_ROOT_QUERY","sensorsOrError","sensorStates","rel","REPOSITORY_ASSETS_LIST_QUERY","RepositoryAssetsList","assetsForTable","displayNameForAssetKey","Description","REPOSITORY_GRAPHS_LIST_QUERY","RepositoryGraphsList","graphsForTable","PipelineTable","pipelinesOrJobs","showRepo","truncationThreshold","PIPELINE_TABLE_FRAGMENT","REPOSITORY_PIPELINES_LIST_QUERY","RepositoryPipelinesList","pipelinesForTable","WorkspaceRepoRoot","activeTab","exact","VirtualizedScheduleTable","VirtualizedScheduleRow","WorkspaceSchedulesRoot","WORKSPACE_SCHEDULES_QUERY","VirtualizedSensorTable","VirtualizedSensorRow","WorkspaceSensorsRoot","WORKSPACE_SENSORS_QUERY","RepoRouteContainer","workspaceState","WorkspaceContext","addressForPath","repoAddressFromPath","allRepos","WorkspaceRoot","MainContent","M"],"sourceRoot":""}