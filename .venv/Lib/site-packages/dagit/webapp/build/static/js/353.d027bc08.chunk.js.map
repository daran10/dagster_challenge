{"version":3,"file":"static/js/353.d027bc08.chunk.js","mappings":"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","sources":["../../core/src/hooks/useSelectionReducer.ts","../../core/src/runs/ReexecutionDialog.tsx","../../core/src/runs/RunActionsMenu.tsx","../../core/src/runs/RunTable.tsx","../../core/src/runs/useCursorPaginatedQuery.tsx","../../core/src/ui/MenuLink.tsx"],"sourcesContent":["import React from 'react';\n\ntype State = {\n  checkedIds: Set<string>;\n  lastCheckedId: string | null;\n};\n\ntype Action =\n  | {type: 'toggle-one'; payload: {checked: boolean; id: string}}\n  | {\n      type: 'toggle-slice';\n      payload: {checked: boolean; id: string; allIds: string[]};\n    }\n  | {type: 'toggle-all'; payload: {checked: boolean; allIds: string[]}};\n\nconst reducer = (state: State, action: Action): State => {\n  const copy = new Set(Array.from(state.checkedIds));\n  switch (action.type) {\n    case 'toggle-one': {\n      const {checked, id} = action.payload;\n      checked ? copy.add(id) : copy.delete(id);\n      return {lastCheckedId: id, checkedIds: copy};\n    }\n\n    case 'toggle-slice': {\n      const {checked, id, allIds} = action.payload;\n      const {lastCheckedId} = state;\n\n      const indexOfLast = lastCheckedId ? allIds.indexOf(lastCheckedId) : -1;\n      const indexOfChecked = allIds.indexOf(id);\n      if (indexOfLast === -1 || indexOfChecked === -1) {\n        return state;\n      }\n\n      const [start, end] = [indexOfLast, indexOfChecked].sort();\n      for (let ii = start; ii <= end; ii++) {\n        checked ? copy.add(allIds[ii]) : copy.delete(allIds[ii]);\n      }\n\n      return {\n        lastCheckedId: id,\n        checkedIds: copy,\n      };\n    }\n\n    case 'toggle-all': {\n      const {checked, allIds} = action.payload;\n      return {\n        lastCheckedId: null,\n        checkedIds: checked ? new Set(allIds) : new Set(),\n      };\n    }\n  }\n};\n\nconst initialState: State = {\n  checkedIds: new Set(),\n  lastCheckedId: null,\n};\n\nexport function useSelectionReducer(allIds: string[]) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const onToggleFactory = (id: string) => (values: {checked: boolean; shiftKey: boolean}) => {\n    const {checked, shiftKey} = values;\n    if (shiftKey && state.lastCheckedId) {\n      dispatch({type: 'toggle-slice', payload: {checked, id, allIds}});\n    } else {\n      dispatch({type: 'toggle-one', payload: {checked, id}});\n    }\n  };\n\n  const onToggleAll = (checked: boolean) => {\n    dispatch({type: 'toggle-all', payload: {checked, allIds}});\n  };\n\n  return [state, {onToggleFactory, onToggleAll}] as const;\n}\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {Button, Colors, DialogBody, DialogFooter, Dialog, Group, Icon, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ReexecutionStrategy} from '../graphql/types';\n\nimport {NavigationBlock} from './NavitationBlock';\nimport {LAUNCH_PIPELINE_REEXECUTION_MUTATION} from './RunUtils';\nimport {\n  LaunchPipelineReexecutionMutation,\n  LaunchPipelineReexecutionMutationVariables,\n} from './types/RunUtils.types';\n\nexport interface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (reexecutionState: ReexecutionState) => void;\n  selectedRuns: {[id: string]: string};\n  reexecutionStrategy: ReexecutionStrategy;\n}\n\nconst refineToError = (data: LaunchPipelineReexecutionMutation | null | undefined) => {\n  if (data?.launchPipelineReexecution.__typename === 'LaunchRunSuccess') {\n    throw new Error('Not an error!');\n  }\n  return data?.launchPipelineReexecution;\n};\n\ntype Error = ReturnType<typeof refineToError>;\n\nconst errorText = (error: Error) => {\n  if (!error) {\n    return 'Unknown error';\n  }\n  switch (error.__typename) {\n    case 'ConflictingExecutionParamsError':\n      return 'Conflicting execution parameters';\n    case 'InvalidOutputError':\n      return 'Invalid output';\n    case 'InvalidStepError':\n      return 'Invalid step';\n    case 'NoModeProvidedError':\n      return 'No mode provided';\n    case 'PipelineNotFoundError':\n      return 'Job not found in workspace';\n    case 'PresetNotFoundError':\n      return 'Preset not found';\n    case 'PythonError':\n      return error.message;\n    case 'RunConfigValidationInvalid':\n      return 'Run config invalid';\n    case 'RunConflict':\n      return 'Run conflict';\n    case 'UnauthorizedError':\n      return 'Re-execution not authorized';\n    case 'InvalidSubsetError':\n      return 'Invalid op subset: ' + error.message;\n    default:\n      return 'Unknown error';\n  }\n};\n\nexport type ReexecutionState = {completed: number; errors: {[id: string]: Error}};\n\ntype ReexecutionDialogState = {\n  frozenRuns: SelectedRuns;\n  step: 'initial' | 'reexecuting' | 'completed';\n  reexecution: ReexecutionState;\n};\n\ntype SelectedRuns = {[id: string]: string};\n\nconst initializeState = (selectedRuns: SelectedRuns): ReexecutionDialogState => {\n  return {\n    frozenRuns: selectedRuns,\n    step: 'initial',\n    reexecution: {completed: 0, errors: {}},\n  };\n};\n\ntype ReexecutionDialogAction =\n  | {type: 'reset'; frozenRuns: SelectedRuns}\n  | {type: 'start'}\n  | {type: 'reexecution-success'}\n  | {type: 'reexecution-error'; id: string; error: Error}\n  | {type: 'complete'};\n\nconst reexecutionDialogReducer = (\n  prevState: ReexecutionDialogState,\n  action: ReexecutionDialogAction,\n): ReexecutionDialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initializeState(action.frozenRuns);\n    case 'start':\n      return {...prevState, step: 'reexecuting'};\n    case 'reexecution-success': {\n      const {reexecution} = prevState;\n      return {\n        ...prevState,\n        step: 'reexecuting',\n        reexecution: {...reexecution, completed: reexecution.completed + 1},\n      };\n    }\n    case 'reexecution-error': {\n      const {reexecution} = prevState;\n      return {\n        ...prevState,\n        step: 'reexecuting',\n        reexecution: {\n          ...reexecution,\n          completed: reexecution.completed + 1,\n          errors: {...reexecution.errors, [action.id]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const ReexecutionDialog = (props: Props) => {\n  const {isOpen, onClose, onComplete, reexecutionStrategy, selectedRuns} = props;\n\n  // Freeze the selected IDs, since the list may change as runs continue processing and\n  // re-executing. We want to preserve the list we're given.\n  const frozenRuns = React.useRef<SelectedRuns>(selectedRuns);\n\n  const [state, dispatch] = React.useReducer(\n    reexecutionDialogReducer,\n    frozenRuns.current,\n    initializeState,\n  );\n\n  const count = Object.keys(state.frozenRuns).length;\n\n  // If the dialog is newly open, update state to match the frozen list.\n  React.useEffect(() => {\n    if (isOpen) {\n      dispatch({type: 'reset', frozenRuns: frozenRuns.current});\n    }\n  }, [isOpen]);\n\n  // If the dialog is not open, update the ref so that the frozen list will be entered\n  // into state the next time the dialog opens.\n  React.useEffect(() => {\n    if (!isOpen) {\n      frozenRuns.current = selectedRuns;\n    }\n  }, [isOpen, selectedRuns]);\n\n  const [reexecute] = useMutation<\n    LaunchPipelineReexecutionMutation,\n    LaunchPipelineReexecutionMutationVariables\n  >(LAUNCH_PIPELINE_REEXECUTION_MUTATION);\n\n  const mutate = async () => {\n    dispatch({type: 'start'});\n\n    const runList = Object.keys(state.frozenRuns);\n    for (let ii = 0; ii < runList.length; ii++) {\n      const runId = runList[ii];\n      const {data} = await reexecute({\n        variables: {\n          reexecutionParams: {\n            parentRunId: runId,\n            strategy: reexecutionStrategy,\n          },\n        },\n      });\n\n      if (data?.launchPipelineReexecution.__typename === 'LaunchRunSuccess') {\n        dispatch({type: 'reexecution-success'});\n      } else {\n        dispatch({type: 'reexecution-error', id: runId, error: refineToError(data)});\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete(state.reexecution);\n  };\n\n  const progressContent = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Group direction=\"column\" spacing={16}>\n              <div>No runs selected for re-execution.</div>\n              <div>The runs you selected may already have finished executing.</div>\n            </Group>\n          );\n        }\n\n        const message = () => {\n          if (reexecutionStrategy === ReexecutionStrategy.ALL_STEPS) {\n            return (\n              <span>\n                {`${count} ${count === 1 ? 'run' : 'runs'} will be re-executed `}\n                <strong>with all steps</strong>. Do you wish to continue?\n              </span>\n            );\n          }\n          return (\n            <span>\n              {`${count} ${count === 1 ? 'run' : 'runs'} will be re-executed `}\n              <strong>from failure</strong>. Do you wish to continue?\n            </span>\n          );\n        };\n\n        return (\n          <Group direction=\"column\" spacing={16}>\n            <div>{message()}</div>\n          </Group>\n        );\n      case 'reexecuting':\n      case 'completed':\n        const value = count > 0 ? state.reexecution.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'reexecuting' ? (\n              <NavigationBlock message=\"Re-execution in progress, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Button intent=\"none\" onClick={onClose}>\n              OK\n            </Button>\n          );\n        }\n\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {`Re-execute ${`${count} ${count === 1 ? 'run' : 'runs'}`}`}\n            </Button>\n          </>\n        );\n      case 'reexecuting':\n        return (\n          <Button intent=\"primary\" disabled>\n            {`Re-executing ${`${count} ${count === 1 ? 'run' : 'runs'}...`}`}\n          </Button>\n        );\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'reexecuting') {\n      return <div>Please do not close the window or navigate away during re-execution.</div>;\n    }\n\n    const errors = state.reexecution.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.reexecution.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>\n              {`Successfully requested re-execution for ${successCount} ${\n                successCount === 1 ? 'run' : `runs`\n              }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>\n                {`Could not request re-execution for ${errorCount} ${\n                  errorCount === 1 ? 'run' : 'runs'\n                }:`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((runId) => (\n                <li key={runId}>\n                  <Group direction=\"row\" spacing={8} alignItems=\"baseline\">\n                    <Mono>{runId.slice(0, 8)}</Mono>\n                    {errors[runId] ? <div>{errorText(errors[runId])}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'reexecuting';\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      title={\n        reexecutionStrategy === ReexecutionStrategy.ALL_STEPS\n          ? 'Re-execute runs'\n          : 'Re-execute runs from failure'\n      }\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {gql, useLazyQuery, useMutation} from '@apollo/client';\nimport {\n  Button,\n  Icon,\n  MenuDivider,\n  MenuExternalLink,\n  MenuItem,\n  Menu,\n  Popover,\n  Tooltip,\n  DialogFooter,\n  Dialog,\n  StyledReadOnlyCodeMirror,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {AppContext} from '../app/AppContext';\nimport {SharedToaster} from '../app/DomUtils';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {useCopyToClipboard} from '../app/browser';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {MenuLink} from '../ui/MenuLink';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext';\nimport {useRepositoryForRun} from '../workspace/useRepositoryForRun';\nimport {workspacePathFromRunDetails} from '../workspace/workspacePath';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {ReexecutionDialog} from './ReexecutionDialog';\nimport {RUN_FRAGMENT_FOR_REPOSITORY_MATCH} from './RunFragments';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {\n  LAUNCH_PIPELINE_REEXECUTION_MUTATION,\n  RunsQueryRefetchContext,\n  getReexecutionVariables,\n  handleLaunchResult,\n} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {\n  PipelineEnvironmentYamlQuery,\n  PipelineEnvironmentYamlQueryVariables,\n} from './types/RunActionsMenu.types';\nimport {RunTableRunFragment} from './types/RunTable.types';\nimport {\n  LaunchPipelineReexecutionMutation,\n  LaunchPipelineReexecutionMutationVariables,\n} from './types/RunUtils.types';\n\nexport const RunActionsMenu: React.FC<{\n  run: RunTableRunFragment;\n}> = React.memo(({run}) => {\n  const {refetch} = React.useContext(RunsQueryRefetchContext);\n  const [visibleDialog, setVisibleDialog] = React.useState<\n    'none' | 'terminate' | 'delete' | 'config'\n  >('none');\n\n  const {rootServerURI} = React.useContext(AppContext);\n  const {\n    canTerminatePipelineExecution,\n    canDeletePipelineRun,\n    canLaunchPipelineReexecution,\n  } = usePermissionsDEPRECATED();\n  const history = useHistory();\n\n  const copyConfig = useCopyToClipboard();\n\n  const [reexecute] = useMutation<\n    LaunchPipelineReexecutionMutation,\n    LaunchPipelineReexecutionMutationVariables\n  >(LAUNCH_PIPELINE_REEXECUTION_MUTATION, {\n    onCompleted: refetch,\n  });\n\n  const [loadEnv, {called, loading, data}] = useLazyQuery<\n    PipelineEnvironmentYamlQuery,\n    PipelineEnvironmentYamlQueryVariables\n  >(PIPELINE_ENVIRONMENT_YAML_QUERY, {\n    variables: {runId: run.runId},\n  });\n\n  const closeDialogs = () => {\n    setVisibleDialog('none');\n  };\n\n  const onComplete = () => {\n    refetch();\n  };\n\n  const pipelineRun =\n    data?.pipelineRunOrError?.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const runConfigYaml = pipelineRun?.runConfigYaml;\n\n  const repoMatch = useRepositoryForRun(pipelineRun);\n  const isFinished = doneStatuses.has(run.status);\n  const isJob = !!(repoMatch && isThisThingAJob(repoMatch?.match, run.pipelineName));\n\n  const infoReady = called ? !loading : false;\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              tagName=\"button\"\n              text={loading ? 'Loading configuration...' : 'View configuration...'}\n              disabled={!runConfigYaml}\n              icon=\"open_in_new\"\n              onClick={() => setVisibleDialog('config')}\n            />\n            <MenuDivider />\n            <>\n              <Tooltip\n                content={OPEN_LAUNCHPAD_UNKNOWN}\n                position=\"bottom\"\n                disabled={infoReady}\n                targetTagName=\"div\"\n              >\n                <MenuLink\n                  text=\"Open in Launchpad...\"\n                  disabled={!infoReady}\n                  icon=\"edit\"\n                  to={workspacePathFromRunDetails({\n                    id: run.id,\n                    pipelineName: run.pipelineName,\n                    repositoryName: repoMatch?.match.repository.name,\n                    repositoryLocationName: repoMatch?.match.repositoryLocation.name,\n                    isJob,\n                  })}\n                />\n              </Tooltip>\n              <Tooltip\n                content={\n                  !canLaunchPipelineReexecution.enabled\n                    ? canLaunchPipelineReexecution.disabledReason\n                    : 'Re-execute is unavailable because the pipeline is not present in the current workspace.'\n                }\n                position=\"bottom\"\n                disabled={infoReady && !!repoMatch && canLaunchPipelineReexecution.enabled}\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  tagName=\"button\"\n                  text=\"Re-execute\"\n                  disabled={!infoReady || !repoMatch || !canLaunchPipelineReexecution.enabled}\n                  icon=\"refresh\"\n                  onClick={async () => {\n                    if (repoMatch && runConfigYaml) {\n                      const result = await reexecute({\n                        variables: getReexecutionVariables({\n                          run: {...run, runConfigYaml},\n                          style: {type: 'all'},\n                          repositoryLocationName: repoMatch.match.repositoryLocation.name,\n                          repositoryName: repoMatch.match.repository.name,\n                        }),\n                      });\n                      handleLaunchResult(\n                        run.pipelineName,\n                        result.data?.launchPipelineReexecution,\n                        history,\n                        {\n                          behavior: 'open',\n                        },\n                      );\n                    }\n                  }}\n                />\n              </Tooltip>\n              {isFinished || !canTerminatePipelineExecution.enabled ? null : (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"cancel\"\n                  text=\"Terminate\"\n                  onClick={() => setVisibleDialog('terminate')}\n                />\n              )}\n              <MenuDivider />\n            </>\n            <MenuExternalLink\n              text=\"Download debug file\"\n              icon=\"download_for_offline\"\n              download\n              href={`${rootServerURI}/download_debug/${run.runId}`}\n            />\n            {canDeletePipelineRun.enabled ? (\n              <MenuItem\n                tagName=\"button\"\n                icon=\"delete\"\n                text=\"Delete\"\n                intent=\"danger\"\n                onClick={() => setVisibleDialog('delete')}\n              />\n            ) : null}\n          </Menu>\n        }\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadEnv();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      {canTerminatePipelineExecution.enabled ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={closeDialogs}\n          onComplete={onComplete}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {canDeletePipelineRun.enabled ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={closeDialogs}\n          onComplete={onComplete}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      <Dialog\n        isOpen={visibleDialog === 'config'}\n        title=\"Config\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        onClose={closeDialogs}\n      >\n        <StyledReadOnlyCodeMirror\n          value={runConfigYaml || ''}\n          options={{lineNumbers: true, mode: 'yaml'}}\n        />\n        <DialogFooter topBorder>\n          <Button\n            intent=\"none\"\n            onClick={() => {\n              copyConfig(runConfigYaml || '');\n              SharedToaster.show({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n          <Button intent=\"primary\" onClick={closeDialogs}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n});\n\nexport const RunBulkActionsMenu: React.FC<{\n  selected: RunTableRunFragment[];\n  clearSelection: () => void;\n}> = React.memo(({selected, clearSelection}) => {\n  const {refetch} = React.useContext(RunsQueryRefetchContext);\n  const {\n    canTerminatePipelineExecution,\n    canDeletePipelineRun,\n    canLaunchPipelineReexecution,\n  } = usePermissionsDEPRECATED();\n  const [visibleDialog, setVisibleDialog] = React.useState<\n    'none' | 'terminate' | 'delete' | 'reexecute-from-failure' | 'reexecute'\n  >('none');\n\n  if (!canTerminatePipelineExecution.enabled && !canDeletePipelineRun.enabled) {\n    return null;\n  }\n\n  const unfinishedRuns = selected.filter((r) => !doneStatuses.has(r?.status));\n  const unfinishedIDs = unfinishedRuns.map((r) => r.id);\n  const unfinishedMap = unfinishedRuns.reduce(\n    (accum, run) => ({...accum, [run.id]: run.canTerminate}),\n    {},\n  );\n\n  const selectedIDs = selected.map((run) => run.runId);\n  const deletionMap = selected.reduce((accum, run) => ({...accum, [run.id]: run.canTerminate}), {});\n\n  const failedRuns = selected.filter((r) => failedStatuses.has(r?.status));\n  const failedMap = failedRuns.reduce((accum, run) => ({...accum, [run.id]: run.id}), {});\n\n  const reexecutableRuns = selected.filter((r) => doneStatuses.has(r?.status));\n  const reexecutableMap = reexecutableRuns.reduce(\n    (accum, run) => ({...accum, [run.id]: run.id}),\n    {},\n  );\n\n  const closeDialogs = () => {\n    setVisibleDialog('none');\n  };\n\n  const onComplete = () => {\n    clearSelection();\n    refetch();\n  };\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            {canTerminatePipelineExecution.enabled ? (\n              <MenuItem\n                icon=\"cancel\"\n                text={`Terminate ${unfinishedIDs.length} ${\n                  unfinishedIDs.length === 1 ? 'run' : 'runs'\n                }`}\n                disabled={unfinishedIDs.length === 0}\n                onClick={() => {\n                  setVisibleDialog('terminate');\n                }}\n              />\n            ) : null}\n            {canDeletePipelineRun.enabled ? (\n              <MenuItem\n                icon=\"delete\"\n                intent=\"danger\"\n                text={`Delete ${selectedIDs.length} ${selectedIDs.length === 1 ? 'run' : 'runs'}`}\n                disabled={selectedIDs.length === 0}\n                onClick={() => {\n                  setVisibleDialog('delete');\n                }}\n              />\n            ) : null}\n            {canLaunchPipelineReexecution.enabled ? (\n              <>\n                <MenuItem\n                  icon=\"refresh\"\n                  text={`Re-execute ${reexecutableRuns.length} ${\n                    reexecutableRuns.length === 1 ? 'run' : 'runs'\n                  }`}\n                  disabled={reexecutableRuns.length === 0}\n                  onClick={() => {\n                    setVisibleDialog('reexecute');\n                  }}\n                />\n                <MenuItem\n                  icon=\"refresh\"\n                  text={`Re-execute ${failedRuns.length} ${\n                    failedRuns.length === 1 ? 'run' : 'runs'\n                  } from failure`}\n                  disabled={failedRuns.length === 0}\n                  onClick={() => {\n                    setVisibleDialog('reexecute-from-failure');\n                  }}\n                />\n              </>\n            ) : null}\n          </Menu>\n        }\n        position=\"bottom-right\"\n      >\n        <Button disabled={selected.length === 0} rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <TerminationDialog\n        isOpen={visibleDialog === 'terminate'}\n        onClose={closeDialogs}\n        onComplete={onComplete}\n        selectedRuns={unfinishedMap}\n      />\n      <DeletionDialog\n        isOpen={visibleDialog === 'delete'}\n        onClose={closeDialogs}\n        onComplete={onComplete}\n        onTerminateInstead={() => setVisibleDialog('terminate')}\n        selectedRuns={deletionMap}\n      />\n      <ReexecutionDialog\n        isOpen={visibleDialog === 'reexecute-from-failure'}\n        onClose={closeDialogs}\n        onComplete={onComplete}\n        selectedRuns={failedMap}\n        reexecutionStrategy={ReexecutionStrategy.FROM_FAILURE}\n      />\n      <ReexecutionDialog\n        isOpen={visibleDialog === 'reexecute'}\n        onClose={closeDialogs}\n        onComplete={onComplete}\n        selectedRuns={reexecutableMap}\n        reexecutionStrategy={ReexecutionStrategy.ALL_STEPS}\n      />\n    </>\n  );\n});\n\nconst OPEN_LAUNCHPAD_UNKNOWN =\n  'Launchpad is unavailable because the pipeline is not present in the current repository.';\n\n// Avoid fetching envYaml on load in Runs page. It is slow.\nconst PIPELINE_ENVIRONMENT_YAML_QUERY = gql`\n  query PipelineEnvironmentYamlQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        pipelineName\n        pipelineSnapshotId\n        runConfigYaml\n        ...RunFragmentForRepositoryMatch\n      }\n    }\n  }\n\n  ${RUN_FRAGMENT_FOR_REPOSITORY_MATCH}\n`;\n","import {gql} from '@apollo/client';\nimport {Box, Checkbox, Colors, Icon, NonIdealState, Table, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {RunsFilter} from '../graphql/types';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {PipelineSnapshotLink} from '../pipelines/PipelinePathUtils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRun} from '../workspace/useRepositoryForRun';\nimport {workspacePipelinePath, workspacePipelinePathGuessRepo} from '../workspace/workspacePath';\n\nimport {AssetKeyTagCollection} from './AssetKeyTagCollection';\nimport {RunActionsMenu, RunBulkActionsMenu} from './RunActionsMenu';\nimport {RunStatusTagWithStats} from './RunStatusTag';\nimport {RunTags} from './RunTags';\nimport {\n  assetKeysForRun,\n  RunStateSummary,\n  RunTime,\n  RUN_TIME_FRAGMENT,\n  titleForRun,\n} from './RunUtils';\nimport {RunFilterToken} from './RunsFilterInput';\nimport {RunTableRunFragment} from './types/RunTable.types';\n\ninterface RunTableProps {\n  runs: RunTableRunFragment[];\n  filter?: RunsFilter;\n  onAddTag?: (token: RunFilterToken) => void;\n  actionBarComponents?: React.ReactNode;\n  highlightedIds?: string[];\n  additionalColumnHeaders?: React.ReactNode[];\n  additionalColumnsForRow?: (run: RunTableRunFragment) => React.ReactNode[];\n}\n\nexport const RunTable = (props: RunTableProps) => {\n  const {runs, filter, onAddTag, highlightedIds, actionBarComponents} = props;\n  const allIds = runs.map((r) => r.runId);\n\n  const [{checkedIds}, {onToggleFactory, onToggleAll}] = useSelectionReducer(allIds);\n\n  const {canTerminatePipelineExecution, canDeletePipelineRun} = usePermissionsDEPRECATED();\n  const canTerminateOrDelete =\n    canTerminatePipelineExecution.enabled || canDeletePipelineRun.enabled;\n\n  const {options} = useRepositoryOptions();\n\n  if (runs.length === 0) {\n    const anyFilter = Object.keys(filter || {}).length;\n    return (\n      <div>\n        {actionBarComponents ? (\n          <Box padding={{vertical: 8, left: 24, right: 12}}>{actionBarComponents}</Box>\n        ) : null}\n        <Box margin={{vertical: 32}}>\n          {anyFilter ? (\n            <NonIdealState\n              icon=\"run\"\n              title=\"No matching runs\"\n              description=\"No runs were found for this filter.\"\n            />\n          ) : (\n            <NonIdealState\n              icon=\"run\"\n              title=\"No runs found\"\n              description={\n                <Box flex={{direction: 'column', gap: 12}}>\n                  <div>You have not launched any runs yet.</div>\n                  <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                    <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n                      Launch a run\n                    </AnchorButton>\n                    <span>or</span>\n                    <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n                      Materialize an asset\n                    </AnchorButton>\n                  </Box>\n                </Box>\n              }\n            />\n          )}\n        </Box>\n      </div>\n    );\n  }\n\n  let anyPipelines = false;\n  for (const run of runs) {\n    const {repositoryOrigin} = run;\n    if (repositoryOrigin) {\n      const repoAddress = buildRepoAddress(\n        repositoryOrigin.repositoryName,\n        repositoryOrigin.repositoryLocationName,\n      );\n      const repo = findRepositoryAmongOptions(options, repoAddress);\n      if (!repo || !isThisThingAJob(repo, run.pipelineName)) {\n        anyPipelines = true;\n        break;\n      }\n    }\n  }\n\n  const selectedFragments = runs.filter((run) => checkedIds.has(run.runId));\n\n  return (\n    <>\n      <Box flex={{alignItems: 'center', gap: 12}} padding={{vertical: 8, left: 24, right: 12}}>\n        {actionBarComponents}\n        <div style={{flex: 1}} />\n        <RunBulkActionsMenu\n          selected={selectedFragments}\n          clearSelection={() => onToggleAll(false)}\n        />\n      </Box>\n\n      <Table>\n        <thead>\n          <tr>\n            <th style={{width: 42, paddingTop: 0, paddingBottom: 0}}>\n              {canTerminateOrDelete ? (\n                <Checkbox\n                  indeterminate={checkedIds.size > 0 && checkedIds.size !== runs.length}\n                  checked={checkedIds.size === runs.length}\n                  onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                    if (e.target instanceof HTMLInputElement) {\n                      onToggleAll(e.target.checked);\n                    }\n                  }}\n                />\n              ) : null}\n            </th>\n            <th style={{width: 120}}>Status</th>\n            <th style={{width: 90}}>Run ID</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n            <th style={{width: 90}}>Snapshot ID</th>\n            <th style={{width: 190}}>Timing</th>\n            {props.additionalColumnHeaders}\n            <th style={{width: 52}} />\n          </tr>\n        </thead>\n        <tbody>\n          {runs.map((run) => (\n            <RunRow\n              canTerminateOrDelete={canTerminateOrDelete}\n              run={run}\n              key={run.runId}\n              onAddTag={onAddTag}\n              checked={checkedIds.has(run.runId)}\n              additionalColumns={props.additionalColumnsForRow?.(run)}\n              onToggleChecked={onToggleFactory(run.runId)}\n              isHighlighted={highlightedIds && highlightedIds.includes(run.runId)}\n            />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const RUN_TABLE_RUN_FRAGMENT = gql`\n  fragment RunTableRunFragment on Run {\n    id\n    runId\n    status\n    stepKeysToExecute\n    canTerminate\n    mode\n    rootRunId\n    parentRunId\n    pipelineSnapshotId\n    parentPipelineSnapshotId\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n    solidSelection\n    assetSelection {\n      ... on AssetKey {\n        path\n      }\n    }\n    status\n    tags {\n      key\n      value\n    }\n    ...RunTimeFragment\n  }\n\n  ${RUN_TIME_FRAGMENT}\n`;\n\nconst RunRow: React.FC<{\n  run: RunTableRunFragment;\n  canTerminateOrDelete: boolean;\n  onAddTag?: (token: RunFilterToken) => void;\n  checked?: boolean;\n  onToggleChecked?: (values: {checked: boolean; shiftKey: boolean}) => void;\n  additionalColumns?: React.ReactNode[];\n  isHighlighted?: boolean;\n}> = ({\n  run,\n  canTerminateOrDelete,\n  onAddTag,\n  checked,\n  onToggleChecked,\n  additionalColumns,\n  isHighlighted,\n}) => {\n  const {pipelineName} = run;\n  const repo = useRepositoryForRun(run);\n\n  const isJob = React.useMemo(() => {\n    if (repo) {\n      const pipelinesAndJobs = repo.match.repository.pipelines;\n      const match = pipelinesAndJobs.find((pipelineOrJob) => pipelineOrJob.name === pipelineName);\n      return !!match?.isJob;\n    }\n    return false;\n  }, [repo, pipelineName]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked && onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  return (\n    <Row key={run.runId} highlighted={!!isHighlighted}>\n      <td>\n        {canTerminateOrDelete && onToggleChecked ? (\n          <Checkbox checked={!!checked} onChange={onChange} />\n        ) : null}\n      </td>\n      <td>\n        <RunStatusTagWithStats status={run.status} runId={run.runId} />\n      </td>\n      <td>\n        <Link to={`/runs/${run.runId}`}>\n          <Mono>{titleForRun(run)}</Mono>\n        </Link>\n      </td>\n      <td>\n        <Box flex={{direction: 'column', gap: 5}}>\n          {isHiddenAssetGroupJob(run.pipelineName) ? (\n            <AssetKeyTagCollection assetKeys={assetKeysForRun(run)} />\n          ) : (\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <PipelineReference\n                isJob={isJob}\n                showIcon\n                pipelineName={run.pipelineName}\n                pipelineHrefContext=\"no-link\"\n              />\n              <Link\n                to={\n                  repo\n                    ? workspacePipelinePath({\n                        repoName: repo.match.repository.name,\n                        repoLocation: repo.match.repositoryLocation.name,\n                        pipelineName: run.pipelineName,\n                        isJob,\n                      })\n                    : workspacePipelinePathGuessRepo(run.pipelineName)\n                }\n              >\n                <Icon name=\"open_in_new\" color={Colors.Blue500} />\n              </Link>\n            </Box>\n          )}\n          <RunTags\n            tags={run.tags}\n            mode={isJob ? (run.mode !== 'default' ? run.mode : null) : run.mode}\n            onAddTag={onAddTag}\n          />\n        </Box>\n      </td>\n      <td>\n        <PipelineSnapshotLink\n          snapshotId={run.pipelineSnapshotId || ''}\n          pipelineName={run.pipelineName}\n          size=\"normal\"\n        />\n      </td>\n      <td>\n        <RunTime run={run} />\n        <RunStateSummary run={run} />\n      </td>\n      {additionalColumns}\n      <td>\n        <RunActionsMenu run={run} />\n      </td>\n    </Row>\n  );\n};\n\nconst Row = styled.tr<{highlighted: boolean}>`\n  ${({highlighted}) =>\n    highlighted ? `box-shadow: inset 3px 3px #bfccd6, inset -3px -3px #bfccd6;` : null}\n`;\n","import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  variables: Omit<Omit<TVars, 'cusor'>, 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    partialRefetch: true,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n","// eslint-disable-next-line no-restricted-imports\nimport {\n  Box,\n  Colors,\n  CommonMenuItemProps,\n  IconWrapper,\n  iconWithColor,\n  MenuItem,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface MenuLinkProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof MenuItem>, 'icon' | 'onClick'>,\n    LinkProps {}\n\n/**\n * If you want to use a menu item as a link, use `MenuLink` and provide a `to` prop.\n */\nexport const MenuLink: React.FC<MenuLinkProps> = (props) => {\n  const {icon, intent, text, disabled, ...rest} = props;\n\n  if (disabled) {\n    return <MenuItem disabled icon={icon} intent={intent} text={text} />;\n  }\n  return (\n    <StyledMenuLink {...rest}>\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n        {iconWithColor(icon, intent)}\n        <div>{text}</div>\n      </Box>\n    </StyledMenuLink>\n  );\n};\n\nconst StyledMenuLink = styled(Link)`\n  text-decoration: none;\n\n  border-radius: 4px;\n  display: block;\n  line-height: 20px;\n  padding: 6px 8px 6px 12px;\n  transition: background-color 50ms, box-shadow 150ms;\n  align-items: flex-start;\n  user-select: none;\n\n  /**\n   * Use margin instead of align-items: center because the contents of the menu item may wrap \n   * in unusual circumstances.\n   */\n  ${IconWrapper} {\n    margin-top: 2px;\n  }\n\n  ${IconWrapper}:first-child {\n    margin-left: -4px;\n  }\n\n  &&&:link,\n  &&&:visited,\n  &&&:hover,\n  &&&:active {\n    color: ${Colors.Gray900};\n    text-decoration: none;\n  }\n\n  &&&:hover {\n    background: ${Colors.Gray100};\n  }\n`;\n"],"names":["reducer","state","action","copy","Set","Array","from","checkedIds","type","payload","checked","id","add","delete","lastCheckedId","allIds","indexOfLast","indexOf","indexOfChecked","sort","start","end","ii","initialState","useSelectionReducer","React","dispatch","onToggleFactory","values","shiftKey","onToggleAll","refineToError","data","launchPipelineReexecution","__typename","Error","errorText","error","message","initializeState","selectedRuns","frozenRuns","step","reexecution","completed","errors","reexecutionDialogReducer","prevState","ReexecutionDialog","props","isOpen","onClose","onComplete","reexecutionStrategy","current","count","Object","keys","length","useMutation","LAUNCH_PIPELINE_REEXECUTION_MUTATION","reexecute","mutate","runList","runId","variables","reexecutionParams","parentRunId","strategy","canQuicklyClose","Dialog","title","ReexecutionStrategy","canEscapeKeyClose","canOutsideClickClose","Group","direction","spacing","value","intent","Math","max","animate","progressContent","errorCount","successCount","alignItems","Icon","name","color","Colors","map","slice","completionContent","Button","onClick","disabled","buttons","RunActionsMenu","run","refetch","RunsQueryRefetchContext","visibleDialog","setVisibleDialog","rootServerURI","AppContext","usePermissionsDEPRECATED","canTerminatePipelineExecution","canDeletePipelineRun","canLaunchPipelineReexecution","history","useHistory","copyConfig","useCopyToClipboard","onCompleted","useLazyQuery","PIPELINE_ENVIRONMENT_YAML_QUERY","loadEnv","called","loading","closeDialogs","pipelineRun","pipelineRunOrError","runConfigYaml","repoMatch","useRepositoryForRun","isFinished","doneStatuses","status","isJob","isThisThingAJob","match","pipelineName","infoReady","Popover","content","Menu","tagName","text","icon","Tooltip","OPEN_LAUNCHPAD_UNKNOWN","position","targetTagName","MenuLink","to","workspacePathFromRunDetails","repositoryName","repository","repositoryLocationName","repositoryLocation","enabled","disabledReason","getReexecutionVariables","style","result","handleLaunchResult","behavior","download","href","onOpening","TerminationDialog","canTerminate","DeletionDialog","onTerminateInstead","options","lineNumbers","mode","topBorder","SharedToaster","RunBulkActionsMenu","selected","clearSelection","unfinishedRuns","filter","r","unfinishedIDs","unfinishedMap","reduce","accum","selectedIDs","deletionMap","failedRuns","failedStatuses","failedMap","reexecutableRuns","reexecutableMap","rightIcon","gql","RUN_FRAGMENT_FOR_REPOSITORY_MATCH","RunTable","runs","onAddTag","highlightedIds","actionBarComponents","canTerminateOrDelete","useRepositoryOptions","anyFilter","Box","padding","vertical","left","right","margin","NonIdealState","description","flex","gap","AnchorButton","A","anyPipelines","repositoryOrigin","repoAddress","buildRepoAddress","repo","findRepositoryAmongOptions","selectedFragments","has","Table","width","paddingTop","paddingBottom","Checkbox","indeterminate","size","onChange","e","target","HTMLInputElement","additionalColumnHeaders","RunRow","additionalColumns","additionalColumnsForRow","onToggleChecked","isHighlighted","includes","RUN_TABLE_RUN_FRAGMENT","RUN_TIME_FRAGMENT","pipelines","find","pipelineOrJob","Row","highlighted","nativeEvent","MouseEvent","getModifierState","RunStatusTag","titleForRun","isHiddenAssetGroupJob","AssetKeyTagCollection","assetKeys","assetKeysForRun","PipelineReference","showIcon","pipelineHrefContext","workspacePipelinePath","repoName","repoLocation","workspacePipelinePathGuessRepo","RunTags","tags","snapshotId","pipelineSnapshotId","styled","useCursorPaginatedQuery","cursorStack","setCursorStack","useQueryPersistedState","queryKey","cursor","setCursor","queryVars","limit","pageSize","queryResult","useQuery","query","partialRefetch","notifyOnNetworkStatusChange","resultArray","getResultArray","paginationProps","hasPrevCursor","hasNextCursor","popCursor","nextStack","pop","advanceCursor","nextCursor","nextCursorForResult","reset","undefined","rest","StyledMenuLink","iconWithColor","Link","IconWrapper"],"sourceRoot":""}