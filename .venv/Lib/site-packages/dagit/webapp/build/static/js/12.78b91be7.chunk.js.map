{"version":3,"file":"static/js/12.78b91be7.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetPageHeader.tsx","../../core/src/assets/AssetTableFragment.tsx","../../core/src/workspace/VirtualizedAssetTable.tsx","../../core/src/assets/AssetWipeDialog.tsx","../../core/src/assets/AssetTable.tsx","../../core/src/assets/AssetsEmptyState.tsx","../../core/src/assets/useAssetView.tsx","../../core/src/assets/AssetsCatalogTable.tsx","../../core/src/assets/useAssetSearch.tsx","../../core/src/workspace/ReloadAllButton.tsx","../../core/src/assets/AssetActionMenu.tsx","../../core/src/workspace/VirtualizedAssetRow.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {BreadcrumbProps, Breadcrumbs} from '@blueprintjs/core';\nimport {Box, Colors, PageHeader, Heading, Icon} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ntype Props = {assetKey: {path: string[]}} & Partial<React.ComponentProps<typeof PageHeader>>;\n\nexport const AssetPageHeader: React.FC<Props> = ({assetKey, ...extra}) => {\n  const breadcrumbs = React.useMemo(() => {\n    const list: BreadcrumbProps[] = [{text: 'Assets', href: '/assets'}];\n\n    assetKey.path.reduce((accum: string, elem: string) => {\n      const href = `${accum}/${encodeURIComponent(elem)}`;\n      list.push({text: elem, href});\n      return href;\n    }, '/assets');\n\n    return list;\n  }, [assetKey.path]);\n\n  return (\n    <PageHeader\n      title={\n        <Box\n          flex={{alignItems: 'center', gap: 4}}\n          style={{maxWidth: '600px', overflow: 'hidden', marginBottom: 4}}\n        >\n          <BreadcrumbsWithSlashes\n            items={breadcrumbs}\n            currentBreadcrumbRenderer={({text}) => <Heading>{text}</Heading>}\n            breadcrumbRenderer={({text, href}) => (\n              <Heading>\n                <BreadcrumbLink to={href || '#'}>{text}</BreadcrumbLink>\n              </Heading>\n            )}\n          />\n        </Box>\n      }\n      {...extra}\n    />\n  );\n};\n\nexport const AssetGlobalLineageLink = () => (\n  <Link to=\"/asset-groups\">\n    <Box flex={{gap: 4}}>\n      <Icon color={Colors.Link} name=\"schema\" />\n      View global asset lineage\n    </Box>\n  </Link>\n);\n\nconst BreadcrumbsWithSlashes = styled(Breadcrumbs)`\n  & li:not(:first-child)::after {\n    background: none;\n    font-size: 20px;\n    font-weight: bold;\n    color: #5c7080;\n    content: '/';\n    width: 8px;\n    line-height: 16px;\n  }\n`;\n\nconst BreadcrumbLink = styled(Link)`\n  color: ${Colors.Gray800};\n\n  :hover,\n  :active {\n    color: ${Colors.Gray800};\n  }\n`;\n","import {gql} from '@apollo/client';\n\nexport const ASSET_TABLE_DEFINITION_FRAGMENT = gql`\n  fragment AssetTableDefinitionFragment on AssetNode {\n    id\n    groupName\n    isSource\n    partitionDefinition {\n      description\n    }\n    description\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ASSET_TABLE_FRAGMENT = gql`\n  fragment AssetTableFragment on Asset {\n    __typename\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      ...AssetTableDefinitionFragment\n    }\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {AssetTableFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedAssetCatalogHeader, VirtualizedAssetRow} from './VirtualizedAssetRow';\nimport {buildRepoAddress} from './buildRepoAddress';\n\ntype Row =\n  | {type: 'asset'; path: string[]; asset: AssetTableFragment}\n  | {type: 'folder'; path: string[]; assets: AssetTableFragment[]};\n\ninterface Props {\n  headerCheckbox: React.ReactNode;\n  prefixPath: string[];\n  groups: {[path: string]: AssetTableFragment[]};\n  checkedPaths: Set<string>;\n  onToggleFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n  onWipe: (assets: AssetTableFragment[]) => void;\n  showRepoColumn: boolean;\n  view?: AssetViewType;\n}\n\nexport const VirtualizedAssetTable: React.FC<Props> = (props) => {\n  const {\n    headerCheckbox,\n    prefixPath,\n    groups,\n    checkedPaths,\n    onToggleFactory,\n    onWipe,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const count = Object.keys(groups).length;\n\n  const rowVirtualizer = useVirtualizer({\n    count,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const rows: Row[] = React.useMemo(() => {\n    return Object.keys(groups).map((key) => {\n      const path = [...prefixPath, ...JSON.parse(key)];\n      const assets = groups[key];\n      const isFolder = assets.length > 1 || path.join('/') !== assets[0].key.path.join('/');\n      return isFolder ? {type: 'folder', path, assets} : {type: 'asset', path, asset: assets[0]};\n    });\n  }, [prefixPath, groups]);\n\n  return (\n    <>\n      <VirtualizedAssetCatalogHeader headerCheckbox={headerCheckbox} view={view} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Row = rows[index];\n              const path = JSON.stringify(row.path);\n              const rowType = () => {\n                if (row.type === 'folder') {\n                  return 'folder';\n                }\n                return row.asset.definition ? 'asset' : 'asset_non_sda';\n              };\n\n              const repoAddress = () => {\n                if (row.type === 'folder' || !row.asset.definition) {\n                  return null;\n                }\n                const repository = row.asset.definition.repository;\n                return buildRepoAddress(repository.name, repository.location.name);\n              };\n\n              const wipeableAssets = row.type === 'folder' ? row.assets : [row.asset];\n\n              return (\n                <VirtualizedAssetRow\n                  key={key}\n                  view={view}\n                  type={rowType()}\n                  path={row.path}\n                  repoAddress={repoAddress()}\n                  showCheckboxColumn\n                  showRepoColumn={showRepoColumn}\n                  height={size}\n                  start={start}\n                  checked={checkedPaths.has(path)}\n                  onToggleChecked={onToggleFactory(path)}\n                  onWipe={() => onWipe(wipeableAssets)}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, RefetchQueriesFunction, useMutation} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\n\nimport {AssetWipeMutation, AssetWipeMutationVariables} from './types/AssetWipeDialog.types';\n\ninterface AssetKey {\n  path: string[];\n}\n\nexport const AssetWipeDialog: React.FC<{\n  assetKeys: AssetKey[];\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (assetKeys: AssetKey[]) => void;\n  requery?: RefetchQueriesFunction;\n}> = ({assetKeys, isOpen, onClose, onComplete, requery}) => {\n  const [requestWipe] = useMutation<AssetWipeMutation, AssetWipeMutationVariables>(\n    ASSET_WIPE_MUTATION,\n    {\n      variables: {assetKeys: assetKeys.map((key) => ({path: key.path || []}))},\n      refetchQueries: requery,\n    },\n  );\n\n  const wipe = async () => {\n    if (!assetKeys.length) {\n      return;\n    }\n    await requestWipe();\n    onComplete(assetKeys);\n  };\n\n  return (\n    <Dialog isOpen={isOpen} title=\"Wipe materializations\" onClose={onClose} style={{width: 600}}>\n      <DialogBody>\n        <Group direction=\"column\" spacing={16}>\n          <div>Are you sure you want to wipe materializations for these assets?</div>\n          <ul style={{paddingLeft: 32, margin: 0}}>\n            {assetKeys.map((assetKey) => {\n              const name = displayNameForAssetKey(assetKey);\n              return (\n                <li style={{marginBottom: 4}} key={name}>\n                  {name}\n                </li>\n              );\n            })}\n          </ul>\n          <div>\n            Assets defined only by their historical materializations will disappear from the Asset\n            Catalog. Software-defined assets will remain unless their definition is also deleted.\n          </div>\n          <strong>This action cannot be undone.</strong>\n        </Group>\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button intent=\"danger\" onClick={wipe}>\n          Wipe\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ASSET_WIPE_MUTATION = gql`\n  mutation AssetWipeMutation($assetKeys: [AssetKeyInput!]!) {\n    wipeAssets(assetKeys: $assetKeys) {\n      ... on AssetWipeSuccess {\n        assetKeys {\n          path\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {RefetchQueriesFunction} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  Tooltip,\n  Checkbox,\n  NonIdealState,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {VirtualizedAssetTable} from '../workspace/VirtualizedAssetTable';\n\nimport {AssetWipeDialog} from './AssetWipeDialog';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {AssetViewType} from './useAssetView';\n\ntype Asset = AssetTableFragment;\ntype AssetKey = {path: string[]};\n\ninterface Props {\n  view: AssetViewType;\n  assets: Asset[];\n  refreshState: QueryRefreshState;\n  actionBarComponents: React.ReactNode;\n  prefixPath: string[];\n  displayPathForAsset: (asset: Asset) => string[];\n  requery?: RefetchQueriesFunction;\n  searchPath: string;\n  searchGroup: AssetGroupSelector | null;\n}\n\nexport const AssetTable: React.FC<Props> = ({\n  assets,\n  actionBarComponents,\n  refreshState,\n  prefixPath,\n  displayPathForAsset,\n  requery,\n  searchPath,\n  searchGroup,\n  view,\n}) => {\n  const [toWipe, setToWipe] = React.useState<AssetKey[] | undefined>();\n\n  const groupedByFirstComponent: {[pathComponent: string]: Asset[]} = {};\n\n  assets.forEach((asset) => {\n    const displayPathKey = JSON.stringify(displayPathForAsset(asset));\n    groupedByFirstComponent[displayPathKey] = [\n      ...(groupedByFirstComponent[displayPathKey] || []),\n      asset,\n    ];\n  });\n\n  const [{checkedIds: checkedPaths}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    Object.keys(groupedByFirstComponent),\n  );\n\n  const checkedAssets: Asset[] = [];\n  const checkedPathsOnscreen: string[] = [];\n\n  const pageDisplayPathKeys = Object.keys(groupedByFirstComponent).sort();\n  pageDisplayPathKeys.forEach((pathKey) => {\n    if (checkedPaths.has(pathKey)) {\n      checkedPathsOnscreen.push(pathKey);\n      checkedAssets.push(...(groupedByFirstComponent[pathKey] || []));\n    }\n  });\n\n  const content = () => {\n    if (!assets.length) {\n      if (searchPath) {\n        return (\n          <Box padding={{top: 64}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                searchGroup ? (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found in{' '}\n                    <strong>{searchGroup.groupName}</strong>\n                  </div>\n                ) : (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={\n              searchGroup ? (\n                <div>\n                  No assets were found in <strong>{searchGroup.groupName}</strong>\n                </div>\n              ) : (\n                'No assets were found'\n              )\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <VirtualizedAssetTable\n        headerCheckbox={\n          <Checkbox\n            indeterminate={\n              checkedPathsOnscreen.length > 0 &&\n              checkedPathsOnscreen.length !== pageDisplayPathKeys.length\n            }\n            checked={\n              checkedPathsOnscreen.length > 0 &&\n              checkedPathsOnscreen.length === pageDisplayPathKeys.length\n            }\n            onChange={(e) => {\n              if (e.target instanceof HTMLInputElement) {\n                onToggleAll(checkedPathsOnscreen.length !== pageDisplayPathKeys.length);\n              }\n            }}\n          />\n        }\n        prefixPath={prefixPath}\n        groups={groupedByFirstComponent}\n        checkedPaths={checkedPaths}\n        onToggleFactory={onToggleFactory}\n        showRepoColumn\n        view={view}\n        onWipe={(assets: Asset[]) => setToWipe(assets.map((asset) => asset.key))}\n      />\n    );\n  };\n\n  return (\n    <>\n      <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n        <Box\n          background={Colors.White}\n          flex={{alignItems: 'center', gap: 12}}\n          padding={{vertical: 8, left: 24, right: 12}}\n          style={{position: 'sticky', top: 0, zIndex: 1}}\n        >\n          {actionBarComponents}\n          <div style={{flex: 1}} />\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            {checkedAssets.some((c) => !c.definition) ? (\n              <Tooltip content=\"One or more selected assets are not software-defined and cannot be launched directly.\">\n                <Button intent=\"primary\" icon={<Icon name=\"materialization\" />} disabled>\n                  {checkedAssets.length > 1\n                    ? `Materialize (${checkedAssets.length.toLocaleString()})`\n                    : 'Materialize'}\n                </Button>\n              </Tooltip>\n            ) : (\n              <LaunchAssetExecutionButton\n                scope={{selected: checkedAssets.map((a) => ({...a.definition!, assetKey: a.key}))}}\n              />\n            )}\n            <MoreActionsDropdown\n              selected={checkedAssets}\n              clearSelection={() => onToggleAll(false)}\n            />\n          </Box>\n        </Box>\n        {content()}\n      </Box>\n      <AssetWipeDialog\n        assetKeys={toWipe || []}\n        isOpen={!!toWipe}\n        onClose={() => setToWipe(undefined)}\n        onComplete={() => setToWipe(undefined)}\n        requery={requery}\n      />\n    </>\n  );\n};\n\nconst MoreActionsDropdown: React.FC<{\n  selected: Asset[];\n  clearSelection: () => void;\n  requery?: RefetchQueriesFunction;\n}> = React.memo(({selected, clearSelection, requery}) => {\n  const [showBulkWipeDialog, setShowBulkWipeDialog] = React.useState<boolean>(false);\n  const {canWipeAssets} = useUnscopedPermissions();\n\n  if (!canWipeAssets.enabled) {\n    return null;\n  }\n\n  const disabled = selected.length === 0;\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"Wipe materializations\"\n              onClick={() => setShowBulkWipeDialog(true)}\n              icon={<Icon name=\"delete\" color={disabled ? Colors.Gray600 : Colors.Red500} />}\n              disabled={disabled}\n              intent=\"danger\"\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <AssetWipeDialog\n        assetKeys={selected.map((asset) => asset.key)}\n        isOpen={showBulkWipeDialog}\n        onClose={() => setShowBulkWipeDialog(false)}\n        onComplete={() => {\n          setShowBulkWipeDialog(false);\n          clearSelection();\n        }}\n        requery={requery}\n      />\n    </>\n  );\n});\n","import {NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nexport const AssetsEmptyState = ({prefixPath}: {prefixPath: string[]}) => (\n  <NonIdealState\n    icon=\"asset\"\n    title=\"Assets\"\n    description={\n      <p>\n        {prefixPath && prefixPath.length\n          ? `There are no matching materialized assets with the specified asset key. `\n          : `There are no known materialized assets. `}\n        Any asset keys that have been specified with an <code>AssetMaterialization</code> during a\n        pipeline run will appear here. See the{' '}\n        <a href=\"https://docs.dagster.io/_apidocs/ops#dagster.AssetMaterialization\">\n          AssetMaterialization documentation\n        </a>{' '}\n        for more information.\n      </p>\n    }\n  />\n);\n","import {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst ASSET_VIEW_KEY = 'AssetViewPreference';\n\nexport type AssetViewType = 'flat' | 'directory';\n\nconst validateSavedAssetView = (storedValue: any) =>\n  storedValue === 'flat' || storedValue === 'directory' ? storedValue : 'flat';\n\nexport const useAssetView = () => {\n  return useStateWithStorage<AssetViewType>(ASSET_VIEW_KEY, validateSavedAssetView);\n};\n","import {gql, QueryResult, useQuery} from '@apollo/client';\nimport {Box, TextInput, Suggest, MenuItem, Icon, ButtonGroup} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {ClearButton} from '../ui/ClearButton';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\nimport {AssetTable} from './AssetTable';\nimport {ASSET_TABLE_DEFINITION_FRAGMENT, ASSET_TABLE_FRAGMENT} from './AssetTableFragment';\nimport {AssetsEmptyState} from './AssetsEmptyState';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogGroupTableQuery,\n  AssetCatalogGroupTableNodeFragment,\n  AssetCatalogGroupTableQueryVariables,\n} from './types/AssetsCatalogTable.types';\nimport {useAssetSearch} from './useAssetSearch';\nimport {AssetViewType, useAssetView} from './useAssetView';\n\ntype Asset = AssetTableFragment;\n\nfunction useAllAssets(\n  groupSelector?: AssetGroupSelector,\n): {\n  query: QueryResult<AssetCatalogTableQuery, any> | QueryResult<AssetCatalogGroupTableQuery, any>;\n  assets: Asset[] | undefined;\n  error: PythonErrorFragment | undefined;\n} {\n  const assetsQuery = useQuery<AssetCatalogTableQuery>(ASSET_CATALOG_TABLE_QUERY, {\n    skip: !!groupSelector,\n    notifyOnNetworkStatusChange: true,\n  });\n  const groupQuery = useQuery<AssetCatalogGroupTableQuery, AssetCatalogGroupTableQueryVariables>(\n    ASSET_CATALOG_GROUP_TABLE_QUERY,\n    {\n      skip: !groupSelector,\n      variables: {group: groupSelector},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  return React.useMemo(() => {\n    if (groupSelector) {\n      const assetNodes = groupQuery.data?.assetNodes;\n      return {\n        query: groupQuery,\n        error: undefined,\n        assets: assetNodes?.map(definitionToAssetTableFragment),\n      };\n    }\n\n    const assetsOrError = assetsQuery.data?.assetsOrError;\n    return {\n      query: assetsQuery,\n      error: assetsOrError?.__typename === 'PythonError' ? assetsOrError : undefined,\n      assets: assetsOrError?.__typename === 'AssetConnection' ? assetsOrError.nodes : undefined,\n    };\n  }, [assetsQuery, groupQuery, groupSelector]);\n}\n\ninterface AssetCatalogTableProps {\n  prefixPath: string[];\n  setPrefixPath: (prefixPath: string[]) => void;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport const AssetsCatalogTable: React.FC<AssetCatalogTableProps> = ({\n  prefixPath,\n  setPrefixPath,\n  groupSelector,\n}) => {\n  const [view, setView] = useAssetView();\n  const [search, setSearch] = useQueryPersistedState<string | undefined>({queryKey: 'q'});\n  const [searchGroup, setSearchGroup] = useQueryPersistedState<AssetGroupSelector | null>({\n    queryKey: 'g',\n    decode: (qs) => (qs.group ? JSON.parse(qs.group) : null),\n    encode: (group) => ({group: group ? JSON.stringify(group) : undefined}),\n  });\n\n  const searchPath = (search || '')\n    .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n    .toLowerCase()\n    .trim();\n\n  const {assets, query, error} = useAllAssets(groupSelector);\n  const pathMatches = useAssetSearch(searchPath, assets || []);\n\n  const filtered = React.useMemo(\n    () =>\n      pathMatches.filter((a) => !searchGroup || isEqual(buildAssetGroupSelector(a), searchGroup)),\n    [pathMatches, searchGroup],\n  );\n\n  const {displayPathForAsset, displayed} =\n    view === 'flat'\n      ? buildFlatProps(filtered, prefixPath)\n      : buildNamespaceProps(filtered, prefixPath);\n\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (view !== 'directory' && prefixPath.length) {\n      setView('directory');\n    }\n  }, [view, setView, prefixPath]);\n\n  if (error) {\n    return <PythonErrorInfo error={error} />;\n  }\n\n  if (!assets) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  if (!assets.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <AssetsEmptyState prefixPath={prefixPath} />\n      </Box>\n    );\n  }\n\n  return (\n    <AssetTable\n      view={view}\n      assets={displayed}\n      actionBarComponents={\n        <>\n          <ButtonGroup<AssetViewType>\n            activeItems={new Set([view])}\n            buttons={[\n              {id: 'flat', icon: 'view_list', tooltip: 'List view'},\n              {id: 'directory', icon: 'folder', tooltip: 'Folder view'},\n            ]}\n            onClick={(view) => {\n              setView(view);\n              if (view === 'flat' && prefixPath.length) {\n                setPrefixPath([]);\n              }\n            }}\n          />\n          <TextInput\n            value={search || ''}\n            style={{width: '30vw', minWidth: 150, maxWidth: 400}}\n            placeholder={\n              prefixPath.length\n                ? `Filter asset keys in ${prefixPath.join('/')}…`\n                : `Filter asset keys…`\n            }\n            onChange={(e: React.ChangeEvent<any>) => setSearch(e.target.value)}\n          />\n          {!groupSelector ? (\n            <AssetGroupSuggest assets={assets} value={searchGroup} onChange={setSearchGroup} />\n          ) : undefined}\n        </>\n      }\n      refreshState={refreshState}\n      prefixPath={prefixPath || []}\n      searchPath={searchPath}\n      searchGroup={searchGroup}\n      displayPathForAsset={displayPathForAsset}\n      requery={(_) => [{query: ASSET_CATALOG_TABLE_QUERY}]}\n    />\n  );\n};\n\nconst AssetGroupSuggest: React.FC<{\n  assets: Asset[];\n  value: AssetGroupSelector | null;\n  onChange: (g: AssetGroupSelector | null) => void;\n}> = ({assets, value, onChange}) => {\n  const assetGroups = React.useMemo(\n    () =>\n      uniqBy(\n        (assets || []).map(buildAssetGroupSelector).filter((a) => !!a) as AssetGroupSelector[],\n        (a) => JSON.stringify(a),\n      ).sort((a, b) => a.groupName.localeCompare(b.groupName)),\n    [assets],\n  );\n\n  const repoContextNeeded = React.useMemo(() => {\n    // This is a bit tricky - the first time we find a groupName it sets the key to `false`.\n    // The second time, it sets the value to `true` + tells use we need to show the repo name\n    const result: {[groupName: string]: boolean} = {};\n    assetGroups.forEach(\n      (group) => (result[group.groupName] = result.hasOwnProperty(group.groupName)),\n    );\n    return result;\n  }, [assetGroups]);\n\n  return (\n    <Suggest<AssetGroupSelector>\n      selectedItem={value}\n      items={assetGroups}\n      inputProps={{\n        style: {width: 220},\n        placeholder: 'Filter asset groups…',\n        rightElement: value ? (\n          <ClearButton onClick={() => onChange(null)} style={{marginTop: 5, marginRight: 4}}>\n            <Icon name=\"cancel\" />\n          </ClearButton>\n        ) : undefined,\n      }}\n      inputValueRenderer={(partition) => partition.groupName}\n      itemPredicate={(query, partition) =>\n        query.length === 0 || partition.groupName.includes(query)\n      }\n      itemsEqual={isEqual}\n      itemRenderer={(assetGroup, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          onClick={props.handleClick}\n          key={JSON.stringify(assetGroup)}\n          text={\n            <>\n              {assetGroup.groupName}\n              {repoContextNeeded[assetGroup.groupName] ? (\n                <span style={{opacity: 0.5, paddingLeft: 4}}>\n                  {buildRepoPathForHuman(\n                    assetGroup.repositoryName,\n                    assetGroup.repositoryLocationName,\n                  )}\n                </span>\n              ) : undefined}\n            </>\n          }\n        />\n      )}\n      noResults={<MenuItem disabled={true} text=\"No asset groups\" />}\n      onItemSelect={onChange}\n    />\n  );\n};\n\nexport const ASSET_CATALOG_TABLE_QUERY = gql`\n  query AssetCatalogTableQuery {\n    assetsOrError {\n      __typename\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${ASSET_TABLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_CATALOG_GROUP_TABLE_QUERY = gql`\n  query AssetCatalogGroupTableQuery($group: AssetGroupSelector) {\n    assetNodes(group: $group) {\n      id\n      ...AssetCatalogGroupTableNode\n    }\n  }\n\n  fragment AssetCatalogGroupTableNode on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    ...AssetTableDefinitionFragment\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n\n// When we load the AssetCatalogTable for a particular asset group, we retrieve `assetNodes`,\n// not `assets`. To narrow the scope of this difference we coerce the nodes to look like\n// AssetCatalogTableQuery results.\nfunction definitionToAssetTableFragment(definition: AssetCatalogGroupTableNodeFragment): Asset {\n  return {__typename: 'Asset', id: definition.id, key: definition.assetKey, definition};\n}\n\nfunction buildAssetGroupSelector(a: Asset) {\n  return a.definition && a.definition.groupName\n    ? {\n        groupName: a.definition.groupName,\n        repositoryName: a.definition.repository.name,\n        repositoryLocationName: a.definition.repository.location.name,\n      }\n    : null;\n}\n\nfunction buildFlatProps(assets: Asset[], _: string[]) {\n  return {\n    displayed: assets,\n    displayPathForAsset: (asset: Asset) => asset.key.path,\n  };\n}\n\nfunction buildNamespaceProps(assets: Asset[], prefixPath: string[]) {\n  // Return all assets from the next PAGE_SIZE namespaces - the AssetTable component will later\n  // group them by namespace\n\n  const namespaceForAsset = (asset: Asset) => {\n    return asset.key.path.slice(prefixPath.length, prefixPath.length + 1);\n  };\n\n  // Only consider assets that start with the prefix path\n  const assetsWithPathPrefix = assets.filter((asset) =>\n    asset.key.path.join(',').startsWith(prefixPath.join(',')),\n  );\n\n  const namespaces = Array.from(\n    new Set(assetsWithPathPrefix.map((asset) => JSON.stringify(namespaceForAsset(asset)))),\n  )\n    .map((x) => JSON.parse(x))\n    .sort();\n\n  return {\n    displayPathForAsset: namespaceForAsset,\n    displayed: filterAssetsByNamespace(\n      assetsWithPathPrefix,\n      namespaces.map((ns) => [...prefixPath, ...ns]),\n    ),\n  };\n}\n\nconst filterAssetsByNamespace = (assets: Asset[], paths: string[][]) => {\n  return assets.filter((asset) =>\n    paths.some((path) => path.every((part, i) => part === asset.key.path[i])),\n  );\n};\n","import * as React from 'react';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\n\nconst useSanitizedAssetSearch = (searchValue: string) => {\n  return React.useMemo(() => {\n    return (searchValue || '')\n      .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n      .toLowerCase()\n      .trim();\n  }, [searchValue]);\n};\n\nexport const useAssetSearch = <A extends {key: {path: string[]}}>(\n  searchValue: string,\n  assets: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assets;\n    }\n    return assets.filter((a) => tokenForAssetKey(a.key).toLowerCase().includes(sanitizedSearch));\n  }, [assets, sanitizedSearch]);\n};\n\nexport const useAssetNodeSearch = <A extends {assetKey: {path: string[]}}>(\n  searchValue: string,\n  assetNodes: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assetNodes;\n    }\n    return assetNodes.filter((a) =>\n      tokenForAssetKey(a.assetKey).toLowerCase().includes(sanitizedSearch),\n    );\n  }, [assetNodes, sanitizedSearch]);\n};\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {canReloadWorkspace} = useUnscopedPermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace.enabled) {\n    return (\n      <Tooltip content={canReloadWorkspace.disabledReason}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {useMaterializationAction} from './LaunchAssetExecutionButton';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\n\ninterface Props {\n  repoAddress: RepoAddress | null;\n  asset: AssetTableFragment;\n  onWipe?: (assets: AssetTableFragment[]) => void;\n}\n\nexport const AssetActionMenu: React.FC<Props> = (props) => {\n  const {repoAddress, asset, onWipe} = props;\n  const {canWipeAssets, canLaunchPipelineExecution} = usePermissionsForLocation(\n    repoAddress?.location,\n  );\n  const {path} = asset.key;\n\n  const {onClick, loading, launchpadElement} = useMaterializationAction();\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <Tooltip\n              content=\"Shift+click to add configuration\"\n              placement=\"left\"\n              display=\"block\"\n              useDisabledButtonTooltipFix\n            >\n              <MenuItem\n                text=\"Materialize\"\n                icon={loading ? <Spinner purpose=\"body-text\" /> : 'materialization'}\n                disabled={!canLaunchPipelineExecution || loading}\n                onClick={(e) => onClick([asset.key], e)}\n              />\n            </Tooltip>\n            <MenuLink\n              text=\"Show in group\"\n              to={\n                repoAddress && asset.definition?.groupName\n                  ? workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${asset.definition.groupName}`,\n                    )\n                  : ''\n              }\n              disabled={!asset?.definition}\n              icon=\"asset_group\"\n            />\n            <MenuLink\n              text=\"View neighbors\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'neighbors'})}\n              disabled={!asset?.definition}\n              icon=\"graph_neighbors\"\n            />\n            <MenuLink\n              text=\"View upstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'upstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_upstream\"\n            />\n            <MenuLink\n              text=\"View downstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'downstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_downstream\"\n            />\n            <MenuItem\n              text=\"Wipe materializations\"\n              icon=\"delete\"\n              disabled={!onWipe || !canWipeAssets.enabled}\n              intent=\"danger\"\n              onClick={() => canWipeAssets.enabled && onWipe && onWipe([asset])}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      {launchpadElement}\n    </>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Checkbox, Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_LIVE_FRAGMENT} from '../asset-graph/AssetNode';\nimport {AssetLatestRunWithNotices, AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {buildLiveDataForNode} from '../asset-graph/Utils';\nimport {ASSET_LATEST_INFO_FRAGMENT} from '../asset-graph/useLiveDataForAssetKeys';\nimport {AssetActionMenu} from '../assets/AssetActionMenu';\nimport {AssetLink} from '../assets/AssetLink';\nimport {ASSET_TABLE_FRAGMENT} from '../assets/AssetTableFragment';\nimport {StaleTag} from '../assets/StaleTag';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetTableFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleAssetQuery, SingleAssetQueryVariables} from './types/VirtualizedAssetRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.3fr 1fr 1fr 80px';\nconst TEMPLATE_COLUMNS_FOR_CATALOG = '76px 1.3fr 1.3fr 1fr 1fr 80px';\n\ninterface AssetRowProps {\n  checked: boolean;\n  type: 'folder' | 'asset' | 'asset_non_sda';\n  view?: AssetViewType;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  showRepoColumn: boolean;\n  path: string[];\n  repoAddress: RepoAddress | null;\n  height: number;\n  start: number;\n  onWipe: (assets: AssetTableFragment[]) => void;\n}\n\nexport const VirtualizedAssetRow = (props: AssetRowProps) => {\n  const {\n    path,\n    type,\n    repoAddress,\n    start,\n    height,\n    checked,\n    onToggleChecked,\n    onWipe,\n    showCheckboxColumn = false,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n\n  const [queryAsset, queryResult] = useLazyQuery<SingleAssetQuery, SingleAssetQueryVariables>(\n    SINGLE_ASSET_QUERY,\n    {\n      variables: {input: {path}},\n    },\n  );\n\n  useDelayedRowQuery(queryAsset);\n  const {data} = queryResult;\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const asset = React.useMemo(() => {\n    if (data?.assetOrError.__typename === 'Asset') {\n      return data.assetOrError;\n    }\n    return null;\n  }, [data]);\n\n  const liveData = React.useMemo(() => {\n    if (asset?.definition && data?.assetsLatestInfo) {\n      const latestInfoForAsset = data.assetsLatestInfo[0];\n      if (latestInfoForAsset) {\n        return buildLiveDataForNode(asset.definition, latestInfoForAsset);\n      }\n    }\n    return null;\n  }, [data, asset]);\n\n  const linkUrl = assetDetailsPathForKey({path});\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        $showRepoColumn={showRepoColumn}\n      >\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Checkbox checked={checked} onChange={onChange} />\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{alignItems: 'center'}}>\n            <div style={{flex: 1, minWidth: 0}}>\n              <AssetLink\n                path={type === 'folder' || view === 'directory' ? path.slice(-1) : path}\n                url={linkUrl}\n                isGroup={type === 'folder'}\n                icon={type}\n                textStyle=\"middle-truncate\"\n              />\n            </div>\n            {asset?.definition && (\n              <AssetComputeKindTag\n                reduceColor\n                reduceText\n                definition={asset.definition}\n                style={{position: 'relative'}}\n              />\n            )}\n          </Box>\n          <div\n            style={{\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            <Caption style={{color: Colors.Gray500, whiteSpace: 'nowrap'}}>\n              {asset?.definition?.description}\n            </Caption>\n          </div>\n        </RowCell>\n        {showRepoColumn ? (\n          <RowCell>\n            {repoAddress ? (\n              <Box\n                flex={{direction: 'column', gap: 4}}\n                style={{maxWidth: '100%', overflow: 'hidden'}}\n              >\n                <RepositoryLink repoAddress={repoAddress} showIcon showRefresh={false} />\n                {asset?.definition && asset?.definition.groupName ? (\n                  <Link\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${asset.definition.groupName}`,\n                    )}\n                  >\n                    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                      <Icon color={Colors.Gray400} name=\"asset_group\" />\n                      {asset.definition.groupName}\n                    </Box>\n                  </Link>\n                ) : null}\n              </Box>\n            ) : (\n              <span>{'\\u2013'}</span>\n            )}\n          </RowCell>\n        ) : null}\n        <RowCell>\n          {liveData?.lastMaterialization ? (\n            <Box flex={{direction: 'column'}}>\n              <Box flex={{gap: 4, alignItems: 'flex-start', justifyContent: 'space-between'}}>\n                <AssetRunLink\n                  runId={liveData.lastMaterialization.runId}\n                  event={{\n                    stepKey: liveData.stepKey,\n                    timestamp: liveData.lastMaterialization.timestamp,\n                  }}\n                >\n                  <TimestampDisplay\n                    timestamp={Number(liveData.lastMaterialization.timestamp) / 1000}\n                    timeFormat={{showSeconds: false, showTimezone: false}}\n                  />\n                </AssetRunLink>\n                <div style={{marginTop: '-2px'}}>\n                  <StaleTag liveData={liveData} />\n                </div>\n              </Box>\n              {liveData.partitionStats && (\n                <AssetPartitionStatsText stats={liveData.partitionStats} />\n              )}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} noneString={'\\u2013'} />\n          )}\n        </RowCell>\n        <RowCell>\n          {liveData ? (\n            <AssetLatestRunWithNotices liveData={liveData} includeFreshness includeRunStatus />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} noneString={'\\u2013'} />\n          )}\n        </RowCell>\n        <RowCell>\n          {asset ? (\n            <AssetActionMenu repoAddress={repoAddress} asset={asset} onWipe={onWipe} />\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst AssetPartitionStatsText: React.FC<{\n  stats: {numMaterialized: number; numPartitions: number};\n}> = ({stats}) => {\n  const {numMaterialized, numPartitions} = stats;\n  const numMissing = numPartitions - numMaterialized;\n  return (\n    <span>\n      {numMissing > 0\n        ? `${numPartitions.toLocaleString()} Partitions (${numMissing.toLocaleString()} missing)`\n        : `${numPartitions.toLocaleString()} Partitions`}\n    </span>\n  );\n};\n\nexport const VirtualizedAssetCatalogHeader: React.FC<{\n  headerCheckbox: React.ReactNode;\n  view: AssetViewType;\n}> = ({headerCheckbox, view}) => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS_FOR_CATALOG,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>{headerCheckbox}</HeaderCell>\n      <HeaderCell>{view === 'flat' ? 'Asset name' : 'Asset key prefix'}</HeaderCell>\n      <HeaderCell>Repository / Asset group</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nexport const VirtualizedAssetHeader: React.FC<{\n  nameLabel: React.ReactNode;\n}> = ({nameLabel}) => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>{nameLabel}</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showRepoColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showRepoColumn}) =>\n    $showRepoColumn ? TEMPLATE_COLUMNS_FOR_CATALOG : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SINGLE_ASSET_QUERY = gql`\n  query SingleAssetQuery($input: AssetKeyInput!) {\n    assetOrError(assetKey: $input) {\n      ... on Asset {\n        id\n        assetMaterializations(limit: 1) {\n          runId\n          timestamp\n        }\n        definition {\n          id\n          computeKind\n          ...AssetNodeLiveFragment\n        }\n        ...AssetTableFragment\n      }\n    }\n    assetsLatestInfo(assetKeys: [$input]) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_TABLE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n"],"names":["AssetPageHeader","assetKey","extra","breadcrumbs","React","list","text","href","path","reduce","accum","elem","encodeURIComponent","push","title","flex","alignItems","gap","style","maxWidth","overflow","marginBottom","BreadcrumbsWithSlashes","items","currentBreadcrumbRenderer","breadcrumbRenderer","BreadcrumbLink","to","AssetGlobalLineageLink","color","Colors","name","styled","Breadcrumbs","Link","ASSET_TABLE_DEFINITION_FRAGMENT","gql","ASSET_TABLE_FRAGMENT","VirtualizedAssetTable","props","headerCheckbox","prefixPath","groups","checkedPaths","onToggleFactory","onWipe","showRepoColumn","view","parentRef","count","Object","keys","length","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","rows","map","key","JSON","parse","assets","join","type","asset","ref","$totalHeight","index","size","start","row","stringify","wipeableAssets","VirtualizedAssetRow","definition","repoAddress","repository","buildRepoAddress","location","showCheckboxColumn","height","checked","has","onToggleChecked","AssetWipeDialog","assetKeys","isOpen","onClose","onComplete","requery","useMutation","ASSET_WIPE_MUTATION","variables","refetchQueries","requestWipe","wipe","Dialog","width","Group","direction","spacing","paddingLeft","margin","displayNameForAssetKey","topBorder","Button","intent","onClick","PYTHON_ERROR_FRAGMENT","AssetTable","actionBarComponents","refreshState","displayPathForAsset","searchPath","searchGroup","toWipe","setToWipe","groupedByFirstComponent","forEach","displayPathKey","useSelectionReducer","checkedIds","onToggleAll","checkedAssets","checkedPathsOnscreen","pageDisplayPathKeys","sort","pathKey","Box","background","padding","vertical","left","right","position","top","zIndex","QueryRefresh","some","c","Tooltip","content","icon","Icon","disabled","toLocaleString","LaunchAssetExecutionButton","scope","selected","a","MoreActionsDropdown","clearSelection","Checkbox","indeterminate","onChange","e","target","HTMLInputElement","NonIdealState","description","groupName","undefined","showBulkWipeDialog","setShowBulkWipeDialog","useUnscopedPermissions","canWipeAssets","enabled","Popover","Menu","AssetsEmptyState","validateSavedAssetView","storedValue","AssetsCatalogTable","setPrefixPath","groupSelector","useStateWithStorage","setView","useQueryPersistedState","queryKey","search","setSearch","decode","qs","group","encode","setSearchGroup","replace","toLowerCase","trim","assetsQuery","useQuery","ASSET_CATALOG_TABLE_QUERY","skip","notifyOnNetworkStatusChange","groupQuery","ASSET_CATALOG_GROUP_TABLE_QUERY","assetNodes","data","query","error","definitionToAssetTableFragment","assetsOrError","__typename","nodes","useAllAssets","pathMatches","useAssetSearch","filtered","filter","isEqual","buildAssetGroupSelector","_","displayed","buildFlatProps","namespaceForAsset","slice","assetsWithPathPrefix","startsWith","namespaces","Array","from","Set","x","filterAssetsByNamespace","ns","buildNamespaceProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","PythonErrorInfo","ButtonGroup","activeItems","buttons","id","tooltip","TextInput","value","minWidth","placeholder","AssetGroupSuggest","Loading","purpose","assetGroups","uniqBy","b","localeCompare","repoContextNeeded","result","hasOwnProperty","Suggest","selectedItem","inputProps","rightElement","ClearButton","C","marginTop","marginRight","inputValueRenderer","partition","itemPredicate","includes","itemsEqual","itemRenderer","assetGroup","active","modifiers","handleClick","opacity","buildRepoPathForHuman","repositoryName","repositoryLocationName","noResults","onItemSelect","paths","every","part","i","useSanitizedAssetSearch","searchValue","sanitizedSearch","tokenForAssetKey","useAssetNodeSearch","ReloadAllButton","label","canReloadWorkspace","useRepositoryLocationReload","reloadFn","reloadFnForWorkspace","reloading","tryReload","errorLocationId","setIsOpen","loading","onTryReload","onDismiss","canEscapeKeyClose","canOutsideClickClose","disabledReason","AssetActionMenu","usePermissionsForLocation","canLaunchPipelineExecution","useMaterializationAction","launchpadElement","placement","display","useDisabledButtonTooltipFix","Spinner","MenuLink","workspacePathFromAddress","assetDetailsPathForKey","lineageScope","TEMPLATE_COLUMNS","TEMPLATE_COLUMNS_FOR_CATALOG","useLazyQuery","SINGLE_ASSET_QUERY","input","queryAsset","queryResult","useDelayedRowQuery","assetOrError","liveData","assetsLatestInfo","latestInfoForAsset","buildLiveDataForNode","linkUrl","$height","$start","RowGrid","border","side","$showRepoColumn","shiftKey","nativeEvent","MouseEvent","getModifierState","AssetLink","url","isGroup","textStyle","reduceColor","reduceText","textOverflow","whiteSpace","RepositoryLink","showIcon","showRefresh","lastMaterialization","justifyContent","runId","event","stepKey","timestamp","TimestampDisplay","Number","timeFormat","showSeconds","showTimezone","StaleTag","partitionStats","AssetPartitionStatsText","stats","noneString","includeFreshness","includeRunStatus","numMaterialized","numPartitions","numMissing","VirtualizedAssetCatalogHeader","gridTemplateColumns","fontSize","VirtualizedAssetHeader","nameLabel","ASSET_NODE_LIVE_FRAGMENT","ASSET_LATEST_INFO_FRAGMENT"],"sourceRoot":""}