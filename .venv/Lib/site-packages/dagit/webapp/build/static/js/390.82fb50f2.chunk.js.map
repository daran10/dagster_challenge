{"version":3,"file":"static/js/390.82fb50f2.chunk.js","mappings":"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","sources":["../../core/src/app/browser.tsx","../../core/src/runs/RunListTabs.tsx","../../core/src/runs/RunTags.tsx","../../core/src/runs/RunsPageHeader.tsx","../../core/src/runs/ScheduledRunListRoot.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/SchedulesNextTicks.tsx","../../core/src/ui/Loading.tsx","../../core/src/ui/MenuLink.tsx","../../core/src/ui/TabLink.tsx","../../ui/src/components/Alert.tsx","../../ui/src/components/Page.tsx","../../../node_modules/lodash/isEqual.js"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A hook that provides a mechanism for copying a string, triggered by user\n * behavior. If the Clipboard API is available, use it directly.\n *\n * The Clipboard can be undefined in an insecure context\n * (https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API), so we\n * also provide a fallback that uses an offscreen input and `execCommand` to\n * copy the contents. This is less ideal because it steals focus and is a DOM\n * hack, but it should still be effective enough for our needs.\n */\nexport const useCopyToClipboard = () => {\n  const clipboardAPI = navigator.clipboard;\n  const node = React.useRef<HTMLInputElement | null>(null);\n\n  React.useEffect(() => {\n    if (!clipboardAPI) {\n      node.current = document.createElement('input');\n      node.current.style.position = 'fixed';\n      node.current.style.top = '-10000px';\n      document.body.appendChild(node.current);\n    }\n\n    return () => {\n      node.current && document.body.removeChild(node.current);\n    };\n  }, [clipboardAPI]);\n\n  return React.useCallback(\n    (text: string) => {\n      if (clipboardAPI) {\n        clipboardAPI.writeText(text);\n      } else if (node.current) {\n        node.current.value = text;\n        node.current.select();\n        document.execCommand('copy');\n      }\n    },\n    [clipboardAPI],\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Tabs, TokenizingFieldValue} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\n\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {TabLink} from '../ui/TabLink';\n\nimport {doneStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'done':\n      return 'Runs | Done';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\ninterface Props {\n  queuedCount: number | null;\n  inProgressCount: number | null;\n}\n\nexport const RunListTabs: React.FC<Props> = React.memo(({queuedCount, inProgressCount}) => {\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  return (\n    <Tabs selectedTabId={selectedTab} id=\"run-tabs\">\n      <TabLink title=\"All runs\" to={urlForStatus([])} id=\"all\" />\n      <TabLink\n        title=\"Queued\"\n        count={queuedCount ?? 'indeterminate'}\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n      />\n      <TabLink\n        title=\"In progress\"\n        count={inProgressCount ?? 'indeterminate'}\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n      />\n      <TabLink title=\"Done\" to={urlForStatus(Array.from(doneStatuses))} id=\"done\" />\n      <TabLink title=\"Scheduled\" to=\"/runs/scheduled\" id=\"scheduled\" />\n    </Tabs>\n  );\n});\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(doneStatuses, statusTokens)) {\n    return 'done';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n","import {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {__ASSET_JOB_PREFIX} from '../asset-graph/Utils';\n\nimport {DagsterTag, RunTag, TagType} from './RunTag';\nimport {RunFilterToken} from './RunsFilterInput';\n\n// Sort these tags to the start of the list.\nexport const priorityTagSet = new Set([\n  DagsterTag.ScheduleName as string,\n  DagsterTag.SensorName as string,\n  DagsterTag.Backfill as string,\n]);\n\nconst renamedTags = {\n  [DagsterTag.SolidSelection]: DagsterTag.OpSelection,\n};\n\nexport const canAddTagToFilter = (key: string) => {\n  return key !== DagsterTag.SolidSelection && key !== DagsterTag.OpSelection;\n};\n\nexport const RunTags: React.FC<{\n  tags: TagType[];\n  mode: string | null;\n  onAddTag?: (token: RunFilterToken) => void;\n}> = React.memo(({tags, onAddTag, mode}) => {\n  const copy = useCopyToClipboard();\n\n  const copyAction = React.useMemo(\n    () => ({\n      label: 'Copy tag',\n      onClick: (tag: TagType) => {\n        copy(`${tag.key}:${tag.value}`);\n        SharedToaster.show({intent: 'success', message: 'Copied tag!'});\n      },\n    }),\n    [copy],\n  );\n\n  const addToFilterAction = React.useMemo(\n    () =>\n      onAddTag\n        ? {\n            label: 'Add tag to filter',\n            onClick: (tag: TagType) => {\n              onAddTag({token: 'tag', value: `${tag.key}=${tag.value}`});\n            },\n          }\n        : null,\n    [onAddTag],\n  );\n\n  const actionsForTag = (tag: TagType) => {\n    const list = [copyAction];\n    if (addToFilterAction && canAddTagToFilter(tag.key)) {\n      list.push(addToFilterAction);\n    }\n    return list.filter((item) => !!item);\n  };\n\n  const displayedTags = React.useMemo(() => {\n    const priority = [];\n    const others = [];\n    const copiedTags = tags.map(({key, value}) => ({key, value}));\n    for (const tag of copiedTags) {\n      const {key} = tag;\n      if (renamedTags.hasOwnProperty(key)) {\n        tag.key = renamedTags[key];\n      }\n\n      if (\n        tag.value.startsWith(__ASSET_JOB_PREFIX) &&\n        (key === DagsterTag.PartitionSet || key === DagsterTag.StepSelection)\n      ) {\n        continue;\n      } else if (priorityTagSet.has(key)) {\n        priority.push(tag);\n      } else {\n        others.push(tag);\n      }\n    }\n    return [...priority, ...others];\n  }, [tags]);\n\n  if (!tags.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'row', wrap: 'wrap', gap: 4}}>\n      {mode ? <RunTag tag={{key: 'mode', value: mode}} /> : null}\n      {displayedTags.map((tag, idx) => (\n        <RunTag tag={tag} key={idx} actions={actionsForTag(tag)} />\n      ))}\n    </Box>\n  );\n});\n","import {useQuery} from '@apollo/client';\nimport {PageHeader, Heading, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  QueryRefreshState,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\n\nimport {RunListTabs, RUN_TABS_COUNT_QUERY} from './RunListTabs';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsFilterForSearchTokens, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\n\ninterface Props {\n  refreshStates: QueryRefreshState[];\n}\n\nexport const RunsPageHeader = (props: Props) => {\n  const {refreshStates} = props;\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n\n  const runCountResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = runCountResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const countRefreshState = useQueryRefreshAtInterval(runCountResult, FIFTEEN_SECONDS);\n\n  const refreshState = useMergedRefresh(countRefreshState, ...refreshStates);\n\n  return (\n    <PageHeader\n      title={<Heading>Runs</Heading>}\n      tabs={\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n          <RunListTabs queuedCount={queuedCount} inProgressCount={inProgressCount} />\n          <Box padding={{bottom: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n          </Box>\n        </Box>\n      }\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Page, Alert, ButtonLink, Colors, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {\n  REPOSITORY_FOR_NEXT_TICKS_FRAGMENT,\n  SchedulesNextTicks,\n} from '../schedules/SchedulesNextTicks';\nimport {Loading} from '../ui/Loading';\n\nimport {RunsPageHeader} from './RunsPageHeader';\nimport {ScheduledRunsListQuery} from './types/ScheduledRunListRoot.types';\n\nexport const ScheduledRunListRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Runs | Scheduled');\n\n  const queryResult = useQuery<ScheduledRunsListQuery>(SCHEDULED_RUNS_LIST_QUERY, {\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <RunsPageHeader refreshStates={[refreshState]} />\n      <Loading queryResult={queryResult}>\n        {(result) => {\n          const {repositoriesOrError, instance} = result;\n          if (repositoriesOrError.__typename === 'PythonError') {\n            const message = repositoriesOrError.message;\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load scheduled ticks.</div>\n                    <ButtonLink\n                      color={Colors.Link}\n                      underline=\"always\"\n                      onClick={() => {\n                        showCustomAlert({\n                          title: 'Python error',\n                          body: message,\n                        });\n                      }}\n                    >\n                      View error\n                    </ButtonLink>\n                  </Group>\n                }\n              />\n            );\n          }\n          return (\n            <>\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n              <SchedulesNextTicks repos={repositoriesOrError.nodes} />\n            </>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default ScheduledRunListRoot;\n\nconst SCHEDULED_RUNS_LIST_QUERY = gql`\n  query ScheduledRunsListQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n    repositoriesOrError {\n      ... on RepositoryConnection {\n        nodes {\n          __typename\n          id\n          ... on Repository {\n            id\n            ...RepositoryForNextTicksFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${REPOSITORY_FOR_NEXT_TICKS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths) {\n      const schedulerHealth = schedulerHealths[0];\n      healthy = !!(schedulerHealth.required && schedulerHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  MenuItem,\n  Menu,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Table,\n  Subheading,\n  StyledReadOnlyCodeMirror,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationStatus} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RunTags} from '../runs/RunTags';\nimport {MenuLink} from '../ui/MenuLink';\nimport {\n  findRepositoryAmongOptions,\n  isThisThingAJob,\n  useRepository,\n  useRepositoryOptions,\n} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {\n  RepositoryForNextTicksFragment,\n  ScheduleFutureTickEvaluationResultFragment,\n  ScheduleFutureTickRunRequestFragment,\n  ScheduleNextFiveTicksFragment,\n  ScheduleTickConfigQuery,\n  ScheduleTickConfigQueryVariables,\n} from './types/SchedulesNextTicks.types';\n\ninterface ScheduleTick {\n  schedule: ScheduleNextFiveTicksFragment;\n  timestamp: number;\n  repoAddress: RepoAddress;\n}\n\nexport const SchedulesNextTicks: React.FC<{\n  repos: RepositoryForNextTicksFragment[];\n}> = React.memo(({repos}) => {\n  const nextTicks: ScheduleTick[] = [];\n  let anyPipelines = false;\n  let anySchedules = false;\n\n  const {options} = useRepositoryOptions();\n\n  repos.forEach((repo) => {\n    const {schedules} = repo;\n    anySchedules = anySchedules || schedules.length > 0;\n\n    const repoAddress = {\n      name: repo.name,\n      location: repo.location.name,\n    };\n\n    const futureTickSchedules = schedules.filter(\n      (schedule) =>\n        schedule.futureTicks.results.length &&\n        schedule.scheduleState.status === InstigationStatus.RUNNING,\n    );\n\n    const minMaxTimestamp = Math.min(\n      ...futureTickSchedules.map(\n        (schedule) =>\n          schedule.futureTicks.results[schedule.futureTicks.results.length - 1].timestamp!,\n      ),\n    );\n\n    futureTickSchedules.forEach((schedule) => {\n      schedule.futureTicks.results.forEach((tick) => {\n        if (tick.timestamp! <= minMaxTimestamp) {\n          nextTicks.push({schedule, timestamp: tick.timestamp!, repoAddress});\n        }\n      });\n    });\n\n    if (!anyPipelines) {\n      anyPipelines = schedules.some((schedule) => !!schedule.mode);\n    }\n  });\n\n  nextTicks.sort((a, b) => a.timestamp - b.timestamp);\n\n  if (!nextTicks.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No scheduled ticks\"\n          description={\n            anySchedules ? (\n              <>\n                There are no running schedules.{' '}\n                <Link to=\"/overview/schedules\">Start a schedule</Link> to see scheduled ticks.\n              </>\n            ) : (\n              <>\n                There are no schedules in this workspace. Create a running schedule to view its\n                scheduled ticks.\n              </>\n            )\n          }\n          action={\n            anySchedules ? null : (\n              <ExternalAnchorButton\n                icon={<Icon name=\"open_in_new\" />}\n                href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\"\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table $monospaceFont={false}>\n      <thead>\n        <tr>\n          <th style={{width: '260px'}}>Timestamp</th>\n          <th style={{width: '30%'}}>Schedule</th>\n          <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          <th>Metadata</th>\n        </tr>\n      </thead>\n      <tbody>\n        {nextTicks.map(({schedule, timestamp, repoAddress}) => {\n          const repo = findRepositoryAmongOptions(options, repoAddress);\n          return (\n            <tr key={`${schedule.id}:${timestamp}`}>\n              <td>\n                <TimestampDisplay\n                  timestamp={timestamp}\n                  timezone={schedule.executionTimezone}\n                  timeFormat={{showSeconds: false, showTimezone: true}}\n                />\n              </td>\n              <td>\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}>\n                  {schedule.name}\n                </Link>\n              </td>\n              <td>\n                <PipelineReference\n                  pipelineName={schedule.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isThisThingAJob(repo, schedule.pipelineName)}\n                />\n              </td>\n              <td>\n                <NextTickMenu\n                  repoAddress={repoAddress}\n                  schedule={schedule}\n                  tickTimestamp={timestamp}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n});\n\nconst NextTickMenu: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = React.memo(({repoAddress, schedule, tickTimestamp}) => {\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName: schedule.name,\n  };\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [loadTickConfig, {called, loading, data}] = useLazyQuery<\n    ScheduleTickConfigQuery,\n    ScheduleTickConfigQueryVariables\n  >(SCHEDULE_TICK_CONFIG_QUERY, {\n    variables: {\n      scheduleSelector,\n      tickTimestamp,\n    },\n  });\n\n  const infoReady = called ? !loading : false;\n  const evaluationResult =\n    data?.scheduleOrError?.__typename === 'Schedule'\n      ? data.scheduleOrError.futureTick.evaluationResult\n      : null;\n\n  const menuItems = infoReady ? (\n    <NextTickMenuItems\n      repoAddress={repoAddress}\n      schedule={schedule}\n      loading={loading}\n      onItemOpen={setOpen}\n      evaluationResult={evaluationResult}\n    />\n  ) : (\n    <Spinner purpose=\"body-text\" />\n  );\n  return (\n    <>\n      <Popover\n        content={<Menu>{menuItems}</Menu>}\n        position=\"bottom-right\"\n        onOpening={() => {\n          if (!called) {\n            loadTickConfig();\n          }\n        }}\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <NextTickDialog\n        repoAddress={repoAddress}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        schedule={schedule}\n        tickTimestamp={tickTimestamp}\n        evaluationResult={evaluationResult}\n      />\n    </>\n  );\n});\n\nconst NextTickMenuItems: React.FC<{\n  repoAddress: RepoAddress;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  loading: boolean;\n  onItemOpen: (value: boolean) => void;\n}> = ({repoAddress, schedule, evaluationResult, loading, onItemOpen}) => {\n  if (!evaluationResult) {\n    return <MenuItem text=\"Could not preview tick for this schedule\" />;\n  }\n\n  if (evaluationResult.skipReason) {\n    return <MenuItem text=\"View skip reason...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (evaluationResult.error) {\n    return <MenuItem text=\"View error...\" onClick={() => onItemOpen(true)} />;\n  }\n\n  if (!evaluationResult.runRequests || !evaluationResult.runRequests.length) {\n    return <MenuItem text=\"No runs requested for this projected schedule tick\" />;\n  }\n\n  if (evaluationResult.runRequests.length === 1) {\n    const runRequest = evaluationResult.runRequests[0];\n    const runConfigYaml = runRequest ? runRequest.runConfigYaml : '';\n    return (\n      <>\n        <MenuItem\n          text={loading ? 'Loading Configuration...' : 'View Configuration...'}\n          icon=\"open_in_new\"\n          onClick={() => onItemOpen(true)}\n        />\n        <MenuLink\n          text=\"Open in Launchpad...\"\n          icon=\"edit\"\n          target=\"_blank\"\n          to={workspacePathFromAddress(\n            repoAddress,\n            `/pipeline_or_job/${schedule.pipelineName}/playground/setup?${qs.stringify({\n              mode: schedule.mode,\n              config: runConfigYaml,\n              solidSelection: schedule.solidSelection,\n            })}`,\n          )}\n        />\n      </>\n    );\n  }\n\n  return (\n    <MenuItem\n      text={`View ${evaluationResult.runRequests.length} run requests...`}\n      icon=\"edit\"\n      target=\"_blank\"\n      onClick={() => onItemOpen(true)}\n    />\n  );\n};\n\nconst NextTickDialog: React.FC<{\n  repoAddress: RepoAddress;\n  isOpen: boolean;\n  setOpen: (value: boolean) => void;\n  evaluationResult: ScheduleFutureTickEvaluationResultFragment | null;\n  schedule: ScheduleNextFiveTicksFragment;\n  tickTimestamp: number;\n}> = ({repoAddress, evaluationResult, schedule, tickTimestamp, setOpen, isOpen}) => {\n  const [\n    selectedRunRequest,\n    setSelectedRunRequest,\n  ] = React.useState<ScheduleFutureTickRunRequestFragment | null>(\n    evaluationResult && evaluationResult.runRequests && evaluationResult.runRequests.length === 1\n      ? evaluationResult.runRequests[0]\n      : null,\n  );\n\n  const copy = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  React.useEffect(() => {\n    if (\n      evaluationResult &&\n      evaluationResult.runRequests &&\n      evaluationResult.runRequests.length === 1\n    ) {\n      setSelectedRunRequest(evaluationResult.runRequests[0]);\n    }\n  }, [evaluationResult]);\n\n  const close = () => {\n    setSelectedRunRequest(null);\n    setOpen(false);\n  };\n\n  let body;\n  if (!evaluationResult) {\n    body = null;\n  } else if (selectedRunRequest) {\n    body = (\n      <Box flex={{direction: 'column', gap: 20}}>\n        <Box flex={{direction: 'column', gap: 12}} padding={{top: 16, horizontal: 24}}>\n          <Subheading>Tags</Subheading>\n          {selectedRunRequest.tags.length ? (\n            <RunTags tags={selectedRunRequest.tags} mode={isJob ? null : schedule.mode} />\n          ) : null}\n        </Box>\n        <div>\n          <Box\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            padding={{left: 24, bottom: 16}}\n          >\n            <Subheading>Config</Subheading>\n          </Box>\n          <StyledReadOnlyCodeMirror\n            value={selectedRunRequest.runConfigYaml}\n            options={{lineNumbers: true, mode: 'yaml'}}\n          />\n        </div>\n      </Box>\n    );\n  } else if (evaluationResult.error) {\n    body = (\n      <DialogBody>\n        <PythonErrorInfo error={evaluationResult.error} />\n      </DialogBody>\n    );\n  } else if (evaluationResult.skipReason) {\n    body = (\n      <DialogBody>\n        <SkipWrapper>{evaluationResult.skipReason}</SkipWrapper>\n      </DialogBody>\n    );\n  } else if (evaluationResult.runRequests) {\n    body = (\n      <DialogBody>\n        <RunRequestBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Run key</th>\n                <th>Config</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {evaluationResult.runRequests.map((runRequest, idx) => {\n                if (!runRequest) {\n                  return null;\n                }\n                return (\n                  <tr key={idx}>\n                    <td>{runRequest.runKey || <span>&mdash;</span>}</td>\n                    <td>\n                      <ButtonLink\n                        onClick={() => setSelectedRunRequest(runRequest)}\n                        underline={false}\n                      >\n                        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                          <Icon name=\"open_in_new\" color={Colors.Gray400} />\n                          <span>View config</span>\n                        </Group>\n                      </ButtonLink>\n                    </td>\n                    <td>\n                      <Popover\n                        content={\n                          <Menu>\n                            <MenuLink\n                              text=\"Open in Launchpad...\"\n                              icon=\"edit\"\n                              target=\"_blank\"\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/${isJob ? 'jobs' : 'pipelines'}/${\n                                  schedule.pipelineName\n                                }/playground/setup?${qs.stringify({\n                                  mode: schedule.mode,\n                                  config: runRequest.runConfigYaml,\n                                  solidSelection: schedule.solidSelection,\n                                })}`,\n                              )}\n                            />\n                          </Menu>\n                        }\n                        position=\"bottom\"\n                      >\n                        <Button icon={<Icon name=\"expand_more\" />} />\n                      </Popover>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </RunRequestBody>\n      </DialogBody>\n    );\n  }\n\n  return (\n    <Dialog\n      onClose={() => close()}\n      style={{width: '50vw'}}\n      title={\n        <Box flex={{direction: 'row', gap: 4}}>\n          <TimestampDisplay timestamp={tickTimestamp} timezone={schedule.executionTimezone} />\n          {selectedRunRequest?.runKey ? <div>: {selectedRunRequest?.runKey}</div> : null}\n        </Box>\n      }\n      isOpen={isOpen}\n    >\n      {body}\n      <DialogFooter topBorder>\n        {selectedRunRequest ? (\n          <Button\n            autoFocus={false}\n            onClick={() => {\n              copy(selectedRunRequest.runConfigYaml);\n              SharedToaster.show({\n                intent: 'success',\n                icon: 'copy_to_clipboard_done',\n                message: 'Copied!',\n              });\n            }}\n          >\n            Copy config\n          </Button>\n        ) : null}\n        <Button intent=\"primary\" autoFocus={true} onClick={() => close()}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT = gql`\n  fragment ScheduleNextFiveTicksFragment on Schedule {\n    id\n    name\n    executionTimezone\n    mode\n    solidSelection\n    pipelineName\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n\nexport const REPOSITORY_FOR_NEXT_TICKS_FRAGMENT = gql`\n  fragment RepositoryForNextTicksFragment on Repository {\n    name\n    id\n    location {\n      id\n      name\n    }\n    schedules {\n      id\n      ...ScheduleNextFiveTicksFragment\n    }\n  }\n\n  ${SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT}\n`;\n\nconst SCHEDULE_TICK_CONFIG_QUERY = gql`\n  query ScheduleTickConfigQuery($scheduleSelector: ScheduleSelector!, $tickTimestamp: Int!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        futureTick(tickTimestamp: $tickTimestamp) {\n          evaluationResult {\n            ...ScheduleFutureTickEvaluationResult\n          }\n        }\n      }\n    }\n  }\n\n  fragment ScheduleFutureTickEvaluationResult on TickEvaluation {\n    runRequests {\n      ...ScheduleFutureTickRunRequest\n    }\n    skipReason\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment ScheduleFutureTickRunRequest on RunRequest {\n    runKey\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunRequestBody = styled.div`\n  font-size: 13px;\n`;\n\nconst SkipWrapper = styled.div`\n  background-color: #fdfcf2;\n  border: 1px solid ${Colors.Yellow500};\n  border-radius: 3px;\n`;\n","import {ApolloError, QueryResult} from '@apollo/client';\nimport {Box, NonIdealState, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\ninterface ILoadingProps<TData> {\n  queryResult: QueryResult<TData, any>;\n  children: (data: TData) => React.ReactNode;\n  renderError?: (error: ApolloError) => React.ReactNode;\n  allowStaleData?: boolean;\n  purpose: 'section' | 'page';\n}\n\nconst BLANK_LOADING_DELAY_MSEC = 500;\n\nexport const Loading = <TData extends Record<string, any>>(props: ILoadingProps<TData>) => {\n  const {children, purpose, allowStaleData = false, renderError} = props;\n  const {error, data, loading} = props.queryResult;\n\n  const [blankLoading, setBlankLoading] = React.useState(true);\n  const isLoading = !data || (loading && !allowStaleData) || Object.keys(data as any).length === 0;\n\n  React.useEffect(() => {\n    let timer: ReturnType<typeof setTimeout> | undefined;\n\n    // Wait a brief moment so that we don't awkwardly flash the loading bar.\n    // This is often enough time for data to become available.\n    if (isLoading) {\n      timer = setTimeout(() => setBlankLoading(false), BLANK_LOADING_DELAY_MSEC);\n    } else {\n      setBlankLoading(true);\n    }\n\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [isLoading]);\n\n  // either error.networkError or error.graphQLErrors is set,\n  // so check that the error is not just a transient network error\n  if (error) {\n    if (renderError) {\n      return <>{renderError(error)}</>;\n    }\n    if (!error.networkError) {\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"error\" title=\"GraphQL Error - see console for details\" />\n        </Box>\n      );\n    }\n  }\n\n  if (isLoading) {\n    return blankLoading ? null : <LoadingSpinner purpose={purpose} />;\n  }\n\n  return <>{children(data as TData)}</>;\n};\n\nexport const LoadingSpinner: React.FC<{purpose: 'page' | 'section'}> = ({purpose}) => {\n  const isPage = purpose === 'page';\n  return (\n    <Box\n      padding={64}\n      flex={{\n        grow: isPage ? 1 : undefined,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      style={isPage ? {height: '100%'} : undefined}\n    >\n      <Spinner purpose={purpose} />\n    </Box>\n  );\n};\n\nLoading.defaultProps = {\n  purpose: 'page',\n};\n","// eslint-disable-next-line no-restricted-imports\nimport {\n  Box,\n  Colors,\n  CommonMenuItemProps,\n  IconWrapper,\n  iconWithColor,\n  MenuItem,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface MenuLinkProps\n  extends CommonMenuItemProps,\n    Omit<React.ComponentProps<typeof MenuItem>, 'icon' | 'onClick'>,\n    LinkProps {}\n\n/**\n * If you want to use a menu item as a link, use `MenuLink` and provide a `to` prop.\n */\nexport const MenuLink: React.FC<MenuLinkProps> = (props) => {\n  const {icon, intent, text, disabled, ...rest} = props;\n\n  if (disabled) {\n    return <MenuItem disabled icon={icon} intent={intent} text={text} />;\n  }\n  return (\n    <StyledMenuLink {...rest}>\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n        {iconWithColor(icon, intent)}\n        <div>{text}</div>\n      </Box>\n    </StyledMenuLink>\n  );\n};\n\nconst StyledMenuLink = styled(Link)`\n  text-decoration: none;\n\n  border-radius: 4px;\n  display: block;\n  line-height: 20px;\n  padding: 6px 8px 6px 12px;\n  transition: background-color 50ms, box-shadow 150ms;\n  align-items: flex-start;\n  user-select: none;\n\n  /**\n   * Use margin instead of align-items: center because the contents of the menu item may wrap \n   * in unusual circumstances.\n   */\n  ${IconWrapper} {\n    margin-top: 2px;\n  }\n\n  ${IconWrapper}:first-child {\n    margin-left: -4px;\n  }\n\n  &&&:link,\n  &&&:visited,\n  &&&:hover,\n  &&&:active {\n    color: ${Colors.Gray900};\n    text-decoration: none;\n  }\n\n  &&&:hover {\n    background: ${Colors.Gray100};\n  }\n`;\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {Group} from './Group';\nimport {IconName, Icon} from './Icon';\n\nexport type AlertIntent = 'info' | 'warning' | 'error' | 'success';\n\ninterface Props {\n  intent: AlertIntent;\n  title: React.ReactNode;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  onClose?: () => void;\n}\n\nexport const Alert: React.FC<Props> = (props) => {\n  const {intent, title, description, onClose} = props;\n\n  const {backgroundColor, borderColor, icon, iconColor, textColor} = React.useMemo(() => {\n    switch (intent) {\n      case 'warning':\n        return {\n          backgroundColor: Colors.Yellow50,\n          borderColor: Colors.Yellow500,\n          icon: 'warning',\n          iconColor: Colors.Yellow500,\n          textColor: Colors.Yellow700,\n        };\n      case 'error':\n        return {\n          backgroundColor: Colors.Red50,\n          borderColor: Colors.Red500,\n          icon: 'error',\n          iconColor: Colors.Red500,\n          textColor: Colors.Red700,\n        };\n      case 'success':\n        return {\n          backgroundColor: Colors.Green50,\n          borderColor: Colors.Green500,\n          icon: 'done',\n          iconColor: Colors.Green500,\n          textColor: Colors.Green700,\n        };\n      case 'info':\n      default:\n        return {\n          backgroundColor: Colors.Blue50,\n          borderColor: Colors.Blue500,\n          icon: 'info',\n          iconColor: Colors.Blue500,\n          textColor: Colors.Blue700,\n        };\n    }\n  }, [intent]);\n\n  return (\n    <AlertContainer\n      background={backgroundColor}\n      $borderColor={borderColor}\n      $textColor={textColor}\n      padding={{horizontal: 16, vertical: 12}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n        <Group direction=\"row\" spacing={12} alignItems=\"flex-start\">\n          {props.icon || <Icon name={icon as IconName} color={iconColor} />}\n          <Group direction=\"column\" spacing={8}>\n            <AlertTitle>{title}</AlertTitle>\n            {description ? <AlertDescription>{description}</AlertDescription> : null}\n          </Group>\n        </Group>\n        {!!onClose ? (\n          <ButtonWrapper onClick={onClose}>\n            <Icon name=\"close\" color={textColor} />\n          </ButtonWrapper>\n        ) : null}\n      </Box>\n    </AlertContainer>\n  );\n};\n\nAlert.defaultProps = {\n  intent: 'info',\n};\n\nconst ButtonWrapper = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  flex-direction: column;\n  height: fit-content;\n`;\n\nconst AlertContainer = styled(Box)<{$borderColor: string; $textColor: string}>`\n  box-shadow: inset 4px 0 ${({$borderColor}) => $borderColor};\n  color: ${({$textColor}) => $textColor};\n\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: ${({$textColor}) => $textColor};\n    text-decoration: underline;\n  }\n`;\n\nconst AlertTitle = styled.div`\n  font-weight: 600;\n`;\n\nconst AlertDescription = styled.div`\n  font-weight: 400;\n`;\n","import styled from 'styled-components/macro';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n"],"names":["useCopyToClipboard","clipboardAPI","navigator","clipboard","node","React","current","document","createElement","style","position","top","body","appendChild","removeChild","text","writeText","value","select","execCommand","RunListTabs","queuedCount","inProgressCount","useQueryPersistedRunFilters","filterTokens","selectedTab","useSelectedRunsTab","useDocumentTitle","selected","getDocumentTitle","urlForStatus","statuses","tokensMinusStatus","filter","token","statusTokens","map","status","runsPathWithFilters","selectedTabId","id","title","to","count","Array","from","queuedStatuses","inProgressStatuses","doneStatuses","pathname","useLocation","Set","isEqual","RUN_TABS_COUNT_QUERY","gql","priorityTagSet","DagsterTag","renamedTags","RunTags","tags","onAddTag","mode","copy","copyAction","label","onClick","tag","key","SharedToaster","intent","message","addToFilterAction","actionsForTag","list","push","item","displayedTags","priority","others","copiedTags","hasOwnProperty","startsWith","__ASSET_JOB_PREFIX","has","length","flex","direction","wrap","gap","idx","actions","RunsPageHeader","props","refreshStates","runsFilterForSearchTokens","runCountResult","useQuery","variables","queuedFilter","inProgressFilter","countData","data","__typename","countRefreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refreshState","useMergedRefresh","tabs","justifyContent","alignItems","padding","bottom","ScheduledRunListRoot","useTrackPageView","queryResult","SCHEDULED_RUNS_LIST_QUERY","partialRefetch","notifyOnNetworkStatusChange","result","repositoriesOrError","instance","spacing","color","Colors","underline","showCustomAlert","daemonHealth","vertical","horizontal","repos","nodes","INSTANCE_HEALTH_FRAGMENT","REPOSITORY_FOR_NEXT_TICKS_FRAGMENT","PYTHON_ERROR_FRAGMENT","SchedulerInfo","boxProps","healthy","undefined","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","description","href","SchedulesNextTicks","nextTicks","anyPipelines","anySchedules","options","useRepositoryOptions","forEach","repo","schedules","repoAddress","name","location","futureTickSchedules","schedule","futureTicks","results","scheduleState","InstigationStatus","minMaxTimestamp","Math","min","timestamp","tick","some","sort","a","b","$monospaceFont","width","findRepositoryAmongOptions","timezone","executionTimezone","timeFormat","showSeconds","showTimezone","workspacePathFromAddress","pipelineName","pipelineHrefContext","isJob","isThisThingAJob","NextTickMenu","tickTimestamp","icon","action","scheduleSelector","repoAddressToSelector","scheduleName","isOpen","setOpen","useLazyQuery","SCHEDULE_TICK_CONFIG_QUERY","loadTickConfig","called","loading","infoReady","evaluationResult","scheduleOrError","futureTick","menuItems","NextTickMenuItems","onItemOpen","purpose","content","onOpening","NextTickDialog","skipReason","error","runRequests","runRequest","runConfigYaml","target","qs","config","solidSelection","selectedRunRequest","setSelectedRunRequest","useRepository","close","border","side","left","lineNumbers","SkipWrapper","RunRequestBody","runKey","onClose","topBorder","autoFocus","SCHEDULE_NEXT_FIVE_TICKS_FRAGMENT","styled","Loading","children","allowStaleData","renderError","blankLoading","setBlankLoading","isLoading","Object","keys","timer","setTimeout","clearTimeout","networkError","LoadingSpinner","isPage","grow","height","defaultProps","MenuLink","disabled","rest","StyledMenuLink","iconWithColor","Link","IconWrapper","TabLink","containerProps","getTabA11yProps","getTabContent","titleText","tabCSS","Alert","backgroundColor","borderColor","iconColor","textColor","AlertContainer","background","$borderColor","$textColor","AlertTitle","AlertDescription","ButtonWrapper","Box","Page","baseIsEqual","require","module","exports","other"],"sourceRoot":""}