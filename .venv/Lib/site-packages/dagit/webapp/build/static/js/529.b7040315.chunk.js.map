{"version":3,"file":"static/js/529.b7040315.chunk.js","mappings":"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","sources":["../../core/src/instance/RepoFilterButton.tsx","../../core/src/overview/OverviewTabs.tsx","../../core/src/instance/InstanceBackfills.tsx","../../core/src/overview/OverviewJobsTable.tsx","../../core/src/overview/sortRepoBuckets.tsx","../../core/src/overview/visibleRepoKeys.tsx","../../core/src/overview/OverviewJobsRoot.tsx","../../core/src/overview/OverviewSchedulesTable.tsx","../../core/src/overview/OverviewSchedulesRoot.tsx","../../core/src/overview/OverviewSensorsTable.tsx","../../core/src/overview/OverviewSensorsRoot.tsx","../../core/src/instance/NextTick.tsx","../../core/src/runs/useRunsForTimeline.tsx","../../core/src/overview/OverviewTimelineRoot.tsx","../../core/src/runs/useHourWindow.tsx","../../core/src/overview/OverviewRoot.tsx"],"sourcesContent":["import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"timeline\" title=\"Timeline\" to=\"/overview/timeline\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './BackfillTable';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<InstanceHealthForBackfillsQuery>(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.backfillId\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          backfillId\n          status\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nexport const OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewScheduleTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((name) => {\n          flat.push({type: 'schedule', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.scheduleCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No schedules were found in the selected code locations'\n                : 'No schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewScheduleTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <Box\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          >\n            <SchedulerInfo daemonHealth={data?.instance.daemonHealth} />\n          </Box>\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name}) => name);\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewSensorTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((name) => {\n          flat.push({type: 'sensor', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewSensorTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery>(UNLOADABLE_SENSORS_QUERY);\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const sensorNames = sensors.map(({name}) => name);\n\n      if (sensorNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors: sensorNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, CaptionMono} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {InstigationStatus} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {ScheduleFutureTicksFragment} from './types/NextTick.types';\n\nconst TIME_FORMAT = {\n  showTimezone: true,\n  showSeconds: true,\n};\n\ninterface Props {\n  schedules: ScheduleFutureTicksFragment[];\n}\n\nexport const NextTick = (props: Props) => {\n  const {schedules} = props;\n\n  const nextTick = React.useMemo(() => {\n    const timestamps = schedules.map((schedule) => {\n      const {executionTimezone, futureTicks, scheduleState} = schedule;\n      if (scheduleState.status === InstigationStatus.RUNNING) {\n        return {\n          executionTimezone,\n          earliest: Math.min(...futureTicks.results.map(({timestamp}) => timestamp!)),\n        };\n      }\n      return null;\n    });\n\n    return timestamps.reduce((earliestOverall, timestamp) => {\n      if (\n        !earliestOverall ||\n        (timestamp?.earliest && timestamp.earliest < earliestOverall?.earliest)\n      ) {\n        return timestamp;\n      }\n      return earliestOverall;\n    }, null);\n  }, [schedules]);\n\n  if (nextTick) {\n    return (\n      <CaptionMono color={Colors.Gray500}>\n        Next tick:{' '}\n        <TimestampDisplay\n          timestamp={nextTick.earliest}\n          timezone={nextTick.executionTimezone}\n          timeFormat={TIME_FORMAT}\n        />\n      </CaptionMono>\n    );\n  }\n\n  return null;\n};\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (jobTicks.length || jobRuns.length) {\n            jobs.push({\n              key: jobKey,\n              jobName,\n              jobType: isAdHoc ? 'asset' : 'job',\n              repoAddress,\n              path: workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: pipeline.name,\n                isJob: pipeline.isJob,\n              }),\n              runs: [...jobRuns, ...jobTicks],\n            } as TimelineJob);\n          }\n        }\n      }\n    }\n\n    const earliest = jobs.reduce((accum, job) => {\n      const startTimes = job.runs.map((job) => job.startTime);\n      return {...accum, [job.key]: Math.min(...startTimes)};\n    }, {} as {[jobKey: string]: number});\n\n    return jobs.sort((a, b) => earliest[a.key] - earliest[b.key]);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {\n  Page,\n  PageHeader,\n  Heading,\n  Box,\n  TextInput,\n  Button,\n  ButtonGroup,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\nexport const OverviewTimelineRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(() => jobs.filter(({key}) => visibleJobKeys.has(key)), [\n    jobs,\n    visibleJobKeys,\n  ]);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"timeline\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </Page>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagit.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(() => [hourWindow, setHourWindowWithDefault], [\n    hourWindow,\n    setHourWindowWithDefault,\n  ]);\n};\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\n\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/timeline\">\n        <OverviewTimelineRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills\">\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/timeline\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["RepoFilterButton","React","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","icon","label","options","onBrowse","onToggle","selected","padding","top","intent","onClick","name","rightIcon","length","OverviewTabs","props","refreshState","tab","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","bottom","QueryRefresh","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","partitionBackfillsOrError","__typename","results","PAGE_SIZE","backfillId","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","Page","PageHeader","tabs","Loading","allowStaleData","PythonErrorInfo","error","vertical","NonIdealState","description","backfillHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","horizontal","BackfillTable","backfills","slice","refetch","marginTop","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","OverviewJobsTable","repos","parentRef","allKeys","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","overflow","ref","$totalHeight","index","key","size","start","height","expanded","showLocation","has","rightElement","Tooltip","content","placement","Tag","VirtualizedJobRow","sortRepoBuckets","buckets","sort","a","b","aString","bString","localeCompare","visibleRepoKeys","Set","option","buildRepoAddress","repository","repositoryLocation","OverviewJobsRoot","searchValue","setSearchValue","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","loading","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","gap","grow","TextInput","value","onChange","e","target","placeholder","Spinner","purpose","paddingTop","color","Colors","anyReposHidden","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","repositories","repo","pipelines","isHiddenAssetGroupJob","pipeline","OverviewScheduleTable","schedules","scheduleCount","VirtualizedScheduleRow","OverviewSchedulesRoot","OVERVIEW_SCHEDULES_QUERY","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","border","side","SchedulerInfo","setIsOpen","Alert","Button","Dialog","maxWidth","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","Unloadable","scheduleStates","showSubheading","scheduleNames","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","sensorStates","sensorNames","SCHEDULE_FUTURE_TICKS_FRAGMENT","makeJobKey","jobName","RUN_TIMELINE_QUERY","RUN_TIME_FRAGMENT","ONE_HOUR","hourWindowToOffset","hourWindow","OverviewTimelineRoot","defaultValue","validate","useStateWithStorage","setHourWindow","setHourWindowWithDefault","useHourWindow","Date","now","setNow","offsetMsec","setOffsetMsec","timer","setInterval","clearInterval","onPageEarlier","onPageLater","onPageNow","range","Number","LOOKAHEAD_HOURS","runsFilter","end","startSec","endSec","inProgressFilter","statuses","RunStatus","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","repositoryName","location","repositoryLocationName","pipelineName","status","jobsWithRuns","locationEntry","schedule","jobTicks","scheduleState","InstigationStatus","futureTicks","timestamp","isAdHoc","jobKey","jobRuns","jobType","path","workspacePipelinePath","repoName","repoLocation","runs","earliest","reduce","accum","job","startTimes","Math","min","useRunsForTimeline","visibleJobKeys","searchLower","flatMap","visibleJobs","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewRoot","render"],"sourceRoot":""}