{"version":3,"file":"static/js/113.2136a32d.chunk.js","mappings":"wQAMaA,EAMR,SAACC,GACJ,IAAOC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,IAAKC,EAAqCJ,EAArCI,QAAxB,EAA6DJ,EAA5BK,UAAAA,OAAjC,MAA6C,aAA7C,EACMC,EAAUH,IAAYI,EAAAA,EAAAA,GAAuB,CAACN,KAAAA,IAC9CO,EACJP,EACGQ,QAAO,SAACC,EAAOC,EAAMC,GAAd,wBAAyBF,GAAzB,CAAgCE,EAAK,EAAI,MAAQ,GAAID,MAAO,IACnEE,KAAK,KAAOT,EAAU,IAAM,IAEjC,OACE,UAAC,IAAD,CACEU,KAAM,CAACC,UAAW,MAAOC,WAAY,aAAcC,QAAS,eAC5DC,MAAO,CAACC,SAAU,QAFpB,UAIGjB,GACC,SAAC,IAAD,CAAKkB,OAAQ,CAACC,MAAO,EAAGC,IAAK,GAA7B,UACE,SAAC,KAAD,CAAMC,KAAMrB,EAAMsB,MAAOC,EAAAA,EAAAA,YAEzB,MACJ,SAAC,KAAD,CAAMC,GAAIpB,EAASY,MAAO,CAACS,SAAU,UAArC,SACiB,eAAdtB,GACC,iBAAMa,MAAO,CAACU,UAAW,cAAzB,SAAyCpB,KAEzC,SAAC,IAAD,CAAgBqB,KAAMrB,W,+SCzBnBsB,EAAoC,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,QAC3D,OACE,UAACC,EAAA,GAAD,CACEC,SAAUH,EACVI,OACE,iEACqC,KACnC,iBAAMjB,MAAO,CAACkB,SAAU,OAAQC,WAAYC,EAAAA,EAAAA,WAA5C,gBACGP,QADH,IACGA,OADH,EACGA,EAAUQ,gBAIjBP,QAASA,EAVX,WAYE,SAACC,EAAA,GAAD,UACGF,GACC,SAACS,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAIvB,MAAO,CAACwB,UAAW,OAAQC,UAAW,QAAhF,SACGZ,EAASa,eAAeC,KAAI,SAACC,GAAD,OAC3B,yBAA0BA,GAAhBA,QAGZ,QAEN,SAACb,EAAA,GAAD,CAAcc,WAAS,EAAvB,UACE,SAACC,EAAA,GAAD,CAAQC,QAASjB,EAAjB,wB,gSCMKkB,GAAc,SAAC,GAgBrB,IAfLnB,EAeI,EAfJA,SACAoB,EAcI,EAdJA,cACAC,EAaI,EAbJA,mBACAC,EAYI,EAZJA,oBACAC,EAWI,EAXJA,iBACAC,EAUI,EAVJA,iBACAC,EASI,EATJA,0BAUMC,GAAgBC,EAAAA,EAAAA,GACpBC,GACA,CACEC,UAAW,CAACrB,WAAYR,EAASQ,YACjCsB,6BAA6B,IAI3BC,GAAeJ,EAAAA,EAAAA,GACnBK,GACA,CACEH,UAAW,CAACrB,WAAYR,EAASQ,YACjCsB,6BAA6B,IAMjC,EACE9B,EAASiC,cAAgBC,GAAuCH,EAAeL,EADjF,eAAOS,EAAP,KAAoBC,EAApB,MAGAC,EAAAA,EAAAA,IAAmBF,IACnBG,EAAAA,EAAAA,IAA0BF,EAAaG,EAAAA,IAEvC,IAAOC,EAAQJ,EAARI,KACP,EAA2BC,EAAAA,SAAc,WACvC,GAAkD,uBAA1C,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAME,yBAAyBC,YACjC,MAAO,CAACC,OAAQ,KAAMC,SAAU,MAElC,GAAI,0BAA2BL,EAAKE,yBAIlC,MAAO,CAACE,OAHOE,OAAOC,YACpBP,EAAKE,yBAAyBM,sBAAsBlC,KAAI,SAACmC,GAAD,MAAO,CAACA,EAAEC,UAAWD,EAAEE,WAEjEN,SAAU,MAE5B,IAAMA,EAAWL,EAAKE,yBAAyBU,kBAAkBC,QAEjE,MAAO,CAACT,OADOU,GAAAA,CAAQT,GAAU,SAACU,GAAD,OAAOA,EAAEL,aAC1BL,SAAAA,KACf,CAACL,IAbGI,EAAP,EAAOA,OAAQC,EAAf,EAAeA,SAeTW,GAAUC,EAAAA,EAAAA,IAAoB,CAClC,CACEC,MAAO,MACPC,MAAM,oBAAD,OAAsB3D,EAASQ,eAIxC,OACE,2BACE,eAAIrB,MAAO,CAACyE,MAAO,KAAnB,UACE,SAAC,KAAD,CAAMzE,MAAO,CAACkB,SAAU,OAAQwD,WAAY,QAA5C,UACE,SAAC,KAAD,CAAMlE,GAAI6D,EAAV,SAAoBxD,EAASQ,kBAGjC,eAAIrB,MAAO,CAACyE,MAAO,KAAnB,SACG5D,EAAS8D,WAAY,SAACC,EAAA,EAAD,CAAkBD,UAAW9D,EAAS8D,YAAgB,MAE7EzC,GACC,eAAIlC,MAAO,CAACyE,MAAO,OAAnB,UACE,SAACI,GAAD,CAAgBhE,SAAUA,MAE1B,MACJ,eAAIb,MAAO,CAACyE,MAAOxC,EAAgB,IAAM,KAAzC,UACE,SAAC6C,GAAD,CACEjE,SAAUA,EACVoB,cAAeA,EACf8C,SAAU,kBAAMzC,EAA0BzB,SAG9C,eAAIb,MAAO,CAACyE,MAAO,KAAnB,SACGhB,GACC,SAACuB,GAAD,CAAmBnE,SAAUA,EAAU4C,OAAQA,KAE/C,SAAC,KAAD,CAAeR,YAAaA,OAGhC,wBACGQ,GACC,SAACwB,GAAD,CAAmBpE,SAAUA,EAAU4C,OAAQA,EAAQC,SAAUA,KAEjE,SAAC,KAAD,CAAeT,YAAaA,OAGhC,yBACE,SAACiC,GAAD,CACErE,SAAUA,EACVuB,iBAAkBA,EAClBD,oBAAqBA,EACrBE,iBAAkBA,EAClB8C,gBACE1B,IAASA,EAAO2B,EAAAA,GAAAA,QAAoB,GAAK3B,EAAO2B,EAAAA,GAAAA,SAAqB,WAQ3EF,GAAe,SAAC,GAYf,IAXLrE,EAWI,EAXJA,SACAsE,EAUI,EAVJA,cACAhD,EASI,EATJA,oBACAC,EAQI,EARJA,iBACAC,EAOI,EAPJA,iBAQMgD,GAAUC,EAAAA,EAAAA,MAChB,GAAiEC,EAAAA,EAAAA,MAA1DC,EAAP,EAAOA,2BAA4BC,EAAnC,EAAmCA,2BAC7BpB,GAAUC,EAAAA,EAAAA,IAAoB,CAClC,CACEC,MAAO,MACPC,MAAM,oBAAD,OAAsB3D,EAASQ,eAIxC,OACE,SAACqE,EAAA,EAAD,CACEC,SACE,UAACC,EAAA,GAAD,WACGJ,EAA2BK,SAC1B,gCACGhF,EAASiF,cAAgB,GACxB,SAACF,EAAA,GAAD,CACEjF,KAAK,6BACL3B,KAAK,SACL+G,OAAO,SACPhE,QAAS,kBAAMI,EAAoBtB,MAEnC,KACHsE,GACC,SAACS,EAAA,GAAD,CACEjF,KAAK,4BACL3B,KAAK,SACL+G,OAAO,SACPhE,QAAS,kBAAMI,EAAoBtB,MAEnC,QAEJ,KACH4E,EAA2BI,SAC5BhF,EAASmF,SAAWC,EAAAA,GAAAA,QACpBpF,EAASqF,cACP,SAACN,EAAA,GAAD,CACEjF,KAAK,yBACLM,MAAM,oHACNjC,KAAK,UACL+C,QAAS,kBAAMK,EAAiBvB,MAEhC,MACJ,SAAC+E,EAAA,GAAD,CACEjF,KAAK,qBACL3B,KAAK,0BACL+C,QAAS,kBAAMsD,EAAQc,KAAK9B,OAE9B,SAACuB,EAAA,GAAD,CACEjF,KAAK,mBACL3B,KAAK,YACL+C,QAAS,WACPM,EAAiBxB,SAKzBuF,SAAS,eA/CX,UAiDE,SAACtE,EAAA,GAAD,CAAQ9C,MAAM,SAACqH,EAAA,GAAD,CAAMhG,KAAK,qBAIzB0C,GAAuC,IAEvCkC,GAAoB,SAAC,GAQpB,IAPLpE,EAOI,EAPJA,SACA6C,EAMI,EANJA,SACAD,EAKI,EALJA,OAMM4B,GAAUC,EAAAA,EAAAA,MAKVgB,EAAkB3C,OAAO4C,QAAQ9C,GAAQlE,QAAO,SAAC+G,EAAD,GAA0C,IAAD,eAAtBvC,EAAsB,KAAXC,EAAW,KACvFwC,GAAMC,EAAAA,EAAAA,IAA0B1C,GAEtC,OADAuC,EAAgBE,IAAQF,EAAgBE,IAAQ,GAAKxC,EAC9CsC,IACN,IAEH,OAAO5C,GACL,SAACgD,EAAA,GAAD,CACEhF,eAAgBb,EAASa,eACzBiF,qBAAsB,SAACH,EAAKI,GAAN,OACpBH,EAAAA,EAAAA,IAA0B/C,EAASmD,QAAO,SAACC,GAAD,OAAOA,EAAElF,gBAAkB4E,KAAK,GAAGzC,YAE/EgD,iBAAiB,EACjBhF,QAAS,SAACH,GACR,IAAMoF,EAAQtD,EAASuD,MAAK,SAACC,GAAD,OAAOA,EAAEtF,gBAAkBA,KACvD,OAAIoF,QAAJ,IAAIA,GAAAA,EAAOG,OACT9B,EAAQc,KAAR,gBAAsBa,EAAMG,YAKlC,SAAC,IAAD,CACEC,eAAgBd,EAAgBe,EAAAA,GAAAA,SAChCC,gBAAiBhB,EAAgBe,EAAAA,GAAAA,SACjCE,YAAajB,EAAgBe,EAAAA,GAAAA,YAK7BxC,GAED,SAAC,GAAgB,IAAfhE,EAAc,EAAdA,SACE2G,EAAkD3G,EAAlD2G,eAAgBtB,EAAkCrF,EAAlCqF,aAAcuB,EAAoB5G,EAApB4G,iBAE/BC,EAAcxB,GAChByB,EAAAA,EAAAA,IACEzB,EAAa0B,iBAAiBC,eAC9B3B,EAAa0B,iBAAiBE,wBAEhC,KAEEC,GAAOC,EAAAA,EAAAA,IAAcN,GACrBO,GAA4BC,EAAAA,EAAAA,IAAsBT,GAAoB,IAwD5E,OACE,UAACnG,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,UAtDI0G,EACK,KAEL/B,GAAgB6B,GAEhB,SAAC,KAAD,CACE/H,MAAO,CAACmI,WAAY,KACpB3H,IAAI4H,EAAAA,GAAAA,IAAsB,CACxBC,SAAUnC,EAAa0B,iBAAiBC,eACxCS,aAAcpC,EAAa0B,iBAAiBE,uBAC5CS,aAAcrC,EAAaqC,aAC3BC,OAAOC,EAAAA,EAAAA,IAAgBV,EAAM7B,EAAaqC,cAC1CxJ,KAAK,4BAAD,OAA8B2J,mBAAmBxC,EAAa7F,SAPtE,SAUG6F,EAAa7F,QAIb,iBAAML,MAAO,CAACmI,WAAY,KAA1B,SAAiCV,KAqCtC,UAACnG,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAIvB,MAAO,CAACkB,SAAU,QAA5D,UAjCFwG,GACE,UAACpG,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,EAAGzB,WAAY,UAAWE,MAAO,CAACkB,SAAU,QAA/E,WACE,SAACmF,EAAA,GAAD,CAAMhG,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,WACzB,SAAC,KAAD,CAAMC,IAAImI,EAAAA,GAAAA,IAAyBjB,GAAnC,UACGkB,EAAAA,EAAAA,IAAyBlB,aAG5BmB,EAGJ,OAAIrB,QAAJ,IAAIA,GAAAA,EAAgBsB,QACX,SAACC,EAAA,EAAD,CAAuBC,UAAWxB,EAAgByB,WAAW,uBAElE/C,GAAgB6B,GAEhB,SAACmB,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,QACLb,aAAcrC,EAAaqC,aAC3Bc,oBAAqB,CACnBhJ,KAAM6F,EAAa0B,iBAAiBC,eACpCyB,SAAUpD,EAAa0B,iBAAiBE,wBAE1CU,OAAOC,EAAAA,EAAAA,IAAgBV,EAAM7B,EAAaqC,gBAIzC,YAcLzD,GAAyB,SAAC,GAQzB,IAPL7C,EAOI,EAPJA,cACApB,EAMI,EANJA,SACAkE,EAKI,EALJA,SAMA,OACE,UAACzD,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,0BACE,SAACgI,GAAD,CAAWxH,QAASgD,EAApB,UACE,UAACyE,EAAA,EAAD,CAAKzD,OAAO,UAAU0D,aAAW,EAAjC,UACG5I,EAASa,eAAeoH,OAAOY,iBADlC,qBAKHzH,IACC,SAACyE,EAAA,GAAD,CACEiD,OAAK,EACLC,mBAAiB,EACjBlI,eAAgBO,EAChB0E,qBAAsB,SAACH,GAAD,OACpB3F,EAASa,eAAemI,SAASrD,GAAOa,EAAAA,GAAAA,OAAwBA,EAAAA,GAAAA,eAQtErC,GAAoB,SAAC,GAMpB,IALLnE,EAKI,EALJA,SACA4C,EAII,EAJJA,OAKA,OAAQ5C,EAASmF,QACf,KAAKC,EAAAA,GAAAA,UACH,OAAO,SAACuD,EAAA,EAAD,wBACT,KAAKvD,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,OACH,OACE,SAAC3E,EAAA,EAAD,CAAKpB,OAAQ,CAAC4J,OAAQ,IAAtB,UACE,SAACP,GAAD,CACExH,QAAS,kBACPlB,EAASkJ,QACTC,EAAAA,EAAAA,GAAgB,CAAC/I,MAAO,QAASgJ,MAAM,SAACC,EAAA,GAAD,CAAiBH,MAAOlJ,EAASkJ,WAH5E,UAME,SAACP,EAAA,EAAD,CAAKzD,OAAO,SAAZ,SAA0C,WAApBlF,EAASmF,OAAsB,SAAW,iBAIxE,KAAKC,EAAAA,GAAAA,UACH,OAAIxC,EAAO2B,EAAAA,GAAAA,WAAuBvE,EAASa,eAAeoH,QACjD,SAACU,EAAA,EAAD,CAAKzD,OAAO,UAAZ,uBAELoE,MAAMC,KAAKC,EAAAA,IAAoBC,MAAK,SAACtE,GAAD,OAAYvC,EAAOuC,OAClD,SAACwD,EAAA,EAAD,CAAKzD,OAAO,UAAZ,0BAEF,SAACyD,EAAA,EAAD,CAAKzD,OAAO,UAAZ,0BAIPwD,GAAYgB,EAAAA,GAAAA,OAAAA,WAAH,8DAAGA,CAAH,yFAYF1H,IAAsC2H,EAAAA,EAAAA,IAAH,ySAcnC/H,IAAuC+H,EAAAA,EAAAA,IAAH,8b,gDC3apCC,GAA2B,SAAC,GAAgC,IAA/B5J,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,QAqBlD,OACE,UAACC,EAAA,GAAD,CACEC,SAAS,OAACH,QAAD,IAACA,IAAAA,EAAUqF,cACpBjF,MAAK,2CAA+BJ,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAUQ,YAC9CP,QAASA,EACTd,MAAO,CAACyE,MAAO,QAJjB,UArBc,WACd,GAAI,OAAC5D,QAAD,IAACA,IAAAA,EAAUqF,aACb,OAAO,KAGT,IAAMwB,GAAcC,EAAAA,EAAAA,IAClB9G,EAASqF,aAAa0B,iBAAiBC,eACvChH,EAASqF,aAAa0B,iBAAiBE,wBAGzC,OACE,SAAC4C,GAAD,CACE7J,SAAUA,EACVqF,aAAcrF,EAASqF,aACvBwB,YAAaA,EACb5G,QAASA,IAYV6E,IACD,SAAC5E,EAAA,GAAD,CAAcc,WAAS,EAAvB,UACE,SAACC,EAAA,GAAD,CAAQC,QAASjB,EAAjB,wBAaK4J,GAAkC,SAAC,GAI3B,IAHnB7J,EAGkB,EAHlBA,SACAqF,EAEkB,EAFlBA,aACAwB,EACkB,EADlBA,YAEA,EAAgCpE,EAAAA,SAAe,IAA/C,eAAOqH,EAAP,KAAiBC,EAAjB,KACA,EAA4BtH,EAAAA,SAAuB,GAAnD,eAAOuH,EAAP,KAAeC,EAAf,KAEMC,EAAazH,EAAAA,SAAc,WAE/B,MAAO,CADuB,CAACiB,MAAO,MAAOC,MAAM,oBAAD,OAAsB3D,EAASQ,gBAEhF,CAACR,EAASQ,aAEP2J,GAAaC,EAAAA,GAAAA,GAAsB,CACvCxD,iBAAkBvB,EAAa7F,KAC/B6K,iBAAkBC,GAAAA,EAAAA,UAClBzJ,eAAgBb,EAASa,eACzBiJ,SAAAA,EACAI,WAAAA,EACAK,oBAAoBC,EAAAA,GAAAA,GAAsB3D,GAC1C4D,QAASpF,EAAaqC,aACtBsC,OAAAA,EACAU,WAAY1K,IAGd,OACE,SAAC,MAAD,CACEa,eAAgBb,EAASa,eACzBsJ,WAAYA,EACZzC,aAAY,OAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAcqC,aAC5Bb,YAAaA,EACbkD,YAAaA,EACbC,OAAQA,EACRC,UAAWA,K,gDC3EJU,GAA4B,SAAC,GAA4C,IAA3C3K,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAAS2K,EAAuB,EAAvBA,WAC5D,GAAyBC,EAAAA,EAAAA,GACvBC,IADKC,GAAP,eAGOvI,GAAQwI,EAAAA,GAAAA,GACbpJ,GACA,CACEC,UAAW,CACTrB,YAAoB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,aAAc,IAEtCsB,6BAA6B,EAC7BmJ,MAAOjL,IAPJwC,KAUP,EAAwCC,EAAAA,UAAe,GAAvD,eAAOyI,EAAP,KAAqBC,EAArB,KACMC,EAAgB3I,EAAAA,SAAc,WAClC,OAAKzC,GAAawC,GAAqD,sBAA7CA,EAAKE,yBAAyBC,YAG3BH,EAAKE,yBAAyBU,kBAAkBC,QAAQ2C,QACnF,SAACqF,GAAD,OACEA,EAAUnI,WAAamI,EAAU/E,OAASgF,EAAAA,GAAAA,IAAuBD,EAAUnI,cAGxDxE,QACnB,SAACC,EAAO0M,GAAR,OACEA,GAAaA,EAAU/E,OAAvB,oBAAmC3H,GAAnC,eAA2C0M,EAAU/E,OAAQ,IAAQ3H,IACvE,KAVK,KAaR,CAACqB,EAAUwC,IACd,IAAKxC,IAAawC,EAChB,OAAO,KAGT,IAAM+I,EAAiBvL,EAASiF,cAC1BuG,EAAM,mCAAG,qFACbL,GAAgB,GADH,SAEPJ,EAAe,CAAClJ,UAAW,CAACrB,WAAYR,EAASQ,cAF1C,OAGboK,IACAO,GAAgB,GAChBlL,IALa,2CAAH,qDAQZ,OACE,iCACE,UAACC,EAAA,GAAD,CACEC,SAAUH,GAAYA,EAASmF,SAAWC,EAAAA,GAAAA,YAA+BmG,EACzEnL,MAAM,kBACNH,QAASA,EAHX,WAKE,UAACC,EAAA,GAAD,oBAC4B,IAAnBqL,EAAuB,kBAAvB,cAAkDA,EAAlD,gBADT,oCAIA,UAACrL,EAAA,GAAD,YACE,SAACe,EAAA,GAAD,CAAQiE,OAAO,OAAOhE,QAASjB,EAA/B,mBAGCiL,GACC,SAACjK,EAAA,GAAD,CAAQiE,OAAO,SAASuG,UAAQ,EAAhC,2BAIA,SAACxK,EAAA,GAAD,CAAQiE,OAAO,SAAShE,QAASsK,EAAjC,oCAMN,SAACE,GAAA,EAAD,CACEvL,SACIH,KACAuL,GAAsC,cAApBvL,EAASmF,WAC3BrC,OAAO6I,KAAKP,GAAenD,OAE/BhI,QAASA,EACT2K,WAAYA,EACZgB,aAAcR,QAMhBN,IAA2BnB,EAAAA,EAAAA,IAAH,0QAW1BkC,EAAAA,G,YCnGSC,GAAgB,SAAC,GAUvB,IAAD,IATJzK,mBAAAA,OASI,SARJD,EAQI,EARJA,cACA2K,EAOI,EAPJA,UACAC,EAMI,EANJA,QAOA,EAAsDvJ,EAAAA,WAAtD,eAAOwJ,EAAP,KAA4BC,EAA5B,KACA,EAAoDzJ,EAAAA,WAApD,eAAO0J,EAAP,KAA2BC,EAA3B,KACA,EAGI3J,EAAAA,WAHJ,eACE4J,EADF,KAEEC,EAFF,KAIA,GAAyBzB,EAAAA,EAAAA,GACvB0B,GAAAA,GADKC,GAAP,eAGO7H,GAA8BD,EAAAA,EAAAA,MAA9BC,2BAED8H,EAAW,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAqBzL,WAEzCiC,EAAAA,WAAgB,WACd,GAAIkC,EAA2BK,SAAWyH,EAAa,CACrD,MAAmBV,EAAU/F,QAAO,SAAChG,GAAD,OAAcA,EAASQ,aAAeiM,KAAnEzM,GAAP,eACAkM,EAAuBlM,MAExB,CAAC+L,EAAWU,EAAa9H,IAE5B,IAAM+H,EAAM,mCAAG,WAAO1M,GAAP,2FACQwM,EAAe,CAAC3K,UAAW,CAACrB,WAAYR,EAASQ,cADzD,iBACNgC,EADM,EACNA,OACiD,0BAA5CA,EAAKmK,wBAAwBhK,WACvCqJ,IACSxJ,GAAoD,sBAA5CA,EAAKmK,wBAAwBhK,WAC9CiK,EAAAA,EAAAA,KAAmB,CACjBC,SACE,SAACC,EAAA,EAAD,CAAO9N,UAAU,SAAS+N,QAAS,EAAnC,UACE,iHAKJ5O,KAAM,QACN+G,OAAQ,WAED1C,GAAoD,gBAA5CA,EAAKmK,wBAAwBhK,aACxCuG,EAAQ1G,EAAKmK,wBACnBC,EAAAA,EAAAA,KAAmB,CACjBC,SAAS,0FACT1O,KAAM,QACN+G,OAAQ,SACR8H,OAAQ,CACNlN,KAAM,aACNoB,QAAS,kBACPiI,EAAAA,EAAAA,GAAgB,CACdC,MAAM,SAACC,EAAA,GAAD,CAAiBH,MAAOA,WA1B3B,2CAAH,sDAiCZ,OACE,iCACE,UAAC+D,EAAA,EAAD,CAAOC,gBAAgB,EAAvB,WACE,4BACE,2BACE,yCACA,oCACC7L,GAAqB,4CAA2B,MACjD,uCACA,6CACA,wCACA,eAAIlC,MAAO,CAACyE,MAAO,YAGvB,2BACGmI,EAAUjL,KAAI,SAACd,GAAD,OACb,SAACmB,GAAD,CAEEE,mBAAoBA,EACpBrB,SAAUA,EACVoB,cAAeA,EACfE,oBAAqB4K,EACrB3K,iBAAkBmL,EAClBlL,iBAAkB4K,EAClB3K,0BAA2B6K,GAPtBtM,EAASQ,qBAYtB,SAACoJ,GAAD,CACE5J,SAAUmM,EACVlM,QAAS,kBAAMmM,OAAsBpE,OAEvC,SAACjI,EAAD,CACEC,SAAUqM,EACVpM,QAAS,kBAAMqM,OAA+BtE,OAEhD,SAAC2C,GAAD,CACE3K,SAAUiM,EACVhM,QAAS,kBAAMiM,OAAuBlE,IACtC4C,WAAY,kBAAMoB,WAMbmB,IAA0BxD,EAAAA,EAAAA,IAAH,6kBAiChCkC,EAAAA,I,yLC5ISuB,EAAkC3K,EAAAA,MAC7C,YAA4E,IAA1EjD,EAAyE,EAAzEA,KAAM6N,EAAmE,EAAnEA,IAAmE,IAA9DC,UAAAA,OAA8D,aAA3CC,WAAAA,OAA2C,aAAxBC,YAAAA,OAAwB,SAClErI,EAAUkI,EAAVlI,OAEDD,EAASzC,EAAAA,SAAc,WAC3B,OAAQ0C,GACN,KAAKZ,EAAAA,GAAAA,QACH,MAAO,UACT,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,QACH,MAAO,SACT,QACE,MAAO,UAEV,CAACY,IAgCJ,OACE,UAAC,IAAD,CACEpG,KAAM,CACJC,UAAW,MACXyO,eAAgB,gBAChBxO,WAAY,aACZyB,IAAK,IALT,WAQE,UAAC,IAAD,CAAK3B,KAAM,CAACC,UAAW,SAAUC,WAAY,aAAcyB,IAAK,GAAhE,WACE,UAAC,IAAD,CAAK3B,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,GAAzD,UAxCM,WACV,IAAMgN,GACJ,SAAC,IAAD,CAAKxI,OAAQA,EAAb,UACE,UAAC,IAAD,CAAKnG,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,GAAzD,WACE,SAAC,KAAD,CAAoByE,OAAQkI,EAAIlI,OAAQoD,KAAM,MAC9C,SAAC,KAAD,CAAS8E,IAAKA,SAKpB,OAAKC,GAKH,SAAC,IAAD,CACE/H,SAAS,MACToI,gBAAgB,QAChB7I,SACE,0BACE,SAAC,KAAD,CAAkBuI,IAAKA,EAAK7N,KAAMA,MAGtCoO,eAAgB,IARlB,SAUGF,IAdIA,EA8BFG,GACAL,GAAc,SAAC,KAAD,CAAiBH,IAAKA,IAAU,QAEhDG,IAAgBM,EAAAA,GAAAA,IAAmBT,EAAIlI,SAAWqE,EAAAA,GAAAA,IAAuB6D,EAAIlI,UAC5E,SAAC,IAAD,CAAmBmB,MAAO+G,EAAIU,UAC5B/F,KAELuF,GAAa,SAAC,EAAAS,EAAD,CAAcrO,GAAE,gBAAW0N,EAAIU,IAA/B,sBAA+D,Y,0LCpExEE,EAAoB,SAAChQ,GAChC,IAAOqI,EAASrI,EAATqI,MACA9D,GAAQwI,EAAAA,EAAAA,GACbkD,EACA,CACErM,UAAW,CAACyE,MAAAA,KAHT9D,KAOD6K,EAAG,OAAG7K,QAAH,IAAGA,OAAH,EAAGA,EAAM2L,mBACZhJ,EAA6B,SAAjB,OAAHkI,QAAG,IAAHA,OAAA,EAAAA,EAAK1K,YAAuB0K,EAAIlI,OAAS,KAElDiJ,EAAgB3L,EAAAA,SAAc,WAClC,GAAwB,SAAjB,OAAH4K,QAAG,IAAHA,OAAA,EAAAA,EAAK1K,YACP,MAAO,GAGT,IAAOwC,EAAUkI,EAAVlI,OACP,OAAI2I,EAAAA,GAAAA,IAAmB3I,GACdkI,EAAIgB,UAAUrI,QAAO,SAACsI,GAAD,OAAUA,EAAKnJ,SAAWoJ,EAAAA,GAAAA,WAGpD/E,EAAAA,GAAAA,IAAuBrE,GAClBkI,EAAIgB,UAAUrI,QAAO,SAACsI,GAAD,OAAUA,EAAKnJ,SAAWoJ,EAAAA,GAAAA,eAGjD,KACN,CAAClB,IAEEmB,EAAYJ,EAAcnG,OAEhC,IAAKuG,IAAcrJ,EACjB,OAAO,KAGT,GAAI2I,EAAAA,GAAAA,IAAmB3I,GAAS,CAC9B,GAAkB,IAAdqJ,EAAiB,CACnB,IAAMF,EAAOF,EAAc,GACrBK,EAAQH,EAAKI,QACfC,IAAAA,UAAa,CAACC,YAAaC,KAAKC,MAAqB,IAAfR,EAAKI,UAAkB,CAACK,gBAAgB,IAC9E,GACJ,OACE,UAAC,KAAD,CAAStP,MAAOC,EAAAA,EAAAA,QAAhB,wBACY,SAAC,KAAD,CAAMC,GAAE,gBAAW2G,GAAX,OAAmBmI,GAA3B,SAAqCH,EAAKU,aAI1D,OACE,UAAC,KAAD,CAASvP,MAAOC,EAAAA,EAAAA,QAAhB,wBACY,UAAC,KAAD,CAAMC,GAAE,gBAAW2G,GAAnB,UAA6BkI,EAA7B,eAKhB,GAAIhF,EAAAA,GAAAA,IAAuBrE,GAAS,CAClC,GAAkB,IAAdqJ,EAAiB,CACnB,IAAMF,EAAOF,EAAc,GACrBK,EAAQH,EAAKI,QACfC,IAAAA,UAAa,CAACC,YAAaC,KAAKC,MAAqB,IAAfR,EAAKI,UAAkB,CAACK,gBAAgB,IAC9E,GACJ,OACE,UAAC,KAAD,CAAStP,MAAOC,EAAAA,EAAAA,QAAhB,6BACiB,SAAC,KAAD,CAAMC,GAAE,gBAAW2G,GAAX,OAAmBmI,GAA3B,SAAqCH,EAAKU,aAI/D,OACE,UAAC,KAAD,CAASvP,MAAOC,EAAAA,EAAAA,QAAhB,6BACiB,UAAC,KAAD,CAAMC,GAAE,gBAAW2G,GAAnB,UAA6BkI,EAA7B,eAKrB,OAAO,MAGHN,GAA6BvE,EAAAA,EAAAA,IAAH,8Q,kZC9DnBsF,EAGR,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,gBACX,EAAwB1M,EAAAA,UAAwB,GAAhD,eAAO2M,EAAP,KAAaC,EAAb,KACA,OAAQH,EAAK/J,QACX,KAAKmK,EAAAA,GAAAA,QACH,OAAO,SAAC,IAAD,sBACT,KAAKA,EAAAA,GAAAA,QACH,IAAKJ,EAAKK,OAAOtH,OACf,OAAO,SAAC,IAAD,CAAK/C,OAAO,UAAZ,uBAET,IAAM2I,GACJ,iCACE,SAAC,IAAD,CAAK3I,OAAO,UAAU0D,aAAW,EAAjC,UACE,UAAC,IAAD,CAAY4G,UAAU,QAAQtO,QAAS,kBAAMmO,GAAQ,IAArD,UACGH,EAAKK,OAAOtH,OADf,mBAIF,UAAC,KAAD,CACE9H,OAAQiP,EACRnP,QAAS,kBAAMoP,GAAQ,IACvBlQ,MAAO,CAACyE,MAAO,QACfxD,MAAM,gBAJR,WAME,SAACqP,EAAD,CAASF,OAAQL,EAAKK,UACtB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQrK,OAAO,UAAUhE,QAAS,kBAAMmO,GAAQ,IAAhD,wBAOR,GAAIH,EAAKQ,QAAQzH,OAASiH,EAAKK,OAAOtH,OAAQ,CAC5C,IAAM4E,EAAO,UAAMqC,EAAKQ,QAAQzH,OAAnB,gCACXiH,EAAKQ,QAAQzH,OAASiH,EAAKK,OAAOtH,OADvB,qEAGb,OACE,SAAC,IAAD,CAAS1C,SAAS,QAAQT,QAAS+H,EAAnC,SACGgB,IAIP,OAAOA,EAET,KAAKyB,EAAAA,GAAAA,QACH,GAAIJ,EAAKQ,QAAQzH,OAAQ,CACvB,IAAM4E,EAAO,UAAMqC,EAAKQ,QAAQzH,OAAnB,uFACb,OACE,SAAC,IAAD,CAAS1C,SAAS,QAAQT,QAAS+H,EAAnC,UACE,SAAC,IAAD,CAAK3H,OAAO,UAAZ,uBAIN,OAAIgK,EAAKS,YAEL,SAAC,IAAD,CAASpK,SAAS,QAAQT,QAASoK,EAAKS,WAAYC,cAAc,MAAlE,UACE,SAAC,IAAD,CAAK1K,OAAO,UAAZ,wBAIC,SAAC,IAAD,CAAKA,OAAO,UAAZ,qBACT,KAAKoK,EAAAA,GAAAA,QACH,GAAKJ,EAAKhG,MAEH,CACL,IAAMA,EAAQgG,EAAKhG,MACb2G,EAAY,kBAChB1G,EAAAA,EAAAA,GAAgB,CACd/I,MAAO+O,EACHA,IAAoBW,EAAAA,GAAAA,SAClB,oBACA,kBACF,eACJ1G,MAAM,SAAC,KAAD,CAAiBF,MAAOA,OAElC,OACE,iCACE,SAAC6G,EAAD,CAAY7O,QAAS2O,EAArB,UACE,SAAC,IAAD,CAAKG,SAAS,EAAM9K,OAAO,SAA3B,wBAIF,SAAC,IAAD,CAAYhE,QAAS2O,EAAW1Q,MAAO,CAAC8Q,WAAY,EAAG5P,SAAU,IAAjE,qBAnBJ,OAAO,SAAC,IAAD,CAAK6E,OAAO,SAAZ,qBAyBX,QACE,OAAOgL,EAAAA,EAAAA,IAAkBhB,EAAK/J,UAIvBsK,EAAwC,SAAC,GAAc,IAAbF,EAAY,EAAZA,OACrD,GAAwBvE,EAAAA,EAAAA,GACtBmF,EACA,CACEtO,UAAW,CACTmE,OAAQ,CACNuJ,OAAAA,MALD/M,EAAP,EAAOA,KAWP,OAXA,EAAa4N,UAWG5N,GAEZ,SAAC,IAAD,CAAK6N,QAAS,GAAd,UACE,SAAC,IAAD,CAASC,QAAQ,cAKqB,SAAxC9N,EAAK+N,oBAAoB5N,YAEzB,SAAC,IAAD,CAAK0N,QAAS,GAAd,UACE,SAAC,IAAD,CACElS,KAAK,QACLiC,MAAM,oBACNoQ,YAAahO,EAAK+N,oBAAoB1D,aAO5C,SAAC,IAAD,CAAKwD,QAAS,CAACpH,OAAQ,GAAvB,UACE,SAAC,IAAD,CAAUwH,KAAMjO,EAAK+N,oBAAoBlN,aAKlCqN,EAER,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACL,OAAKA,GAAiBA,EAAa1I,QAIjC,UAAC,IAAD,CAAOjJ,UAAU,SAAS+N,QAAS,GAAnC,WACE,UAAC,IAAD,CAAKsD,QAAS,GAAIO,OAAQ,CAACC,KAAM,SAAUjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,SAA5D,WACE,UAAC,KAAD,0BAEE,SAAC,IAAD,CAASoF,QAAQ,yDAAjB,UACE,SAAC,KAAD,CAAMtF,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,gBAI7B,SAAC+P,EAAD,CAASF,OAAQoB,QAEnB,UAAC,IAAD,CAAKN,QAAS,GAAIhR,OAAQ,CAAC4J,OAAQ,GAAnC,WACE,UAAC,KAAD,6BAEE,SAAC,IAAD,CAASnE,QAAQ,kDAAjB,UACE,SAAC,KAAD,CAAMtF,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,gBAG7B,SAAC,IAAD,CACEvB,KAAK,UACLiC,MAAM,qBACNoQ,YAAY,yDAxBX,MA8BLT,EAAarG,EAAAA,GAAAA,OAAAA,WAAH,mEAAGA,CAAH,qGASHoH,GAAoBnH,EAAAA,EAAAA,IAAH,oNAa1BkC,EAAAA,GAGEsE,GAA0BxG,EAAAA,EAAAA,IAAH,6YAiBzBoH,EAAAA,EACAlF,EAAAA,I,uSCtOSmF,EAER,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,iBACL,OAAKA,EAAiBR,KAAKxI,QAGpB,SAAC,IAAD,CAAgBoF,IAAK4D,EAAiBR,KAAK,GAAIjR,KAAMyR,EAAiBzR,QAFpE,iBAAML,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,mBAKEwR,EAAoD,SAAC,GAAD,IAAE7D,EAAF,EAAEA,IAAF,OAC/D,UAAC,IAAD,CAAOrO,UAAU,MAAM+N,QAAS,EAAG9N,WAAW,SAA9C,WACE,SAAC,KAAD,CAAoBkG,OAAQkI,EAAIlI,UAChC,SAAC,KAAD,CAAMxF,GAAE,gBAAW0N,EAAI/G,OAAS6K,OAAO,SAASC,IAAI,aAApD,UACE,SAAC,KAAD,WAAOC,EAAAA,EAAAA,IAAY,CAAC/K,MAAO+G,EAAI/G,gBAKxBgL,GAAsB3H,EAAAA,EAAAA,IAAH,mGAQnB4H,GAA6B5H,EAAAA,EAAAA,IAAH,mlBAgCnC2H,EACAE,EAAAA,GACAV,EAAAA,IAGSW,EAAc/H,EAAAA,GAAAA,MAAAA,WAAH,yEAAGA,CAAH,mMAeXhK,EAAAA,EAAAA,U,kVChEAgS,EAGR,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,aAAyC,IAA3BC,eAAAA,OAA2B,SAC9C,OAAKD,EAAa1J,QAIhB,iCACE,UAAC,IAAD,CAAKoI,QAAS,CAACwB,SAAU,GAAIC,WAAY,IAAzC,UACGF,GAAiB,SAAC,KAAD,iCAA8C,MAChE,SAACG,EAAD,QAEF,UAAC,IAAD,YACE,4BACE,2BACE,eAAI5S,MAAO,CAACC,SAAU,WACtB,yCACA,eAAID,MAAO,CAACyE,MAAO,SAAnB,wBACA,2CAGJ,2BACG+N,EAAa7Q,KAAI,SAACkR,GAAD,OAChB,SAACC,EAAD,CAAgBD,YAAaA,GAAkBA,EAAYjE,eAnB5D,MA2BEmE,EAGR,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,eAA2C,IAA3BP,eAAAA,OAA2B,SAChD,OAAKO,EAAelK,QAIlB,iCACE,UAAC,IAAD,CAAKoI,QAAS,CAACwB,SAAU,GAAIC,WAAY,IAAzC,UACGF,GAAiB,SAAC,KAAD,mCAAgD,MAClE,SAACQ,EAAD,QAEF,UAAC,IAAD,YACE,4BACE,2BACE,eAAIjT,MAAO,CAACC,SAAU,WACtB,2CACA,eAAID,MAAO,CAACyE,MAAO,SAAnB,uBACA,eAAIzE,MAAO,CAACyE,MAAO,SAAnB,wBACA,sCACA,uDAGJ,2BACGuO,EAAerR,KAAI,SAACuR,GAAD,OAClB,SAACC,EAAD,CAAkBD,cAAeA,GAAoBA,EAActE,eArBpE,MA6BLgE,EAAuB,kBAC3B,SAAC,IAAD,CACE7M,OAAO,UACP9E,OACE,oHACyF,OAG3FoQ,aACE,4SASA4B,EAAyB,kBAC7B,SAAC,IAAD,CACElN,OAAO,UACP9E,OACE,sHAIFoQ,aACE,gTASAyB,EAAiB,SAAC,GAA4D,IAA3DD,EAA0D,EAA1DA,YAChBjE,EAAuCiE,EAAvCjE,GAAIwE,EAAmCP,EAAnCO,WAAY/S,EAAuBwS,EAAvBxS,KAAM2F,EAAiB6M,EAAjB7M,OAAQqN,EAASR,EAATQ,MAC9BC,GAAiB/N,EAAAA,EAAAA,MAAjB+N,cAEP,GAAmD5H,EAAAA,EAAAA,GAGjD6H,EAAAA,GAAsB,CACtBC,YAAaC,EAAAA,KAJf,eAAOC,EAAP,KAA6BC,EAA7B,KAAoB1C,QAMd2C,GAAUC,EAAAA,EAAAA,KAEVC,EAAc,mCAAG,iFACjB9N,IAAW+N,EAAAA,GAAAA,QADM,gCAEbH,EAAQ,CACZ3S,MAAO,iDACPoQ,YACE,sJALe,OASnBqC,EAAW,CAAChR,UAAW,CAACsR,YAAapF,EAAIqF,cAAeb,KATrC,2CAAH,qDAadc,EAAkBlO,IAAW+N,EAAAA,GAAAA,UAA8BT,EAAczN,QACzEsO,EAAad,EAAMvK,OAASuK,EAAM,GAAK,KAkB7C,OACE,2BACE,eAAIrT,MAAO,CAACyE,MAAO,IAAnB,SAlBa,WACf,IAAM2P,GACJ,SAAC,IAAD,CACEC,OAAO,SACP/H,SAAUqH,GAAqB3N,IAAW+N,EAAAA,GAAAA,SAA6BG,EACvEI,QAAStO,IAAW+N,EAAAA,GAAAA,QACpBQ,SAAUT,IAGd,OAAOI,GACL,SAAC,IAAD,CAASvO,QAAS2N,EAAckB,eAAhC,SAAiDJ,IAEjDA,EAMyBK,MACzB,2BACE,SAAC,IAAD,CAAO5U,UAAU,MAAM+N,QAAS,EAAG9N,WAAW,SAA9C,SACGO,KAEH,SAAC,IAAD,CAA+BqU,gBAAiB7B,QAElD,wBACGsB,GACC,SAAC,KAAD,CAASpE,KAAMoE,EAAYnE,gBAAiBW,EAAAA,GAAAA,UAE5C,iBAAM3Q,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,qBAGJ,yBACE,gBAAKP,MAAO,CAACD,QAAS,QAAtB,UACE,SAAC,KAAD,CAAqB+R,iBAAkBe,UAjBpCxS,IAwBP8S,EAED,SAAC,GAAqB,IAApBD,EAAmB,EAAnBA,cACEyB,GAA0BpP,EAAAA,EAAAA,MAA1BoP,uBACP,GAAqDjJ,EAAAA,EAAAA,GAGnDkJ,EAAAA,GAAwB,CACxBpB,YAAaqB,EAAAA,KAJf,eAAOC,EAAP,KAA+BnB,EAA/B,KAAsB1C,QAMhB2C,GAAUC,EAAAA,EAAAA,KACTjF,EAAyDsE,EAAzDtE,GAAIwE,EAAqDF,EAArDE,WAAY/S,EAAyC6S,EAAzC7S,KAAMgT,EAAmCH,EAAnCG,MAAOrN,EAA4BkN,EAA5BlN,OAAQ+O,EAAoB7B,EAApB6B,iBACtCZ,EAAad,EAAMvK,OAAS,EAAIuK,EAAM,GAAK,KAC3C2B,EACJD,GAAoD,iBAAhCA,EAAiBvR,WACjCuR,EAAiBC,aACjB,KACAlB,EAAc,mCAAG,iFACjB9N,IAAW+N,EAAAA,GAAAA,QADM,gCAEbH,EAAQ,CACZ3S,MAAO,+CACPoQ,YACE,wJALe,OASnByD,EAAa,CAACpS,UAAW,CAACuS,iBAAkBrG,EAAIsG,mBAAoB9B,KATjD,2CAAH,qDAadc,EAAkBlO,IAAW+N,EAAAA,GAAAA,UAA8BY,EAAuB9O,QAkBxF,OACE,2BACE,eAAI7F,MAAO,CAACyE,MAAO,IAAnB,SAnBa,WACf,IAAM2P,GACJ,SAAC,IAAD,CACEC,OAAO,SACPC,QAAStO,IAAW+N,EAAAA,GAAAA,QACpBzH,SAAUtG,IAAW+N,EAAAA,GAAAA,SAA6BJ,GAAqBO,EACvEK,SAAUT,IAId,OAAOI,GACL,SAAC,IAAD,CAASvO,QAASgP,EAAuBH,eAAzC,SAA0DJ,IAE1DA,EAMyBK,MACzB,2BACE,SAAC,IAAD,CAAO5U,UAAU,MAAM+N,QAAS,EAAG9N,WAAW,SAA9C,UACE,yBAAMO,OAER,SAAC,IAAD,CAA+BqU,gBAAiBxB,QAElD,eAAIlT,MAAO,CAACC,SAAU,KAAtB,UACE,gBACED,MAAO,CACLoG,SAAU,WACV3B,MAAO,OACP0Q,WAAY,WACZpV,QAAS,SALb,SAQGiV,GACC,SAAC,IAAD,CAAS5O,SAAS,SAAST,QAASqP,EAApC,UACGI,EAAAA,EAAAA,GAAgBJ,MAGnB,yCAIN,wBACGb,GACC,SAAC,KAAD,CAASpE,KAAMoE,EAAYnE,gBAAiBW,EAAAA,GAAAA,WAC1C,QAEN,yBACE,SAAC,KAAD,CAAqBmB,iBAAkBoB,OAEzC,yBACE,gBAAKlT,MAAO,CAACD,QAAS,QAAtB,wBAnCKM,K,+MC3OAgV,EAIR,SAAC,GAAyD,IAAxD3N,EAAuD,EAAvDA,YAAuD,IAA1CyB,SAAAA,OAA0C,aAAxBmM,YAAAA,OAAwB,SACrDhM,EAAY5B,EAAZ4B,SACAiM,GAA+BC,EAAAA,EAAAA,IAA0B9N,EAAY4B,UAArEiM,4BACDE,GAAa7M,EAAAA,EAAAA,IAAyBlB,GAE5C,OACE,UAAC,IAAD,CAAK9H,KAAM,CAACG,QAAS,cAAeF,UAAW,MAAOC,WAAY,UAAWmB,MAAOwU,EAApF,UACGtM,IAAY,SAAC,KAAD,CAAM9I,KAAK,SAASL,MAAO,CAAC0V,YAAa,GAAIpV,MAAOC,EAAAA,EAAAA,WACjE,SAACoV,EAAD,CAAgBnV,IAAImI,EAAAA,EAAAA,IAAyBjB,GAAc1H,MAAO,CAACJ,KAAM,GAAzE,UACE,SAAC,IAAD,CAAgBe,KAAM8U,MAEvBF,EAA4B1P,SAAWyP,GACtC,SAAC,IAAD,CAAgChM,SAAUA,EAA1C,SACG,gBAAEsM,EAAF,EAAEA,UAAWC,EAAb,EAAaA,UAAb,OACC,SAACC,EAAD,CACEnQ,QACEkQ,EACE,mBAEA,oDACkB,4BAASvM,OANjC,SAWGuM,GACC,SAAC,IAAD,CAAS1E,QAAQ,eAEjB,SAAC4E,EAAD,CAAchU,QAAS6T,EAAvB,UACE,SAAC,KAAD,CAAMvV,KAAK,UAAUC,MAAOC,EAAAA,EAAAA,iBAMpC,SAKJoV,GAAiBpL,EAAAA,EAAAA,IAAOyL,EAAAA,IAAV,qFAAGzL,CAAH,sBAIduL,GAAgBvL,EAAAA,EAAAA,IAAO0L,EAAAA,GAAV,oFAAG1L,CAAH,wCAQbwL,EAAexL,EAAAA,GAAAA,OAAAA,WAAH,wEAAGA,CAAH,6MAYZ2L,EAAAA,GAKKA,EAAAA,GACE3V,EAAAA,EAAAA,U,qOCxEA4V,EAKR,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,QAAS3O,EAAoC,EAApCA,YAAoC,IAAvB4O,WAAAA,OAAuB,SAC7D,EAAwBhT,EAAAA,UAAe,GAAvC,eAAO2M,EAAP,KAAaC,EAAb,KAEMqG,EAAgBH,EAAUtN,OAC1B0N,EAAcH,EAAQvN,OAE5B,GAAIyN,EAAgB,GAAKC,EAAc,GAAMD,GAAiBC,EAAc,CAC1E,IAAMC,EACJF,GAAiBC,EAAjB,UACOD,EAAgBC,EADvB,sBAEID,EAAa,UACVA,EADU,wBAEVC,EAFU,YAIbxX,EAAOuX,EAAgB,EAAI,WAAa,UAE9C,OACE,iCACE,SAAC,IAAD,CAAKvX,KAAMA,EAAX,UACE,SAAC,IAAD,CAAY+C,QAAS,kBAAMmO,GAAQ,IAAO5P,MAAOC,EAAAA,EAAAA,KAAjD,SACGkW,OAGL,SAAC,IAAD,CACEzV,OAAQiP,EACRnP,QAAS,kBAAMoP,GAAQ,IACvBxI,YAAaA,EACb0O,UAAWA,EACXC,QAASA,EACTC,WAAYA,OAMpB,OAAIC,GAEA,SAACG,EAAD,CAAkBC,SAAUP,EAAU,GAAI1O,YAAaA,EAAa4O,WAAYA,IAIhFE,GACK,SAACI,EAAD,CAAgBC,OAAQR,EAAQ,GAAI3O,YAAaA,EAAa4O,WAAYA,IAG5E,MAGHI,EAID,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,SAAUjP,EAA6B,EAA7BA,YAAa4O,EAAgB,EAAhBA,WACrBtB,EAAkD2B,EAAlD3B,aAAc8B,EAAoCH,EAApCG,kBACfC,EAAmC,YADgBJ,EAAjBzD,cACVlN,OACxB0I,GACJ,SAAC,IAAD,CAAK3I,OAAQgR,EAAU,UAAY,OAAQ/X,KAAK,WAAhD,UACE,UAAC,IAAD,CAAKY,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,GAAzD,WACE,SAAC,KAAD,CACEf,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,qBAA4BiP,EAAStW,OACjEL,MAAO,CAACS,SAAU,SAAUuW,aAAc,YAF5C,UAIG5B,EAAAA,EAAAA,GAAgBJ,EAAc8B,GAAqB,SAErDR,GACC,SAAC,IAAD,CAAgBlN,KAAK,QAAQ1B,YAAaA,EAAaiP,SAAUA,IAC/D,UAKV,OAAOA,EAAS3B,cACd,SAAC,IAAD,CACEiC,UAAU,YACVtR,SACE,UAAC,IAAD,CAAK/F,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,qCACQ,4BAASoV,EAAStW,WAE1B,mCACQ,KACN,kBAAML,MAAO,CAACmB,WAAYC,EAAAA,EAAAA,UAAsB0P,WAAY,OAA5D,cACI6F,EAAS3B,aADb,WAIF,yCACY,4BAAS2B,EAASG,mBAAqB,cAdzD,SAmBGpI,IAGHA,GAIEkI,EAID,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,OAAQnP,EAA6B,EAA7BA,YAAa4O,EAAgB,EAAhBA,WACpBS,EAAwC,YAA9BF,EAAOhE,YAAY7M,OACnC,OACE,SAAC,IAAD,CAAKD,OAAQgR,EAAU,UAAY,OAAQ/X,KAAK,UAAhD,UACE,UAAC,IAAD,CAAKY,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,GAAzD,WACE,SAAC,KAAD,CACEf,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,mBAA0BmP,EAAOxW,OAC7DL,MAAO,CAACC,SAAU,IAAKQ,SAAU,UAFnC,UAIE,SAAC,IAAD,CAAgBE,KAAMkW,EAAOxW,SAE9BiW,GACC,SAAC,IAAD,CAAclN,KAAK,QAAQ1B,YAAaA,EAAamP,OAAQA,IAC3D,Y,sDCtIL,IAAMK,EAAyB,4B,qcCkBzBC,EAAoD,SAACrY,GAChE,OAAwB+M,EAAAA,EAAAA,GACtBuL,EACA,CACE1U,UAAW,CACTmE,OAAQ,CACN0B,aAAczJ,EAAMyJ,aACpB8O,KAAM,CAAC,CAAC7Q,IAAK2E,EAAAA,EAAAA,UAAsB3G,MAAO1F,EAAM8C,oBANjDyB,EAAP,EAAOA,KAYP,OAZA,EAAa4N,UAYG5N,GACP,SAACiU,EAAA,EAAD,CAASnG,QAAQ,YAGkB,SAAxC9N,EAAK+N,oBAAoB5N,YAEzB,SAAC+T,EAAA,EAAD,CACEvY,KAAK,QACLiC,MAAM,cACNoQ,YAAahO,EAAK+N,oBAAoB1D,WAK1C,0BACE,SAAC8J,EAAA,EAAD,CAAUlG,KAAMjO,EAAK+N,oBAAoBlN,aAKzCkT,GAA2B5M,EAAAA,EAAAA,IAAH,8YAiB1BoH,EAAAA,EACAlF,EAAAA,G,yKCdS+K,EAAsB,SAACC,GAAD,OACjChI,KAAKiI,KAAKD,EAAgBE,EAAAA,IAHb,GAkCFC,EAOT,SAAC,GAAgF,IAA/EC,EAA8E,EAA9EA,YAAaC,EAAiE,EAAjEA,eAAgBC,EAAiD,EAAjDA,kBAAmBC,EAA8B,EAA9BA,gBAAoBC,GAAU,YAC5EC,EAAmBC,GAAAA,CAAMN,GAAa,SAACO,GAAD,OAAOC,EAAAA,EAAAA,IAAiBD,EAAEE,aAGhEC,GADSC,EAAAA,EAAAA,IAAY,CAACC,MAAOT,EAAiBU,KAAMC,EAAAA,GAAAA,OACbC,MAAMhS,QACjD,SAACiS,GAAD,eACE,UAAAX,EAAiBW,EAAEC,KAAK1Y,aAAxB,mBAA+B2Y,WAAWhB,UAA1C,eAA8D3X,QAAS0X,EAAe1X,QAGpFgD,EAAmB,CACvB4V,SAAUT,EAA8B7W,KAAI,SAACuX,GAAD,MAAU,CACpDC,EAAGD,EAAIC,EACP9Y,KAAM6Y,EAAIH,KAAK1Y,KACf+Y,oBAAqB,EACrBC,oBAAqB,MAEvBrO,WAAY,GACZsO,iBAAkBvB,EAAewB,cAAc5X,KAAI,SAAC6X,EAAcC,GAAf,MAAwB,CACzEA,IAAAA,EACApZ,KAAMmZ,EACNE,YAAY,EACZpI,KAAM,GACNqI,MAAOnB,EAA8B7W,KAAI,SAACuX,GAAD,MAAU,CACjD7Y,KAAM6Y,EAAIH,KAAK1Y,KACfuZ,KAAM,EACNtZ,MAAOuZ,EACL1B,EAAiBe,EAAIH,KAAK1Y,MAAMyZ,wBAAwB9B,EAAmBwB,aAMnF,OACE,SAACO,GAAD,kBACM7B,GADN,IAEExW,eAAgBqW,EAAewB,cAC/BlW,KAAMA,EACN2W,eAAe,MAKRH,EAAoC,SAACI,GAChD,OAAOA,IAAU5S,EAAAA,GAAAA,QACb,UACA4S,IAAU5S,EAAAA,GAAAA,gBACV,kBACA,WAGO6S,EAKT,SAAC,GAAsE,IAAD,EAApExS,EAAoE,EAApEA,YAAaa,EAAuD,EAAvDA,aAAcyC,EAAyC,EAAzCA,WAAYtJ,EAA6B,EAA7BA,eAAmBwW,GAAU,YAElE9M,GAAqBC,EAAAA,EAAAA,GAAsB3D,GAC3CyS,GAAgB,kBAAO/O,GAAP,IAA2B7C,aAAAA,IAC3C6R,GAAWvO,EAAAA,EAAAA,GAGfwO,EAAsC,CACtC3X,UAAW,CAACyX,iBAAAA,KAGRG,EACkD,sBAAtD,UAAAF,EAAS/W,YAAT,eAAekX,wBAAwB/W,aACvC4W,EAAS/W,KAAKkX,wBAAwBD,aAElCjX,GAAOmX,EAAAA,EAAAA,IAAc,CACzB9Y,eAAAA,EACAsJ,WAAAA,EACAyP,UAAW,GACXH,aAAAA,IAGF,OAAKjX,GAIH,SAAC0W,GAAD,kBACM7B,GADN,IAEE8B,eAAe,EACfzR,aAAcA,EACd7G,eAAgBA,EAChB2B,KAAMA,MARD,qBAaL0W,EAKF,SAACjb,GACH,OAAmC4b,EAAAA,EAAAA,KAA5BC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,eACjB,EAA8BtX,EAAAA,SAA6C,MAA3E,eAAOuX,EAAP,KAAgBC,EAAhB,KACA,EAA8BxX,EAAAA,SAA6C,MAA3E,eAAOyX,EAAP,KAAgBC,EAAhB,KACOpQ,EAAqB9L,EAArB8L,YAAavH,EAAQvE,EAARuE,KAEpBC,EAAAA,WAAgB,WACVqX,EAASlW,OACXmG,EAAY6M,EAAoBkD,EAASlW,UAE1C,CAACkW,EAASlW,MAAOmG,IAEpB,IAAOqO,EAA8B5V,EAA9B4V,SAAUK,EAAoBjW,EAApBiW,iBAEX2B,EAAqB,SAACtB,GAC1B,IAAMuB,EAAc,GAEpB,OADAvB,EAAMwB,SAAQ,SAAChM,GAAD,OAAW+L,EAAY/L,EAAK9O,MAAQ8O,KAC3C8J,EAAStX,KAAI,SAACyZ,GAAD,OAAaF,EAAYE,EAAQ/a,UAGjDgb,EAAe5D,EAAoBkD,EAASlW,OAC5C6W,EAAe5L,KAAK6L,IAAI,EAAGjC,EAAiBxQ,OAAShK,EAAM+L,OAASwQ,GACpEG,EAAa9L,KAAK6L,IAAIF,EAAc/B,EAAiBxQ,OAAShK,EAAM+L,QACpE4Q,EAAiBnC,EAAiBoC,MAAMJ,EAAcE,GAC5D,EA5I6B,SAAClC,GAC9B,IADgF,EAC3EqC,EAAqBC,KAAKC,MAAQ,IAAzBC,EAA+B,EADmC,UAExDxC,GAFwD,IAEhF,2BAA0C,CAAC,IAAD,EAA/BpN,EAA+B,kBACrBA,EAAUyN,OADW,IACxC,2BAAoC,CAAC,IAA1BxK,EAAyB,QAClC,GAAkB,IAAdA,EAAKyK,KAAT,CADkC,MAIb,CAAClK,KAAKqM,IAAIJ,EAASxM,EAAKyK,MAAOlK,KAAK6L,IAAIO,EAAS3M,EAAKyK,OAA1E+B,EAJiC,KAIxBG,EAJwB,OADI,gCAFsC,8BAUhF,MAAO,CAACH,EAASG,GAkIUE,CAAuB1C,GAAlD,eAAOqC,EAAP,KAAgBG,EAAhB,KACMG,GAAiBC,EAAAA,EAAAA,IAAwB5C,EAAiB3X,KAAI,SAACwa,GAAD,OAAOA,EAAE9b,SAE7E,OACE,UAAC+b,EAAD,YACE,UAACrb,EAAA,GAAD,CACEC,SAAU+Z,EACVja,QAAS,kBAAMka,EAAW,OAC1Bhb,MAAO,CAACyE,MAAO,QACfxD,MAAO8Z,EAAO,UAAMA,EAAQnZ,cAAd,SAAqC,GAJrD,WAME,SAACN,EAAA,EAAD,CAAK4P,QAAS,CAACpH,OAAQ,IAAvB,SACGiR,IACC,SAAC5D,EAAD,CACE5O,aAAczJ,EAAMyJ,aACpB3G,cAAemZ,EAAQnZ,mBAI7B,SAACb,EAAA,GAAD,WACE,SAACe,EAAA,GAAD,CAAQiE,OAAO,UAAUsW,WAAW,EAAMta,QAAS,kBAAMiZ,EAAW,OAApE,sBAKJ,iBACEhb,MAAO,CACLoG,SAAU,WACVrG,QAAS,QAHb,WAME,SAAC,KAAD,CAAuBuc,SAAUxd,EAAM+L,OAASwQ,EAAevc,EAAM4C,eAAeoH,OAApF,UACE,UAAC,KAAD,CAAYwD,UAAQ,EAACtM,MAAO,CAACJ,KAAM,EAAG2c,WAAY,EAAG9b,SAAU,UAA/D,WACE,SAAC,KAAD,CAAUT,MAAO,CAACwc,OAAQP,KACzBnd,EAAMkb,gBAAiB,SAAC,KAAD,CAAWha,MAAO,CAACyc,YAAa,IAAhC,uBACxB,SAACC,EAAD,IACCzD,EAAStX,KAAI,SAACwN,GAAD,OACZ,SAAC,KAAD,CACEnP,MAAO,CAACyc,YAAa,EAAItN,EAAKgK,GAE9B,eAAchK,EAAK9O,KACnBwa,QAAS1L,EAAK9O,QAAL,OAAcwa,QAAd,IAAcA,OAAd,EAAcA,EAAS8B,UAJlC,SAMGxN,EAAK9O,MAJD8O,EAAK9O,cAUjBvB,EAAM+L,OAASwQ,EAAevc,EAAM4C,eAAeoH,QAClD,SAAC8T,EAAD,CACEC,WAAW,OACX9a,QAAS,kBACPjD,EAAMgM,UACJ4E,KAAK6L,IACH,EACA7L,KAAKqM,IACHjd,EAAM+L,OAASwQ,EAAe,EAC9Bvc,EAAM4C,eAAeoH,OAASuS,MARxC,UAcE,SAAChV,EAAA,GAAD,CAAMhG,KAAK,mBAEX,MACJ,gCAAKL,MAAO,CAACJ,KAAM,EAAGa,SAAU,SAAU2F,SAAU,aAAiBwU,GAArE,cACE,gBACE5a,MAAO,CACLyE,MAAO6U,EAAiBxQ,OAAS8O,EAAAA,GACjCxR,SAAU,WACVoW,OAAQ,OACRrc,MAAO,EACP2c,OAAQ,GANZ,SASGrB,EAAe9Z,KAAI,SAACwa,EAAG1C,GAAJ,OAClB,UAAC,KAAD,CAEEzZ,MAAO,CACL8c,OAAQrB,EAAe3S,OAAS2Q,EAChChV,MAAOmT,EAAAA,GACPxR,SAAU,WACVjG,OAAQkb,EAAe5B,GAAO7B,EAAAA,GAAW,IAN7C,WASE,SAAC,KAAD,CAAgBmF,QAASd,EAAgBe,MAAOb,EAAE9b,OACjDvB,EAAMkb,gBACL,SAAC,KAAD,CAAWha,MAAO,CAACid,UAAW,UAA9B,UACE,SAACC,GAAD,CAEE5L,KAAM6K,EAAE7K,KACRoI,WAAYyC,EAAEzC,WACdiC,QAASA,EACTG,QAASA,EACTjB,QAASA,EACTC,WAAYA,EACZE,WAAYA,EACZpZ,cAAeua,EAAE9b,MATnB,UACU8b,EAAE9b,KADZ,sBAaJ,SAACqc,EAAD,IACCzB,EAAmBkB,EAAExC,OAAOhY,KAAI,SAACmF,GAAD,OAC/B,SAACoW,GAAD,CAEE/N,KAAMrI,EACNwK,KAAM6K,EAAE7K,KACRoI,WAAYyC,EAAEzC,WACdiC,QAASA,EACTG,QAASA,EACTjB,QAASA,EACTC,WAAYA,EACZE,WAAYA,EACZpZ,cAAeua,EAAE9b,MATZyG,EAAEzG,WA3BN8b,EAAE9b,cA2CdvB,EAAM+L,OAAS,GACd,SAAC+R,EAAD,CACEC,WAAW,QACX9a,QAAS,kBAAMjD,EAAMgM,UAAU4E,KAAK6L,IAAI,EAAGzc,EAAM+L,OAASwQ,KAF5D,UAIE,SAAChV,EAAA,GAAD,CAAMhG,KAAK,oBAEX,YAMNuc,EAAerS,EAAAA,GAAAA,IAAAA,WAAH,yEAAGA,CAAH,+SAGIhK,EAAAA,EAAAA,aAOlB,kBAAkC,SAAlC,EAAEsc,WAAyC,eAAiB,eAa1DT,EAA8B7R,EAAAA,GAAAA,IAAAA,WAAH,wFAAGA,CAAH,oBAI3BmS,EAAUnS,EAAAA,GAAAA,IAAAA,WAAH,oEAAGA,CAAH,mEAIahK,EAAAA,EAAAA,aAqBpB8Z,IAlB4C7P,EAAAA,EAAAA,IAAH,+MAkBFA,EAAAA,EAAAA,IAAH,+VAatC2S,EAAAA,KAGEC,GAAgBC,KAAKC,UAAU,CACnCld,IAAK,GACLmd,KAAM,KAGFL,GAUD,SAAC,GAA8E,IAE9EM,EAFCrO,EAA4E,EAA5EA,KAAMmC,EAAsE,EAAtEA,KAAMoI,EAAgE,EAAhEA,WAAYmB,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,WAAYE,EAA+B,EAA/BA,WAAYpZ,EAAmB,EAAnBA,cAC9D,EAA4B0B,EAAAA,UAAe,GAA3C,eAAOma,EAAP,KAAeC,EAAf,KAGA,GAAKhE,EAEE,GAAIvK,EACTqO,EAAerO,EAAK7O,MAAMqd,mBACrB,GAAoB,IAAhBrM,EAAKxI,OACd0U,EAAe,YACV,CACL,IAAMzZ,EAAYuN,EAAKA,EAAKxI,OAAS,GAAG9C,OACxCwX,EAAezZ,IAAcqB,EAAAA,GAAAA,SAAqB,UAAYrB,EAAU4Z,mBAPxEH,EAAe,UAUjB,IAAM7X,GACJ,gBACEiY,UAAS,iBAAYJ,GACrBK,aAAc,kBAAM/C,EAAW,CAAC6B,SAAQ,OAAExN,QAAF,IAAEA,OAAF,EAAEA,EAAM9O,KAAMuB,cAAAA,KACtDkc,aAAc,kBAAMhD,EAAW,OAC/B,eACEpB,IAAevK,EAAwB,IAAhBmC,EAAKxI,OAAL,kBAAiCwI,EAAKxI,OAAtC,cAAuDD,EAEhF,qBAAoBuU,KAIxB,OACGK,GACCnM,EAAKxI,SAAiB,OAAP+R,QAAO,IAAPA,OAAA,EAAAA,EAAS8B,aAAT,OAAsBxN,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM9O,QAAe,OAAPwa,QAAO,IAAPA,OAAA,EAAAA,EAASjZ,iBAAkBA,GAMhF,SAAC8D,EAAA,EAAD,CACE8I,gBAAgB,QAChByI,UAAU,eACV8G,UAAW,kBAAML,GAAU,IAC3BM,SAAU,kBAAMN,GAAU,IAC1B/X,SACE,UAACC,EAAA,GAAD,YACE,SAACqY,EAAA,EAAD,CACEjf,KAAK,cACL2B,KAAK,0BACLH,IAAI0d,EAAAA,EAAAA,IAAe5M,EAAKA,EAAKxI,OAAS,GAAI,CAAC+G,QAASV,EAAOA,EAAK9O,KAAO,UAEzE,SAACuF,EAAA,GAAD,CACE5G,KAAK,0BACL2B,KAAI,qBAAgB2Q,EAAKxI,OAArB,KACJ/G,QAAS,kBAAMiZ,EAAW,CAAC2B,SAAQ,OAAExN,QAAF,IAAEA,OAAF,EAAEA,EAAM9O,KAAMuB,cAAAA,UAfzD,SAoBG+D,IAxBIA,I,qRC3cEiS,EAAW,GAEXuG,EAAqB,CAChCC,QAAS7d,EAAAA,EAAAA,SACT8d,gBAAiB9d,EAAAA,EAAAA,SACjB+d,QAAS/d,EAAAA,EAAAA,OACTge,gBAAiBhe,EAAAA,EAAAA,OACjBie,QAASje,EAAAA,EAAAA,UACTke,YAAa,QAMTC,EAAe,SAACpe,GAAD,yCAA+CA,EAA/C,gBAA4DA,EAA5D,WAGRqe,EAAapU,EAAAA,GAAAA,IAAAA,WAAH,qEAAGA,CAAH,gzBAWnB,gBAAE+B,EAAF,EAAEA,SAAUyO,EAAZ,EAAYA,QAAS6D,EAArB,EAAqBA,mBAAoB/D,EAAzC,EAAyCA,QAAzC,OACCvO,IACAyO,IACA6D,GAFD,WAGI/D,EAAU,GAAK,SAHnB,iCAIgBta,EAAAA,EAAAA,QAJhB,4CAMIse,EANJ,mCAOkBte,EAAAA,EAAAA,MAPlB,uDASoBA,EAAAA,EAAAA,QATpB,+FAiBA,qBAAE+L,UACM,kBAEJuS,EAFI,8BAGKte,EAAAA,EAAAA,QAHL,sBAOR,qBAAEwa,SACK,sBACQxa,EAAAA,EAAAA,QADR,kBAELue,EAFK,+CAKLD,EALK,iCAMSte,EAAAA,EAAAA,MANT,wEASWA,EAAAA,EAAAA,QATX,6BAcP,qBAAEqe,oBACgB,sBACHre,EAAAA,EAAAA,QADG,kBAEhBue,EAFgB,+CAKhBD,EALgB,iCAMFte,EAAAA,EAAAA,MANE,wEASAA,EAAAA,EAAAA,QATA,4BAeRqX,EAkBMrX,EAAAA,EAAAA,QAiBE4d,EAAmBC,QAKnBD,EAAmBG,QAKnBH,EAAmBE,gBAKnBF,EAAmBI,gBAKnBJ,EAAmBI,gBAKnBJ,EAAmBK,SAM5BM,EAAYvU,EAAAA,GAAAA,IAAAA,WAAH,oEAAGA,CAAH,2HACVqN,EACKA,GAKD,gBAAEiD,EAAF,EAAEA,QAAF,MAAiC,CAACA,EAAUta,EAAAA,EAAAA,QAAiB,eA/ItBoB,IAAI+c,GAAc/e,KAAK,QAkJjEof,EAAWxU,EAAAA,GAAAA,IAAAA,WAAH,mEAAGA,CAAH,kHAad,SAAS2R,EAAwB8C,GACtC,IAAMC,EAAYvP,KAAK6L,IAAL,MAAA7L,MAAI,OAAQsP,EAAOrd,KAAI,SAACwa,GAAD,OAAOA,EAAErT,YAClD,OAL0B,IAKlBmW,EAAY,GAAiB,IAAZA,EAAkB,IAGtC,IAAMC,EAA6D,SAAC,GAAsB,IAArBlC,EAAoB,EAApBA,MAAOD,EAAa,EAAbA,QACjF,OACE,SAAC8B,EAAD,CAAqB7e,MAAO,CAACwc,OAAQO,EAVb,IAUxB,UACE,gBAAKa,UAAU,SAAf,SAAyBZ,OAKzB6B,EAAsBtU,EAAAA,GAAAA,IAAAA,WAAH,8EAAGA,CAAH,6UAhBG,GACH,IAwCZ4U,EAAgC,IAEhCC,EAAwB7U,EAAAA,GAAAA,IAAAA,WAAH,gFAAGA,CAAH,2FAENhK,EAAAA,EAAAA,QAEjB4e,GAEP,qBAAE7C,SAA0B,4CAA8C,MAG3C/R,EAAAA,GAAAA,IAAAA,WAAH,8EAAGA,CAAH,sbAMhBhK,EAAAA,EAAAA,MAEKA,EAAAA,EAAAA,QAAkBA,EAAAA,EAAAA,QAcfA,EAAAA,EAAAA,QACAA,EAAAA,EAAAA,QAGAA,EAAAA,EAAAA,U,oOCrNlB8e,EAAwB,IAAIC,IAAI,CAAClQ,EAAAA,GAAAA,YAA6BA,EAAAA,GAAAA,UAEpE,SAASmQ,EAAalH,GACpB,OAAOA,EAAEmH,WAAa,EAGxB,SAASC,EAAepH,EAAmCS,GACzD,OAAOyG,EAAalH,GAAKkH,EAAazG,GAMjC,SAAS4G,EAAiBC,EAAkB9P,GACjD,IAAM+P,EAAe,IAAIC,OAAOF,EAtBA,YAuBhC,OAAO9P,IAAY8P,GAAY9P,IAAO,UAAQ8P,EAAR,aAA8B9P,EAAQiQ,MAAMF,GAyI7E,IAAMpF,EAAgB,SAACuF,GAC5B,IAAMC,EAAmB1c,EAAAA,SAIzB,IAAKyc,EAAOzF,aACV,OAAO,KAET,GAAI0F,EAAiBC,UAAWC,EAAAA,EAAAA,oBAAmBH,EAAQC,EAAiBC,QAAQF,QAClF,OAAOC,EAAiBC,QAAQE,OAGlC,IAAMzH,GAAQ0H,EAAAA,EAAAA,GAA+BL,EAAOzF,cAAc3Y,KAAI,SAAC0e,GAAD,OAAOA,EAAEC,SAGzEC,GAAiBC,EAAAA,EAAAA,GAAc9H,EAAOqH,EAAOtF,WAK7C0F,EA1JR,SACEM,EACA/e,EACAsJ,EACA0V,GAEA,IAAMC,EAAmB,GACzB3V,EAAWmQ,SAAQ,SAACgB,GAGlBA,EAAE7K,KAAKsP,KAAKnB,GACZkB,EAAiBxE,EAAE9b,MAAQ8b,KAG7B,IAAM7C,EAAmB5X,EAAeC,KAAI,SAACtB,EAAMoZ,GACjD,IAAMvN,EAA2ByU,EAAiBtgB,IAAS,CACzDA,KAAAA,EACAqZ,YAAY,EACZpI,KAAM,IAEFqI,EAAQ8G,EAAO5H,MAAMlX,KAAI,YAAa,IAAD,EAAVoX,EAAU,EAAVA,KACzB8H,EAAa,CACjBxgB,KAAM0Y,EAAK1Y,KACXC,MAAO,UACPsZ,KAAM,GAGR,IAAK1N,EAAUoF,KAAKxI,OAClB,OAAO+X,EAGT,IAKIC,EALEC,EAAU7U,EAAUoF,KAAKpF,EAAUoF,KAAKxI,OAAS,GACjDkY,EAAiB,UAAGD,EAAQ7R,UAAUjI,MAAK,SAACga,GAAD,OAC/CvB,EAAiB3G,EAAK1Y,KAAM4gB,EAAMpR,mBADb,aAAG,EAEvB7J,OAGH,GACEkG,EAAUoF,KAAKxI,OAAS,KACtBkY,GAAqB3B,EAAsB6B,IAAIF,IAGjD,IADA,IAAIvH,EAAMvN,EAAUoF,KAAKxI,OAAS,EAC3B2Q,GAAO,IAAMqH,GAAmB,CAAC,IAAD,EAE/BK,EAAa,UADHjV,EAAUoF,KAAKmI,GACDvK,UAAUjI,MAAK,SAACga,GAAD,OAC3CvB,EAAiB3G,EAAK1Y,KAAM4gB,EAAMpR,mBADjB,aAAG,EAEnB7J,OACH,GAAImb,IAAkB9B,EAAsB6B,IAAIC,GAAgB,CAC9DL,EAAoBK,EACpB,MAEF1H,IAIJ,IAAKuH,IAAsBF,EACzB,OAAOD,EAGT,IAAMvgB,GACH0gB,GAAqB3B,EAAsB6B,IAAIF,GAAhD,UACQF,EADR,YAEKE,EACP,MAAO,CACL3gB,KAAM0Y,EAAK1Y,KACXuZ,KAAM2F,EAAawB,GACnBzgB,MAAAA,MAGJ,OAAO,kBACF4L,GADL,IAEEyN,MAAAA,EACAF,IAAAA,OAIE2H,EAAqB9H,EAAiBzS,QAAO,SAACsV,GAAD,OAAOA,EAAE7K,KAAKxI,OAAS,KAAGA,OAEvEmQ,EAAWwH,EAAO5H,MAAMlX,KAAI,SAACuX,EAAKO,GACtC,IAAM4H,EAAgB/H,EAAiBzS,QAAO,SAACsV,GAAD,OAAOA,EAAExC,MAAMF,GAAKnZ,MAAMuJ,SAAS,cAC3EyX,EAAgBhI,EAAiBzS,QAAO,SAACsV,GAAD,OAAOA,EAAExC,MAAMF,GAAKnZ,MAAMihB,SAAS,cACjF,MAAO,CACLpI,EAAGD,EAAIC,EACP9Y,KAAM6Y,EAAIH,KAAK1Y,KACf+Y,oBAAqBgI,EACjB1R,KAAK8R,MAAOH,EAAcvY,OAASsY,EAAsB,KACzD,EACJ/H,oBAAqB+H,EACjB1R,KAAK8R,MAAOF,EAAcxY,OAASsY,EAAsB,KACzD,MAIR,UAAIV,QAAJ,IAAIA,GAAAA,EAASe,wBAAyB,CACpC,IADqC,IAAD,WAC3B/hB,GACkC,IAArCuZ,EAASvZ,GAAI2Z,sBACfJ,EAASyI,OAAOhiB,EAAI,GACpB4Z,EAAiB6B,SAAQ,SAACgB,GAAD,OAAOA,EAAExC,MAAM+H,OAAOhiB,EAAI,QAH9CA,EAAKuZ,EAASnQ,OAAS,EAAGpJ,GAAM,EAAGA,IAAO,EAA1CA,GAMT,IAAK,IAAIA,EAAK4Z,EAAiBxQ,OAAS,EAAGpJ,GAAM,EAAGA,KAEX,IAArC4Z,EAAiB5Z,GAAI4R,KAAKxI,QAC1BwQ,EAAiB5Z,GAAIia,MAAMgI,OAAM,SAACxS,GAAD,OAAUA,EAAK7O,MAAMuJ,SAAS,gBAE/DyP,EAAiBoI,OAAOhiB,EAAI,GAKlC,MAAO,CAACuZ,SAAAA,EAAUjO,WAAAA,EAAYsO,iBAAAA,GA4CfsI,EAHAnJ,EAAAA,EAAAA,IAAY,CAACC,MAAO6H,EAAesB,IAAKlJ,KAAMC,EAAAA,GAAAA,OAGtBmH,EAAOre,eAAgBqe,EAAO/U,WAAY+U,EAAOW,SAExF,OADAV,EAAiBC,QAAU,CAACE,OAAAA,EAAQJ,OAAAA,GAC7BI,GAGI2B,GAAqCtX,EAAAA,EAAAA,IAAH,4QAoBlC2S,GAAyC3S,EAAAA,EAAAA,IAAH,+bA0B/CuX,EAAAA,I,iNC/OEC,EAA8B,CAClC1Q,KAAM,GACN5P,eAAgB,GAChBuP,SAAS,EACTgR,iBAAkB,GAmBb,SAAShX,EAAT,GAUwB,IAT7BxD,EAS4B,EAT5BA,iBACAyD,EAQ4B,EAR5BA,iBACAxJ,EAO4B,EAP5BA,eACAiJ,EAM4B,EAN5BA,SACAI,EAK4B,EAL5BA,WACAO,EAI4B,EAJ5BA,QACAF,EAG4B,EAH5BA,mBACAP,EAE4B,EAF5BA,OACAU,EAC4B,EAD5BA,UAEM2W,GAASC,EAAAA,EAAAA,KAETC,EAAU9e,EAAAA,OAAa,GAC7B,EAAkCA,EAAAA,SAA0B0e,GAA5D,eAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAqBlF,KAAKC,UAAL,kBACtBvS,EAAWpJ,KAAI,SAAC4C,GACjB,MAAqBA,EAAMC,MAAMge,MAAM,KAAvC,eACA,MAAO,CAAChc,IADR,KACahC,MADb,UAFuB,CAKzB,CACEgC,IAAK2E,EAAAA,EAAAA,mBACL3G,MAAM,GAAD,OAAK4G,EAAmBvD,eAAxB,YAA0CuD,EAAmBtD,4BA2HtE,OAvHAxE,EAAAA,WAAgB,WAId,IAAMmf,EAAIL,EAAQnC,QAAU,EAC5BmC,EAAQnC,QAAUwC,EAElB,IAAMC,EAAUrF,KAAKsF,MAAMJ,GAC3BD,GAAa,SAACD,GAAD,eAAC,UAAmBA,GAApB,IAA+B/Q,KAAM,GAAIL,SAAS,OAE/D,IAAM/C,EAAG,mCAAG,+FACNkU,EAAQnC,UAAYwC,EADd,iDAINR,EAAmBvgB,EAAeoH,QAAU+B,GAAU,GACpD+X,EAAUlT,KAAK6L,IAAI,EAAG0G,EAAmBtX,GAC/C2X,GAAa,SAACrI,GAAD,eAAC,UAAeA,GAAhB,IAAuBvY,eAAAA,EAAgBugB,iBAAAA,OAI5B,EAVd,2GAaFY,EAAgBnT,KAAK6L,IAAI0G,EAHT,EAG6C,GAC7Da,EAAaphB,EAAega,MAAMmH,EAAeZ,GAd/C,SAecc,QAAQlB,IAC5BiB,EAAWnhB,KAAI,SAACC,GACd,IAAMohB,EAAkB,CAACxc,IAAK2E,EAAAA,EAAAA,aAAyB3G,MAAOiD,GACxDwb,EAAe,CAACzc,IAAK0E,EAAkB1G,MAAO5C,GAG9CshB,EAAgB5X,EAClB,CACE/C,aAAc+C,EACd+L,KAAK,GAAD,eAAMqL,GAAN,CAAeO,KAErB,CAAC5L,KAAK,GAAD,eAAMqL,GAAN,CAAeO,EAAcD,KACtC,OAAOG,EAAmBjB,EAAQ,CAACkB,MAAO,IAAMvc,OAAQqc,QA3BpD,UAeFG,EAfE,OA8BJjB,EAAQnC,UAAYwC,EA9BhB,4DAkCRR,EAAmBY,EACnBP,GAAa,SAACrI,GAAD,qBAAC,UACTA,GADQ,IAEX3I,MAAM,UAAI2I,EAAM3I,OAAMgS,OAAhB,gBAA0BD,IAChCpS,QAASgR,EAAmB,EAC5BA,iBAAAA,OAvCM,sDAYHA,EAAmBW,GAZhB,sKA+CJW,EAAwBC,aAAW,iBAAC,2FACpCpB,EAAQnC,UAAYwC,EADgB,yCAE/BgB,cAAcF,IAFiB,cAKxCjB,GAAa,SAACrI,GAAD,eAAC,UAAeA,GAAhB,IAAuBhJ,SAAS,OALL,SAUnBkS,EAAmBjB,EAAQ,CAC9CkB,MAAO,GACPvc,OAAQ,CACNwQ,KAAK,GAAD,eAAMqL,GAAN,CAAe,CAAClc,IAAK2E,EAAAA,EAAAA,aAAyB3G,MAAOiD,QAbrB,cAUlCic,EAVkC,gBAkBlBP,EAAmBjB,EAAQ,CAC/Crb,OAAQ,CACNnD,SAAU,CAAC0B,EAAAA,GAAAA,SACXiS,KAAK,GAAD,eAAMqL,GAAN,CAAe,CAAClc,IAAK2E,EAAAA,EAAAA,aAAyB3G,MAAOiD,QArBrB,UAkBlCkc,EAlBkC,OAyBpCvB,EAAQnC,UAAYwC,EAzBgB,0CA0B/BgB,cAAcF,IA1BiB,QA+BlCK,EAAW,kBAAID,IAAJ,OAAgBD,IAAQ7c,QAAO,SAACqH,GAAD,OAC9CA,EAAImJ,KAAKpQ,MAAK,SAAC4c,GAAD,OAAOA,EAAErd,MAAQ0E,GAAoBxJ,EAAemI,SAASga,EAAErf,aAE/E8d,GAAa,SAACrI,GACZ,IAAM6J,EAAU7J,EAAM3I,KACnBzK,QAAO,SAACK,GAAD,OAAQ0c,EAAStZ,MAAK,SAACyZ,GAAD,OAAOA,EAAE5c,QAAUD,EAAEC,YAClDmc,OAAOM,GACV,OAAO,kBAAI3J,GAAX,IAAkBhJ,SAAS,EAAOK,KAAMwS,OAtCF,4CAwCvC,KAvFO,4CAAH,qDA8FT,OAJKvY,GACH2C,IAGK,WACLkU,EAAQnC,SAAW,KAEpB,CACDtV,EACAuX,EACAza,EACAyD,EACAqX,EACAjX,EACAT,EACAnJ,EACA6J,IAsBJ,SAA4BlI,EAAiB6H,GAI3C,IAAMhH,EAA2B,GAC3B8f,EAA0C,GAgBhD,OAdA3gB,EAAK3B,eAAeyZ,SAAQ,SAAC9a,EAAMoZ,GACjCuK,EAAO3jB,GAAQ,CACbA,KAAAA,EACAqZ,WAAYD,GAAOpW,EAAK4e,iBACxB3Q,KAAM,IAERpN,EAAQiC,KAAK6d,EAAO3jB,OAGtBgD,EAAKiO,KAAK6J,SAAQ,SAACjU,GAAO,IAAD,IACjBtF,GAAgB,UAAAsF,EAAEmQ,KAAKpQ,MAAK,SAAC4c,GAAD,OAAOA,EAAErd,MAAQ0E,YAA7B,eAAgD1G,QAAS,GAC/E,UAAAwf,EAAOpiB,UAAP,SAAuB0P,KAAKnL,KAAKe,MAG5BhD,EAxCA+f,CAAmB5B,EAAWnX,GACtC,SAEciY,EAAmB,EAAnBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WACEjB,EACAxf,GAFF,uFAIuBwf,EAAO5S,MAAmE,CAC7F4U,YAAa,eACb5U,MAAO6U,EACPzhB,UAAAA,IAPJ,cAIQyd,EAJR,yBAUoD,SAA/CA,EAAO9c,KAAK+N,oBAAoB5N,YAC/B2c,EAAO9c,KAAK+N,oBAAoBlN,SAClC,IAZJ,kEAwCA,IAAMigB,GAA8B3Z,EAAAA,EAAAA,IAAH,qbAgB7BsX,EAAAA,GACApV,EAAAA,I,yJCvPS0X,EAAwB,GAWxBC,EAAoB,SAACvlB,GAChC,IAAOwlB,EAAyExlB,EAAzEwlB,SAAUviB,EAA+DjD,EAA/DiD,QAASsG,EAAsDvJ,EAAtDuJ,SAAUC,EAA4CxJ,EAA5CwJ,aAAcic,EAA8BzlB,EAA9BylB,aAAcC,EAAgB1lB,EAAhB0lB,aAC1DC,EAAmBpc,IAAaqc,EAAAA,GACtC,OACE,SAACC,EAAD,CAAqBC,MAAON,EAAUviB,QAASA,EAA/C,UACE,UAAC,IAAD,CACEnC,KAAM,CAACE,WAAY,SAAUwO,eAAgB,iBAC7C4C,QAAS,CAACyB,WAAY,IAFxB,WAIE,UAAC,IAAD,CAAK/S,KAAM,CAACE,WAAY,SAAUyB,IAAK,GAAvC,WACE,SAAC,KAAD,CAAMlB,KAAK,SAASC,MAAOC,EAAAA,EAAAA,QAC3B,4BACE,SAACskB,EAAD,UAAWJ,EAAmBnc,EAAeD,IAC5Ckc,IAAiBE,GAChB,SAACK,EAAD,qBAAmBxc,KACjB,YAGR,UAAC,IAAD,CAAK1I,KAAM,CAACE,WAAY,SAAUyB,IAAK,GAAvC,UACGijB,GACD,SAAC,IAAD,CAAKtkB,OAAQ,CAACE,IAAK,GAAnB,UACE,SAAC,KAAD,CAAMC,KAAK,+BAQjBskB,EAAsBpa,EAAAA,GAAAA,OAAAA,WAAH,kFAAGA,CAAH,iTACHhK,EAAAA,EAAAA,OAEWA,EAAAA,EAAAA,YAAuCA,EAAAA,EAAAA,YAM5D6jB,EASY7jB,EAAAA,EAAAA,QAGpB2V,EAAAA,IAEE,qBAAE0O,MAAoB,KAAH,gCAInBC,EAAWta,EAAAA,GAAAA,KAAAA,WAAH,uEAAGA,CAAH,sBAIRua,EAAeva,EAAAA,GAAAA,KAAAA,WAAH,2EAAGA,CAAH,+BAEPhK,EAAAA,EAAAA,U,yNClELwkB,EAAoB,CACxBC,OAAQzkB,EAAAA,EAAAA,QACR0kB,YAAa1kB,EAAAA,EAAAA,QACb2kB,SAAU3kB,EAAAA,EAAAA,QACV4kB,QAAS5kB,EAAAA,EAAAA,QACT6kB,QAAS7kB,EAAAA,EAAAA,QACT6d,QAAS7d,EAAAA,EAAAA,SACT+d,QAAS/d,EAAAA,EAAAA,OACT8kB,UAAW9kB,EAAAA,EAAAA,OACX+kB,SAAU/kB,EAAAA,EAAAA,QAaCglB,EAAe,SAACzmB,GAC3B,IAAOkH,EAAiClH,EAAjCkH,OAAP,EAAwClH,EAAzB0mB,QAAAA,OAAf,MAVkB,EAUlB,EACMllB,EAAQykB,EAAkB/e,GAEhC,OAAO,SAACyf,EAAD,CAAKC,OAAQplB,EAAOqlB,SAAUH,KAS1BI,EAAmB,SAAC9mB,GAC/B,IAAO+mB,EAAuB/mB,EAAvB+mB,KAAMva,EAAiBxM,EAAjBwM,QAASgG,EAAQxS,EAARwS,KAChBtN,EAAQsN,EAAKxI,OAEbqG,EAAO,GADQO,KAAK6L,IAxBF,EAwByBvX,GAEjD,OACE,SAAC,IAAD,CAAKpE,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,GAAzD,SACG+P,EAAK3P,KAAI,SAACuM,EAAKxO,GAAN,OACR,SAAC,IAAD,CAEE0G,SAAS,MACToI,gBAAgB,QAChB7I,SACE,0BACE,SAACmgB,EAAD,CAAkB5X,IAAKA,EAAK7N,KAAMiL,MAGtCmD,eAAgB,IATlB,UAWE,SAAC8W,EAAD,CAEEpe,MAAO+G,EAAI/G,MACXnB,OAAQkI,EAAIlI,OACZwf,QAASK,EA7CD,GA6CuB7hB,EAAQtE,EAAK,GAAKyP,EAAO,GAHnDjB,EAAI/G,QAXN+G,EAAI/G,aA2BN2e,EAAmB,SAAC,GAA+B,IAA9BzlB,EAA6B,EAA7BA,KAAM6N,EAAuB,EAAvBA,IACtC,OACE,UAAC6X,EAAD,YACE,SAACC,EAAD,UAAe3lB,KACf,UAAC4lB,EAAD,YACE,UAAC,IAAD,CAAKrmB,KAAM,CAACE,WAAY,SAAUD,UAAW,MAAO0B,IAAK,GAAzD,WACE,SAAC,KAAD,CAAoByE,OAAQkI,EAAIlI,UAChC,SAAC,KAAD,CAAMxF,GAAE,gBAAW0N,EAAI/G,OAAvB,UACE,SAAC,KAAD,CAAMnH,MAAO,CAACkB,SAAU,QAAxB,UAAkCgR,EAAAA,EAAAA,IAAYhE,WAGlD,UAAC,IAAD,CAAKtO,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAI2P,QAAS,CAAC9Q,IAAK,GAAzD,WACE,SAAC,KAAD,CAAS8N,IAAKA,KACd,SAAC,KAAD,CAAiBA,IAAKA,UAGzBS,EAAAA,GAAAA,IAAmBT,EAAIlI,SAAWqE,EAAAA,GAAAA,IAAuB6D,EAAIlI,SAC5D,SAACkgB,EAAD,WACE,SAAC,IAAD,CAAmB/e,MAAO+G,EAAIU,OAE9B,SAKJmX,EAAmBxb,EAAAA,GAAAA,IAAAA,WAAH,0EAAGA,CAAH,6CAMhByb,EAAezb,EAAAA,GAAAA,IAAAA,WAAH,sEAAGA,CAAH,0KAEWhK,EAAAA,EAAAA,YACZa,EAAAA,EAAAA,QAGNb,EAAAA,EAAAA,MAOL0lB,EAAS1b,EAAAA,GAAAA,IAAAA,WAAH,gEAAGA,CAAH,mGAQN2b,EAAmB3b,EAAAA,GAAAA,IAAAA,WAAH,0EAAGA,CAAH,yGAWhBkb,EAAMlb,EAAAA,GAAAA,IAAAA,WAAH,6DAAGA,CAAH,+EACa,qBAAEmb,UAGX,qBAAEC,a,6ZChJTQ,EAAgB,SAACngB,GACrB,OAAQA,GACN,IAAK,SAQL,IAAK,YACH,OAAOzF,EAAAA,EAAAA,QAPT,IAAK,aACH,OAAOA,EAAAA,EAAAA,QACT,IAAK,SACH,OAAOA,EAAAA,EAAAA,OACT,IAAK,YACH,OAAOA,EAAAA,EAAAA,WAMA6lB,EAA0B,SAAC9U,GACtC,IAAM7N,EAAS,CACb4iB,UAAW,EACXC,OAAQ,EACRC,WAAY,EACZC,OAAQ,EACRC,UAAW,GAGbnV,EAAK6J,SAAQ,YAAe,IAAbnV,EAAY,EAAZA,OACE,cAAXA,EACFvC,EAAO4iB,YACEK,EAAAA,GAAAA,IAAmB1gB,GAC5BvC,EAAO6iB,SACEjc,EAAAA,GAAAA,IAAuBrE,GAChCvC,EAAO8iB,aACE5X,EAAAA,GAAAA,IAAmB3I,GAC5BvC,EAAO+iB,SACEG,EAAAA,GAAAA,IAAoB3gB,IAC7BvC,EAAOgjB,eAIX,IAAMG,EAAYjjB,OAAO6I,KAAK/I,GAAQoD,QACpC,SAACb,GAAD,OAAYvC,EAAOuC,GAAU,KAG/B,GAAyB,IAArB4gB,EAAU9d,OAAc,CAC1B,IAAOsL,GAAP,OAAkBwS,EAAlB,MACA,OAAOT,EAAc/R,GAoBvB,IAhBA,IAAMyS,EAAWvV,EAAKxI,OAEhBge,EAAS,CACbrjB,EAAO+iB,OAAS,EAAI,CAACxgB,OAAQ,SAAU+gB,IAAsB,IAAhBtjB,EAAO+iB,OAAgBK,GAAY,KAChFpjB,EAAOgjB,UAAY,EAAI,CAACzgB,OAAQ,YAAa+gB,IAAyB,IAAnBtjB,EAAOgjB,UAAmBI,GAAY,KACzFpjB,EAAO8iB,WAAa,EAChB,CAACvgB,OAAQ,aAAc+gB,IAA0B,IAApBtjB,EAAO8iB,WAAoBM,GACxD,KACJpjB,EAAO6iB,OAAS,EAAI,CAACtgB,OAAQ,SAAU+gB,IAAsB,IAAhBtjB,EAAO6iB,OAAgBO,GAAY,KAChFpjB,EAAO4iB,UAAY,EAAI,CAACrgB,OAAQ,YAAa+gB,IAAyB,IAAnBtjB,EAAO4iB,UAAmBQ,GAAY,MACzFhgB,OAAOmgB,SAELC,EAAc,GACdC,EAAU,EACVC,EAAW,EAENznB,EAAK,EAAGA,EAAKonB,EAAOhe,OAAQpJ,IAAM,CACzC,IAAM8E,EAAQsiB,EAAOpnB,GACrB,GAAK8E,EAAL,CAIA,IAAOwB,EAAexB,EAAfwB,OAAQ+gB,EAAOviB,EAAPuiB,IACfI,EAAWD,EACXA,GAAWH,EACX,IAAMK,EAAiBjB,EAAcngB,GAC1B,IAAPtG,EACFunB,GAAW,UAAOG,EAAP,YAAyBL,EAAIM,QAAQ,GAArC,OACF3nB,IAAOonB,EAAOhe,OAAS,EAChCme,GAAW,UAAOG,EAAP,YAAyBD,EAASE,QAAQ,GAA1C,KAEXJ,GAAW,UAAOG,EAAP,YAAyBD,EAASE,QAAQ,GAA1C,aAAiDH,EAAQG,QAAQ,GAAjE,QAIf,MAAM,6BAAN,OAAoCJ,EAApC,M,WCxDIK,EAAa,GAgCNC,EAAc,SAACzoB,GAC1B,MAAuCA,EAAhCmS,QAAAA,OAAP,SAAwBuW,EAAe1oB,EAAf0oB,KAAMC,EAAS3oB,EAAT2oB,MAC9B,EAA0BnkB,EAAAA,SAA8B,MAAxD,eAAOmB,EAAP,KAAcijB,EAAd,KAEM7L,EAAMD,KAAKC,MACjB,UAAiB4L,EAAjB,GACME,GADN,KACsB9L,GADtB,MAGM+L,EAAUJ,EAAKjoB,QAAO,SAACC,EAAOqoB,GAClC,IAAOngB,EAAemgB,EAAfngB,YACDogB,GAAUC,EAAAA,EAAAA,IAAuBrgB,GACjCsgB,EAAcxoB,EAAMsoB,IAAY,GACtC,OAAO,kBAAItoB,GAAX,cAAmBsoB,EAAnB,kBAAiCE,GAAjC,CAA8CH,QAC7C,IAEGI,EAAUtkB,OAAO6I,KAAKob,GAC5B,GAA8CM,EAAAA,EAAAA,GAC5ChR,EAAAA,EACA+Q,GAFKE,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,YAKzBC,EAAWhlB,EAAAA,OAAoC,MAE/CilB,EAAejlB,EAAAA,aAAkB,SAACyV,GAO9B,IAAD,EANHA,GACFuP,EAASrI,QAAU,IAAIuI,gBAAe,SAACjiB,GACrC,IAAMS,EAAQT,EAAQ,GACtBmhB,EAAS1gB,EAAMyhB,YAAYhkB,UAE7B6jB,EAASrI,QAAQyI,QAAQ3P,IAEzB,UAAAuP,EAASrI,eAAT,SAAkB0I,eAEnB,IAEH,IAAKlkB,EACH,OACE,SAACmkB,GAAD,CAAU7L,QAAS8L,IAAuCC,IAAKP,EAA/D,UACE,qBAKN,IAAMQ,EAAYplB,OAAO6I,KAAKob,GAAShH,MAAK,SAACvI,EAAGS,GAAJ,OAAUT,EAAE2Q,cAAclQ,MAElEmQ,EA3EmBC,GA6EjBC,EADgBJ,EAAUliB,QAAO,SAACihB,GAAD,OAAaK,EAAate,SAASie,MACnCvoB,QACrC,SAACC,EAAOsoB,GAAR,OAAoBtoB,EAAQooB,EAAQE,GAAShf,SAC7C,GAEI0T,EAASuM,EAAUjgB,OAASsb,EAAAA,EAAwBkD,EAAa6B,EACjEC,GAAqBC,EAAAA,EAAAA,GACzBN,EAAUpnB,KAAI,SAACmmB,GAAD,aAAa,WAAAwB,EAAAA,EAAAA,GAAoBxB,UAApB,eAA8BznB,OAAQ,OAE7DkpB,EAAUR,EAAUjgB,OAAS,EAC7B0gB,EAtFiBN,IAsFoBK,EAAU/M,EArF5B,KAuFzB,OACE,UAACoM,GAAD,CAAU7L,QAASyM,EAAgBV,IAAKP,EAAxC,WACE,SAACjnB,EAAA,EAAD,CACE4P,QAAS,CAACqM,KAAM,IAChB3d,KAAM,CAACC,UAAW,SAAUyO,eAAgB,UAC5CtO,MAAO,CAACkB,SAAU,OAAQsb,OA7FT0M,IA8FjBzX,OAAQ,CAACC,KAAM,MAAOjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAJzC,mBAQA,SAACkpB,EAAD,CAAcC,SA5FE,KA4FuBjC,MAAOA,EAAOjL,OAAQ+M,EAAU/M,EAAS,IAC/EuM,EAAUjgB,OACTigB,EAAUpnB,KAAI,SAACmmB,GAAa,IAAD,EACnBznB,EAAI,WAAGipB,EAAAA,EAAAA,GAAoBxB,UAAvB,aAAG,EAA8BznB,KACrCmnB,EAAOI,EAAQE,GACf1nB,EAAM6oB,EACN3E,EAAW6D,EAAate,SAASie,GAEvC,OADAmB,EAAU7oB,EAAMgkB,EAAAA,GAAyBE,EAAWkD,EAAK1e,OAASwe,EAAa,IAE7E,SAACqC,EAAD,CACErF,SAAUA,EACVmD,MAAOA,EACPrnB,IAAKA,EAEL0nB,QAASA,EACT8B,uBAAwBvpB,IAAQ+oB,EAAmBlI,IAAI7gB,IACvDmnB,KAAMI,EAAQE,GACdM,SAAUA,EACVC,YAAaA,EACb5jB,MAAOA,GANFqjB,OAWX,SAAC+B,GAAD,CAAoB5Y,QAASA,EAAS0W,cAAeA,QAkBvDgC,EAAkB,SAAC7qB,GACvB,IACEwlB,EASExlB,EATFwlB,SACA8D,EAQEtpB,EARFspB,SACAC,EAOEvpB,EAPFupB,YACAP,EAMEhpB,EANFgpB,QACA8B,EAKE9qB,EALF8qB,oBACApC,EAIE1oB,EAJF0oB,KACAC,EAGE3oB,EAHF2oB,MACArnB,EAEEtB,EAFFsB,IACAqE,EACE3F,EADF2F,MAEIiD,GAAc4hB,EAAAA,EAAAA,GAAoBxB,GAClCzf,GAAsB,OAAXX,QAAW,IAAXA,OAAA,EAAAA,EAAarH,OAAQ,eAChCiI,GAA0B,OAAXZ,QAAW,IAAXA,OAAA,EAAAA,EAAa4B,WAAY,mBAExCvH,EAAUuB,EAAAA,aACd,SAACQ,GACKA,EAAEgmB,iBAAiB,SACrBzB,GAAa/D,GAEb5c,GAAe0gB,EAAS1gB,KAG5B,CAAC4c,EAAU8D,EAAUC,EAAa3gB,IAGpC,OACE,4BACE,SAACqiB,EAAD,CAAwBC,KAAM5pB,EAA9B,UACE,SAACikB,EAAA,EAAD,CACEC,SAAUA,EACVjc,SAAUA,EACVC,aAAcA,EACdvG,QAASA,EACTwiB,aAAcqF,EACdpF,cAAc,SAACyF,EAAD,CAAezC,KAAMA,QAGtClD,EACGkD,EAAK7lB,KAAI,SAACkmB,EAAKnoB,GAAN,OACP,SAACwqB,GAAD,CAEErC,IAAKA,EACLznB,IAAKA,EAAMgkB,EAAAA,EAAwB1kB,EAAK4nB,EACxCG,MAAOA,EACPhjB,MAAOA,GAJFojB,EAAIrhB,QAOb,SAKJyjB,EAAgB3mB,EAAAA,MAAW,YAAoC,IAAlCkkB,EAAiC,EAAjCA,KAC3B/jB,EAASH,EAAAA,SAAc,WAC3B,IAAIgE,EAAkB,EAClBC,EAAc,EACdH,EAAiB,EAgBrB,OAfAogB,EAAKrM,SAAQ,YAAY,EAAV7J,KACR6J,SAAQ,YAAe,IAAbnV,EAAY,EAAZA,OAEE,cAAXA,IAGAqE,EAAAA,GAAAA,IAAuBrE,GACzBsB,IACSqH,EAAAA,GAAAA,IAAmB3I,GAC5BuB,IACSof,EAAAA,GAAAA,IAAoB3gB,IAC7BoB,WAIC,CAACE,gBAAAA,EAAiBC,YAAAA,EAAaH,eAAAA,KACrC,CAACogB,IAEJ,OAAO,SAAC2C,GAAD,UAA6B1mB,OAGzB0mB,EAA0B,SAAC,GAQjC,IAPL7iB,EAOI,EAPJA,gBACAF,EAMI,EANJA,eACAG,EAKI,EALJA,YAMM6iB,EACgB,IAApB9iB,EAAwB,oBAAxB,UAAiDA,EAAjD,qBACI+iB,EACe,IAAnBjjB,EAAuB,kBAAvB,UAA8CA,EAA9C,mBACIkjB,EAA6B,IAAhB/iB,EAAoB,eAApB,UAAwCA,EAAxC,gBAEnB,OACE,UAACjG,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,EAAGzB,WAAY,UAAlD,UACGwH,EAAkB,GACjB,SAAC2O,EAAA,EAAD,CAAStQ,SAAS,SAAC4kB,EAAD,UAAaH,IAA8BnT,UAAU,MAAvE,UACE,SAACzN,EAAA,EAAD,CAAKzD,OAAO,UAAZ,SAAuBuB,MAEvB,KACHF,EAAiB,GAChB,SAAC6O,EAAA,EAAD,CAAStQ,SAAS,SAAC4kB,EAAD,UAAaF,IAA6BpT,UAAU,MAAtE,UACE,SAACzN,EAAA,EAAD,CAAKzD,OAAO,UAAZ,SAAuBqB,MAEvB,KACHG,EAAc,GACb,SAAC0O,EAAA,EAAD,CAAStQ,SAAS,SAAC4kB,EAAD,UAAaD,IAA0BrT,UAAU,MAAnE,UACE,SAACzN,EAAA,EAAD,CAAKzD,OAAO,SAAZ,SAAsBwB,MAEtB,SAKJgjB,EAAahgB,EAAAA,GAAAA,KAAAA,WAAH,mEAAGA,CAAH,yBAIVwf,EAAyBxf,EAAAA,GAAAA,IAAAA,WAAH,+EAAGA,CAAH,gDAMxB,gBAAEyf,EAAF,EAAEA,KAAF,sCAAqCA,EAArC,WAsBEQ,EAA8C,CAClDC,MAAO,UACPC,IAAK,UACLC,KAAM,WAGFC,EAA0D,CAC9DH,MAAO,UACPC,IAAK,UACLC,KAAM,UACNE,aAAc,SAGVC,EAA8C,CAClDC,KAAM,WAGFtB,EAAe,SAAC3qB,GACpB,IAAO4qB,EAA2B5qB,EAA3B4qB,SAAUjC,EAAiB3oB,EAAjB2oB,MAAOjL,EAAU1d,EAAV0d,OACxB,UAAqBiL,EAArB,GAAOuD,EAAP,KAAcC,EAAd,KACMC,EC7UyB,WAC/B,MAAyB5nB,EAAAA,WAAiB6nB,EAAAA,IAAnCC,GAAP,eACMC,EAA8B,cAAnBD,GAAiCE,EAAAA,EAAAA,MAAoBF,EACtE,OAAO9nB,EAAAA,aACL,SAACioB,EAAY7K,GACX,OAAO8K,KAAKC,eAAeC,UAAUC,UAA9B,QAAyCN,SAAAA,GAAa3K,IAAUrM,OAAOkX,KAEhF,CAACF,IDsUoBO,GAEjBC,EAA4BvoB,EAAAA,SAAc,WAU9C,IATA,IAAMwoB,EAAYb,EAAMD,EAClBe,EAAY,IAAInQ,KAAKoP,GACrBgB,EAA8Bd,EAAea,EAAWnB,GAExDqB,EAAgB,GAGlBC,EAAS,IAAItQ,KAAKoQ,GAEfE,EAAOC,UAAYlB,GAAK,CAC7B,IAAMmB,EAAWF,EAAOG,UAClBC,EAAS,IAAI1Q,KAAKwQ,GAAUG,QAAQL,EAAOM,UAAY,GAC7DN,EAAS,IAAItQ,KAAK0Q,GAClBL,EAAc9lB,KAAK,CAACimB,SAAAA,EAAUE,OAAAA,IAGhC,OAAOL,EAActqB,KAAI,YAAyB,IAAvByqB,EAAsB,EAAtBA,SAAUE,EAAY,EAAZA,OAC7Bf,EAAO,IAAI3P,KAAKwQ,GAChBK,EAAgBL,EAAWpB,EAE3B0B,EAAWD,GADCH,EAASF,GAGrB7O,EAAO7N,KAAK6L,IAAI,EAAIkR,EAAgBX,EAAa,KACjD3rB,EAAQuP,KAAKqM,IAAI,IAAM2Q,EAAWZ,EAAa,KAErD,MAAO,CACL9O,MAAOkO,EAAeK,EAAMf,GAC5BhkB,IAAK+kB,EAAKoB,WACVpP,KAAAA,EACA9Y,MAAOtE,EAAQod,QAGlB,CAAC0N,EAAKC,EAAgBF,IAEnB4B,EAA4BtpB,EAAAA,SAAc,WAC9C,IAAMwoB,EAAYb,EAAMD,EAElB6B,EAAc7B,EADHA,EAAQtB,EAEnBoD,EAAcpd,KAAKiI,KAAKmU,EAAYpC,GAAY,EACtD,OAAO,OAAI,IAAIvf,MAAM2iB,IAClBnrB,KAAI,SAACiF,EAAGlH,GACP,IAAMqtB,EAAOF,EAAcntB,EAAKgqB,EAC1B6B,EAAO,IAAI3P,KAAKmR,GAEtB,MAAO,CACL/P,MAFYkO,EAAeK,EAAMT,GAAiBkC,QAAQ,IAAK,IAG/DxmB,IAAK+kB,EAAKoB,WACVpP,MAAQwP,EAAO/B,GAASc,EAAa,QAGxCjlB,QAAO,SAAComB,GAAD,OAAYA,EAAO1P,KAAO,OACnC,CAAC0N,EAAKD,EAAOtB,EAAUwB,IAEpBrP,EAAMD,KAAKC,MACXqR,EAAO,YAASrR,EAAMmP,IAAUC,EAAMD,GAAU,KAAKmC,YAAY,GAA1D,KAEb,OACE,UAACC,EAAD,CAAkBptB,MAAO,CAACwc,OAAO,GAAD,OAAKA,EAAL,OAAhC,WACE,SAAC6Q,EAAD,UACGxB,EAAYlqB,KAAI,SAACsrB,GAAD,OACf,SAACK,EAAD,CAEEttB,MAAO,CACLud,KAAK,GAAD,OAAK0P,EAAO1P,KAAK4P,YAAY,GAA7B,KACJ1oB,MAAM,GAAD,OAAKwoB,EAAOxoB,MAAM0oB,YAAY,GAA9B,MAJT,SAOGF,EAAOxoB,MAtXO,IAuXb,SAACnD,EAAA,EAAD,CAAK1B,KAAM,CAAC0O,eAAgB,UAA5B,SAAwC2e,EAAOjQ,QAC7C,MARCiQ,EAAOzmB,WAYlB,SAAC6mB,EAAD,UACGT,EAAYjrB,KAAI,SAACsrB,GAAD,OACf,SAACM,EAAD,CAA4BvtB,MAAO,CAACud,KAAK,GAAD,OAAK0P,EAAO1P,KAAK4P,YAAY,GAA7B,MAAxC,SACGF,EAAOjQ,OADMiQ,EAAOzmB,WAK3B,UAACgnB,EAAD,YACE,SAACC,EAAD,CAAaztB,MAAO,CAACud,KAAM,EAAGmQ,gBAAiBntB,EAAAA,EAAAA,WAC9CqsB,EAAYjrB,KAAI,SAACsrB,GAAD,OACf,SAACQ,EAAD,CAA8BztB,MAAO,CAACud,KAAK,GAAD,OAAK0P,EAAO1P,KAAK4P,YAAY,GAA7B,OAAxBF,EAAOzmB,QAE1BqV,GAAOmP,GAASnP,GAAOoP,GACtB,iCACE,SAAC0C,GAAD,CAAW3tB,MAAO,CAACud,KAAM2P,GAAzB,kBACA,SAACO,EAAD,CAAaztB,MAAO,CAACud,KAAM2P,EAASQ,gBAAiBntB,EAAAA,EAAAA,QAAgBuc,OAAQ,QAE7E,YAMNsQ,EAAmB7iB,EAAAA,GAAAA,IAAAA,WAAH,yEAAGA,CAAH,0EArZW,IA0ZhBnJ,EAAAA,EAAAA,UACNb,EAAAA,EAAAA,SAGL8sB,EAAgB9iB,EAAAA,GAAAA,IAAAA,WAAH,sEAAGA,CAAH,iMAGWhK,EAAAA,EAAAA,YAAqCA,EAAAA,EAAAA,YAC9CA,EAAAA,EAAAA,YAraM,IA8arB+sB,EAAY/iB,EAAAA,GAAAA,IAAAA,WAAH,kEAAGA,CAAH,qFAGehK,EAAAA,EAAAA,aAIxBgtB,EAAYhjB,EAAAA,GAAAA,IAAAA,WAAH,kEAAGA,CAAH,mFAGehK,EAAAA,EAAAA,aAIxBitB,EAAejjB,EAAAA,GAAAA,IAAAA,WAAH,qEAAGA,CAAH,8FAIYhK,EAAAA,EAAAA,YAAsCA,EAAAA,EAAAA,aAG9DktB,EAAcljB,EAAAA,GAAAA,IAAAA,WAAH,oEAAGA,CAAH,wEACKhK,EAAAA,EAAAA,aAOhBotB,GAAYpjB,EAAAA,GAAAA,IAAAA,WAAH,kEAAGA,CAAH,oLACOhK,EAAAA,EAAAA,QAEXA,EAAAA,EAAAA,OAcL2pB,GAAiB,SAAC,GAUjB,IATLrC,EASI,EATJA,IACAznB,EAQI,EARJA,IACAqnB,EAOI,EAPJA,MACOmG,EAMH,EANJnpB,MAOA,UAAqBgjB,EAArB,GAAOuD,EAAP,KAAcC,EAAd,KACMxmB,EAAQmpB,EAreiB,IAsexBtc,EAAQuW,EAARvW,KAGDuc,EAAUvqB,EAAAA,SAAc,WAU5B,OATyCwqB,EAAAA,EAAAA,GAAqB,CAC5Dxc,KAAAA,EACA0Z,MAAAA,EACAC,IAAAA,EACAxmB,MAAAA,EACAspB,cAzBkB,EA0BlBC,iBAzByB,OA6B1B,CAAC1c,EAAM0Z,EAAOC,EAAKxmB,IAEtB,OAAKojB,EAAIvW,KAAKxI,QAKZ,UAACmlB,GAAD,CAAKjE,KAAM5pB,EAAX,WACE,UAAC8tB,GAAD,YACE,SAAC7nB,EAAA,GAAD,CAAMhG,KAAsB,UAAhBwnB,EAAIsG,QAAsB,QAAU,SAChD,gBAAKnuB,MAAO,CAACyE,MA7fD,KA6fZ,SACmB,UAAhBojB,EAAIsG,SACH,iBAAMnuB,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,UACE,SAAC6tB,EAAA,EAAD,CAAgBztB,KAAMknB,EAAIvc,aAG5B,SAAC,KAAD,CAAM9K,GAAIqnB,EAAI9oB,KAAd,UACE,SAACqvB,EAAA,EAAD,CAAgBztB,KAAMknB,EAAIvc,kBAKlC,SAAC+iB,GAAD,UACGR,EAAQlsB,KAAI,SAAC2sB,GACZ,IAAO/Q,EAAqB+Q,EAArB/Q,KAAM9Y,EAAe6pB,EAAf7pB,MACPoiB,EADsByH,EAARhd,KACExI,OACtB,OACE,SAACylB,GAAD,CAEEC,YAAapI,EAAwBkI,EAAMhd,MAC3Cmd,UAAW5H,EAAW,EACtB7mB,MAAO,CACLud,KAAK,GAAD,OAAKA,EAAL,MACJ9Y,MAAM,GAAD,OAAKA,EAAL,OANT,UASE,SAACiB,EAAA,EAAD,CACEC,SAAS,SAAC+oB,GAAD,CAAiB7G,IAAKA,EAAKyG,MAAOA,IAC3CloB,SAAS,MACToI,gBAAgB,QAChBoP,UAAU,uBAJZ,UAME,SAACtc,EAAA,EAAD,CACE1B,KAAM,CAACC,UAAW,MAAOyO,eAAgB,SAAUxO,WAAY,UAC/DE,MAAO,CAACwc,OAAQ,QAFlB,SAIGqK,EAAW,GAAI,SAAC8H,GAAD,UAAaL,EAAMhd,KAAKxI,SAAuB,UAlB9DwlB,EAAMhd,KAAK,GAAG1C,YAzBtB,MAsDLib,GAAqB,SAAC/qB,GAC1B,IAAOmS,EAA0BnS,EAA1BmS,QAAS0W,EAAiB7oB,EAAjB6oB,cAgChB,OACE,SAACrmB,EAAA,EAAD,CACEstB,WAAYruB,EAAAA,EAAAA,MACZ2Q,QAAS,CAACwB,SAAU,IACpB9S,KAAM,CAACC,UAAW,MAAOyO,eAAgB,UACzCmD,OAAQ,CAACC,KAAM,aAAcjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAJhD,SA9BI0Q,GAEA,UAAC3P,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,EAAGzB,WAAY,UAAlD,WACE,SAACwX,EAAA,EAAD,CAASnG,QAAQ,cAChBwW,EAAgB,mCAAqC,mBAM1D,UAACrmB,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAIzB,WAAY,UAAtD,WACE,yBACG6nB,EACG,kDACA,kCAEN,UAACrmB,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,GAAIzB,WAAY,UAAnD,WACE,SAAC+uB,EAAAhgB,EAAD,CAAc7P,MAAM,SAACqH,EAAA,GAAD,CAAMhG,KAAK,eAAiBG,GAAG,iBAAnD,2BAGA,kCACA,SAACquB,EAAAhgB,EAAD,CAAc7P,MAAM,SAACqH,EAAA,GAAD,CAAMhG,KAAK,oBAAsBG,GAAG,gBAAxD,2CAoBJooB,GAAWre,EAAAA,GAAAA,IAAAA,WAAH,iEAAGA,CAAH,4BACV,gBAAEwS,EAAF,EAAEA,QAAF,wBAA0BA,EAA1B,UAIEkR,GAAM1jB,EAAAA,GAAAA,IAAAA,WAAH,6DAAGA,CAAH,gQAEsBhK,EAAAA,EAAAA,YAInB+mB,IAMR,gBAAE0C,EAAF,EAAEA,KAAF,sCAAqCA,EAArC,UAG4BzpB,EAAAA,EAAAA,YAAsCA,EAAAA,EAAAA,YAI9CA,EAAAA,EAAAA,QAIlB2tB,GAAU3jB,EAAAA,GAAAA,IAAAA,WAAH,iEAAGA,CAAH,oMAtnBoB,KAooB3B8jB,GAAY9jB,EAAAA,GAAAA,IAAAA,WAAH,mEAAGA,CAAH,2CAGH+c,GAQNiH,GAAWhkB,EAAAA,GAAAA,IAAAA,WAAH,kEAAGA,CAAH,kOAEE,qBAAEikB,cAENlH,IAGR,qBAAEmH,UAAyB,qBA/LA,GA+LA,MAA8C,QAWvEE,GAAapkB,EAAAA,GAAAA,IAAAA,WAAH,oEAAGA,CAAH,8FACLhK,EAAAA,EAAAA,MAEMa,EAAAA,EAAAA,WAWXstB,GAAkB,SAAC5vB,GACvB,IAAO+oB,EAAc/oB,EAAd+oB,IAAKyG,EAASxvB,EAATwvB,MACNQ,EAASR,EAAMhd,KAAKoK,MAAM,EAAG,IAC7BqT,EAAYT,EAAMhd,KAAKxI,OAASgmB,EAAOhmB,OAE7C,OACE,UAACxH,EAAA,EAAD,CAAKtB,MAAO,CAACyE,MAAO,SAApB,WACE,SAACnD,EAAA,EAAD,CAAK4P,QAAS,GAAIO,OAAQ,CAACC,KAAM,SAAUjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAA5D,UACE,SAACyuB,GAAD,UAAsBnH,EAAIvc,aAE5B,gBAAKtL,MAAO,CAACwB,UAAW,QAASC,UAAW,QAA5C,SACGqtB,EAAOntB,KAAI,SAACuM,EAAKxO,GAAN,OACV,UAAC4B,EAAA,EAAD,CAEEmQ,OAAQ/R,EAAK,EAAI,CAACgS,KAAM,MAAOjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAAsB,KACtEX,KAAM,CAACC,UAAW,MAAOyO,eAAgB,gBAAiBxO,WAAY,UACtEoR,QAAS,CAACwB,SAAU,EAAGC,WAAY,IAJrC,WAME,UAACrR,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,EAAGzB,WAAY,UAAlD,WACE,SAAC,KAAD,CAAckG,OAAQkI,EAAIlI,OAAQoD,KAAM,IACxB,cAAf8E,EAAIlI,OACH,aAEA,SAAC,KAAD,CAAMxF,GAAE,gBAAW0N,EAAIU,IAAvB,UACE,SAAC,KAAD,UAAOV,EAAIU,GAAG8M,MAAM,EAAG,WAI7B,SAAC,KAAD,UACkB,cAAfxN,EAAIlI,QACH,SAACpB,EAAA,EAAD,CAAkBD,UAAWuJ,EAAIsR,UAAY,OAE7C,SAACyP,EAAA,EAAD,CAAaC,UAAWhhB,EAAIsR,UAAY,IAAM2P,QAASjhB,EAAIqB,QAAU,UAnBpErB,EAAIU,SAyBdmgB,EAAY,GACX,SAACztB,EAAA,EAAD,CAAK4P,QAAS,GAAIO,OAAQ,CAACC,KAAM,MAAOjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAAzD,UACE,UAAC,KAAD,CAAMC,GAAE,UAAKqnB,EAAI9oB,KAAT,QAAR,eAAgCgwB,EAAhC,aAEA,SAKJC,GAAsBzkB,EAAAA,GAAAA,OAAAA,WAAH,6EAAGA,CAAH,0F,4FE9uBZ6kB,EAAU,SAAC/W,EAAiCS,GAAlC,QACnBT,EAAE4S,IAAMnS,EAAEkS,OAASlS,EAAEmS,IAAM5S,EAAE2S,QAMpB8C,EAAuB,SAAwBuB,GAgC1D,IA/BA,IAAO/d,EAA4D+d,EAA5D/d,KAAM0Z,EAAsDqE,EAAtDrE,MAAOC,EAA+CoE,EAA/CpE,IAAKxmB,EAA0C4qB,EAA1C5qB,MAAOspB,EAAmCsB,EAAnCtB,cAAeC,EAAoBqB,EAApBrB,iBACzCsB,EAAcrE,EAAMD,EAGpBkC,GADMtR,KAAKC,MACOmP,IAAUC,EAAMD,GAAUvmB,EAE5C8qB,EAAyBje,EAC5B3P,KAAI,SAACuM,GACJ,IAAMsR,EAAYtR,EAAIsR,UAChBjQ,EAAUrB,EAAIqB,SAAWqM,KAAKC,MAUpC,MAAO,CACLvK,KAAM,CAACpD,GACPsR,UAAAA,EACAjQ,QAAAA,EACAgO,KAbW7N,KAAK6L,IAAI,EAAG7L,KAAKC,OAAQ6P,EAAYwL,GAASsE,EAAe7qB,IAcxEA,MAbeiL,KAAK6L,IACpBwS,EACAre,KAAKqM,IACHrM,KAAKiI,MAAOpI,EAAUiQ,GAAa8P,EAAe7qB,GAClDiL,KAAKiI,MAAOpI,EAAUyb,GAASsE,EAAe7qB,SAYnDmc,MAAK,SAACvI,EAAGS,GAAJ,OAAUA,EAAEyE,KAAOlF,EAAEkF,QAEvBiS,EAAe,GAEdD,EAAQzmB,QAAQ,CACrB,IAAMmX,EAAUsP,EAAQE,QAClBC,EAAOH,EAAQ,GACrB,GAAItP,EACF,GAAIyP,GAAQC,EAAS1P,EAASyP,EAAM1B,EAAkBd,GAAU,CAG9DqC,EAAQE,QACRxP,EAAQ3O,KAAR,kBAAmB2O,EAAQ3O,OAA3B,OAAoCoe,EAAKpe,OACzC2O,EAAQT,UAAY9P,KAAKqM,IAAIkE,EAAQT,UAAWkQ,EAAKlQ,WACrDS,EAAQ1Q,QAAUG,KAAK6L,IAAI0E,EAAQ1Q,QAASmgB,EAAKngB,SAGjD,IAAMpP,EAAQuP,KAAK6L,IACjB0E,EAAQ1C,KAAOyQ,EACf/N,EAAQ1C,KAAO0C,EAAQxb,MACvBirB,EAAKnS,KAAOmS,EAAKjrB,OAKbmrB,EAAUlgB,KAAKqM,IAAIkE,EAAQ1C,KAAMmS,EAAKnS,MAC5C0C,EAAQxb,MAAQtE,EAAQyvB,EACxB3P,EAAQ1C,KAAOqS,EAEfL,EAAQM,QAAQ5P,QAIhBuP,EAAarpB,KAAK8Z,GAKxB,OAAOuP,GAGHG,EAAW,SACf1P,EACAyP,EACA1B,EACAd,GAEA,IAAM4C,EAAe7P,EAAQ1C,KACvBwS,EAAa9P,EAAQ1C,KAAO7N,KAAK6L,IAAI0E,EAAQxb,MAAOupB,GACpDgC,EAAYN,EAAKnS,KACjB0S,EAAUP,EAAKnS,KAAO7N,KAAK6L,IAAImU,EAAKjrB,MAAOupB,GAE3CkC,EAAWxgB,KAAKqM,IAAIkE,EAAQ1C,KAAMmS,EAAKnS,MACvC4S,EAASzgB,KAAK6L,IAClB0E,EAAQ1C,KAAO7N,KAAK6L,IAAI0E,EAAQxb,MAAOupB,GACvC0B,EAAKnS,KAAO7N,KAAK6L,IAAImU,EAAKjrB,MAAOupB,IAKnC,OACEoB,EAAQ,CAACpE,MAAO8E,EAAc7E,IAAK8E,GAAa,CAAC/E,MAAOgF,EAAW/E,IAAKgF,MAEvEC,EAAWhD,GAAWiD,EAASjD,K,oKCrGvBkD,EAAoB,SAACliB,GAChC,IAAM7I,GAAUC,EAAAA,EAAAA,MAChB,GAAoCoG,EAAAA,EAAAA,GAGlC2kB,EAAAA,IAHKC,GAAP,eAIMC,GAAYC,EAAAA,EAAAA,GAAoBtiB,GAEtC,OAAO5K,EAAAA,YAAA,mCACL,WAAOtD,GAAP,8EACOkO,GAAQA,EAAIuiB,oBAAuBF,EAD1C,wDAKQ7tB,GAAYguB,EAAAA,EAAAA,IAAwB,CACxCxiB,IAAAA,EACAlO,MAAAA,EACA8H,uBAAwByoB,EAAUzQ,MAAM6Q,mBAAmBtwB,KAC3DwH,eAAgB0oB,EAAUzQ,MAAM8Q,WAAWvwB,OAT/C,kBAayBiwB,EAA0B,CAAC5tB,UAAAA,IAbpD,OAaUyd,EAbV,QAcI0Q,EAAAA,EAAAA,IAAmB3iB,EAAI3F,aAAL,UAAmB4X,EAAO9c,YAA1B,aAAmB,EAAaitB,0BAA2BjrB,EAAS,CACpFyrB,qBAAqB,EACrBC,SAAU,SAhBhB,mDAmBIC,EAAAA,EAAAA,GAAgB,EAAD,IAnBnB,0DADK,sDAuBL,CAAC3rB,EAASirB,EAA2BC,EAAWriB,M,qQC7B9C+iB,EAAe,CAAC,YAAa,SAAU,UAAW,WAuB3CC,EAGR5tB,EAAAA,MAAW,YAA8B,IAA5BoE,EAA2B,EAA3BA,YAAaiP,EAAc,EAAdA,SACvB5O,GAAOC,EAAAA,EAAAA,IAAcN,GACdypB,EAA4Cxa,EAAlDtW,KAAoB6F,EAA8ByQ,EAA9BzQ,aAAcqC,EAAgBoO,EAAhBpO,aAEnCd,EAAgB,OAAGvB,QAAH,IAAGA,OAAH,EAAGA,EAAc7F,KACjCmI,GAAQC,EAAAA,EAAAA,IAAgBV,EAAMQ,GAE9B6oB,EAAgB9tB,EAAAA,SAAc,WAClC,IAAMgM,EAAQ7H,EACV+H,IAAAA,UACE,CACEtJ,aAAcuB,GAEhB,CAACmI,gBAAgB,IAEnB,GACJ,MAAM,IAAN,OAAWpH,EAAQ,OAAS,YAA5B,YAA2CD,EAA3C,sBAAqE+G,KACpE,CAAC7H,EAAkBe,EAAOD,IAEvB8oB,GAAe1oB,EAAAA,EAAAA,IAAyBjB,EAAa0pB,GAE3D,GAAmD5uB,EAAAA,EAAAA,GAGjD8uB,EAAiC,CACjC5uB,UAAW,CACT6uB,iBAAkB,CAChBJ,aAAAA,EACAtpB,eAAgBH,EAAYrH,KAC5ByH,uBAAwBJ,EAAY4B,aAR1C,eAAOkoB,EAAP,YAAiCnuB,EAAjC,EAAiCA,KAAM4N,EAAvC,EAAuCA,QAajClP,EAAUuB,EAAAA,aAAkB,kBAAMkuB,MAA2B,CAACA,IA4BpE,OACE,UAAC,IAAD,CAAO3xB,UAAU,SAAS+N,QAAS,EAAnC,WACE,SAAC,KAAD,CAAMpN,GAAI6wB,EAAV,SAAyB5pB,IA5BZ,WACf,GAAIwJ,EACF,OAAO,SAAC,KAAD,CAASjR,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAAxB,2BAGT,IAAK8C,EACH,OACE,SAAC,IAAD,CAAYtB,QAASA,EAArB,UACE,SAAC,KAAD,8BAKN,IAAM0vB,EAAoBpuB,EAAKquB,gBAC/B,MAAqC,aAAjCD,EAAkBjuB,YAElB,SAACmuB,EAAD,CACEhb,SAAU8a,EACVJ,aAAcA,KAKb,SAAC,KAAD,CAASrxB,MAAO,CAACM,MAAOC,EAAAA,EAAAA,QAAxB,sCAMJqxB,SAKDD,EAGD,SAAC,GAA8B,IAA7Bhb,EAA4B,EAA5BA,SAAU0a,EAAkB,EAAlBA,aACRnrB,EAAgByQ,EAAhBzQ,aAEP,IAAKA,GAAqE,sBAArDA,EAAa2rB,yBAAyBruB,WACzD,OAAO,iBAAMxD,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,kBAGT,IAAMyK,EAAa9E,EAAa2rB,yBAAyB3tB,QACnD4tB,EAAmB,GAMzB,OALA9mB,EAAWmQ,SAAQ,SAACjP,GAClB,IAAM6lB,EA3GqB,SAAC7lB,GAC9B,OAAQA,EAAUnI,WAChB,KAAK,KACH,MAAO,UACT,KAAKqB,EAAAA,GAAAA,QACH,MAAO,YACT,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,UACH,MAAO,SACT,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,SACH,MAAO,UACT,QACE,OAAO2L,EAAAA,EAAAA,IAAkB7E,EAAUnI,YA0FfiuB,CAAuB9lB,GAC7C4lB,EAAiBC,GAAjB,kBAAuCD,EAAiBC,IAAkB,IAA1E,CAA+E7lB,QAI/E,SAAC,KAAD,WACE,2BACG+kB,EAAatvB,KAAI,SAACqE,GACjB,OAAMA,KAAU8rB,GAId,2BACE,eAAI9xB,MAAO,CAACyE,MAAO,SAAnB,SAA8BuB,KAC9B,wBACc,WAAXA,GAAkC,YAAXA,GACtB,SAAC,KAAD,CACExF,GAAE,UAAK6wB,EAAL,iCACFrxB,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAFjB,SAIGuxB,EAAiB9rB,GAAQ8C,SAG5BgpB,EAAiB9rB,GAAQ8C,WAXtB9C,GAHF,aAyBbsrB,GAAkC9mB,EAAAA,EAAAA,IAAH,ysB,6IC3JxBynB,EAAiC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAiBC,GAAc,YACzEC,OAAUvpB,EAEd,GAAIqpB,EAAc,CAChB,IAAMG,EAAmBH,EAAaI,kBAAkBzrB,QACtD,SAAC0rB,GAAD,MAAkC,cAAtBA,EAAOC,cAErB,GAAIH,EAAkB,CACpB,IAAMI,EAAkBJ,EAAiB,GACzCD,KAAaK,EAAgBC,WAAYD,EAAgBL,UAI7D,OAAgB,IAAZA,GAEA,SAAC,KAAD,kBAASD,GAAT,cACE,SAAC,IAAD,CACEpsB,OAAO,UACP9E,MAAM,uCACNoQ,aACE,qCACU,KACR,cAAGshB,KAAK,oDAAR,0CAEK,IAJP,4EAaH,O,qUCvBIC,EAGR,SAAC,GAA8B,IAA7BlrB,EAA4B,EAA5BA,YAAa0O,EAAe,EAAfA,UAGZyc,GACJ,iBAAK7yB,MAAO,CAACyE,MAAO,KAApB,WACE,6GACA,0HAIA,kHAIJ,OACE,UAAC,IAAD,YACE,4BACE,2BACE,eAAIzE,MAAO,CAACyE,MAAO,WACnB,2CACA,eAAIzE,MAAO,CAACyE,MAAO,OAAnB,uBACA,eAAIzE,MAAO,CAACyE,MAAO,OAAnB,wBACA,eAAIzE,MAAO,CAACyE,MAAO,OAAnB,UACE,UAAC,IAAD,CAAK7E,KAAM,CAAC2B,IAAK,EAAGzB,WAAY,OAAhC,uBAEE,SAAC,IAAD,CAASsG,SAAS,MAAMT,QAxBnB,8EAwBL,UACE,SAAC,KAAD,CAAMtF,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,kBAI/B,eAAIP,MAAO,CAACyE,MAAO,KAAnB,UACE,UAAC,IAAD,CAAK7E,KAAM,CAAC2B,IAAK,EAAGzB,WAAY,OAAhC,sBAEE,SAAC,IAAD,CAASsG,SAAS,MAAMT,QA/BpB,wDA+BJ,UACE,SAAC,KAAD,CAAMtF,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,kBAI/B,eAAIP,MAAO,CAACyE,MAAO,OAAnB,UACE,UAAC,IAAD,CAAK7E,KAAM,CAAC2B,IAAK,EAAGzB,WAAY,OAAhC,2BAEE,SAAC,IAAD,CAASsG,SAAS,MAAMT,QAASktB,EAAjC,UACE,SAAC,KAAD,CAAMxyB,KAAK,OAAOC,MAAOC,EAAAA,EAAAA,kBAI/B,eAAIP,MAAO,CAACyE,MAAO,YAGvB,2BACG2R,EAAUzU,KAAI,SAACgV,GAAD,OACb,SAACmc,EAAD,CAAaprB,YAAaA,EAAaiP,SAAUA,GAAeA,EAAStW,eAOtE0yB,EAAe,SAAC/sB,EAA2BgtB,GACtD,GAAIhtB,IAAW+N,EAAAA,GAAAA,SAAsD,IAAzBif,EAC1C,OAAO,KACF,GAAIhtB,IAAW+N,EAAAA,GAAAA,SAAsD,IAAzBif,EACjD,OAAO,KAGT,IAAMC,EAAS,GAaf,OAZIjtB,IAAW+N,EAAAA,GAAAA,SAAsD,IAAzBif,EAC1CC,EAAO9sB,KACL,0HAEOH,IAAW+N,EAAAA,GAAAA,SAA6Bif,EAAuB,GACxEC,EAAO9sB,KAAK,kFAGV6sB,EAAuB,GACzBC,EAAO9sB,KAAK,2CAIZ,SAAC,IAAD,CACEqI,gBAAgB,QAChB0kB,iBAAiB,6BACjB9sB,SAAS,QACTT,SACE,UAAC,IAAD,CAAK/F,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAI2P,QAAS,GAAnD,WACE,sEACA,sCACA,wBACG+hB,EAAOtxB,KAAI,SAACoI,EAAOopB,GAAR,OACV,wBAAiBppB,GAARopB,WAVnB,UAgBE,SAAC,IAAD,CAAKC,MAAI,EAAC3pB,aAAW,EAAC1D,OAAO,SAA7B,sBAOA+sB,EAGD,SAACh0B,GACJ,IAAO4I,EAAyB5I,EAAzB4I,YAAaiP,EAAY7X,EAAZ6X,SACd5O,GAAOC,EAAAA,EAAAA,IAAcN,GACrBc,GAAQC,EAAAA,EAAAA,IAAgBV,EAAM4O,EAASpO,cAG3ClI,EAMEsW,EANFtW,KACA2U,EAKE2B,EALF3B,aACA8B,EAIEH,EAJFG,kBACAuc,EAGE1c,EAHF0c,YACA9qB,EAEEoO,EAFFpO,aACA2K,EACEyD,EADFzD,cAEKlN,EAAqDkN,EAArDlN,OAAQqN,EAA6CH,EAA7CG,MAAqB2f,EAAwB9f,EAAtCogB,aAEhBnf,EAAad,EAAMvK,OAAS,EAAIuK,EAAM,GAAK,KAEjD,OACE,2BACE,yBACE,UAAC,IAAD,CAAKzT,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,SAAC,IAAD,CAAgBmG,YAAaA,EAAaiP,SAAUA,IACnDoc,EAAa/sB,EAAQgtB,SAG1B,yBACE,UAAC,IAAD,CAAKpzB,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,iBAAMvB,MAAO,CAACmI,WAAY,KAA1B,UACE,SAAC,KAAD,CAAM3H,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,qBAA4BrH,IAA9D,SAAwEA,OAE1E,SAAC,IAAD,CACE8I,UAAQ,EACRC,KAAK,QACLb,aAAcA,EACdc,oBAAqB3B,EACrBc,MAAOA,UAIb,wBACGwM,GACC,SAAC,IAAD,CAAS5O,SAAS,SAAST,QAASqP,EAApC,UACE,2BAAOI,EAAAA,EAAAA,GAAgBJ,EAAc8B,GAAqB,YAG5D,iBAAM9W,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,qBAGJ,wBACG8yB,EAAYnvB,QAAQ4E,QAAU9C,IAAW+N,EAAAA,GAAAA,SACxC,SAAC,IAAD,CACEpP,UAAW0uB,EAAYnvB,QAAQ,GAAGS,UAClC4uB,SAAUzc,EACV0c,WAAY,CAACC,aAAa,EAAOC,cAAc,MAGjD,iBAAM1zB,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,qBAGJ,wBACG4T,GACC,SAAC,KAAD,CAASpE,KAAMoE,EAAYnE,gBAAiBW,EAAAA,GAAAA,YAE5C,iBAAM3Q,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAArB,qBAGJ,yBACE,SAAC,KAAD,CAAqBuR,iBAAkBoB,OAEzC,wBACGyD,EAASzQ,cACR,SAAC,IAAD,CAAyByQ,SAAUA,EAAUjP,YAAaA,KAE1D,gBAAK1H,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAApB,qBAGJ,wBACGoW,EAASzQ,cACR,SAAC,IAAD,CACEP,SACE,UAAC,KAAD,YACE,SAAC,IAAD,CACEhF,KAAK,4BACL3B,KAAK,eACLgT,OAAO,SACPxR,IAAImI,EAAAA,EAAAA,IACFjB,EAD0B,WAEtBc,EAAQ,OAAS,YAFK,YAEUD,EAFV,mBAK9B,SAAC,IAAD,CACE5H,KAAK,+BACL3B,KAAK,aACLgT,OAAO,SACPxR,IAAImI,EAAAA,EAAAA,IACFjB,EAD0B,WAEtBc,EAAQ,OAAS,YAFK,YAEUD,EAFV,qBAOlCnC,SAAS,cAvBX,UAyBE,SAAC,KAAD,CAAQpH,MAAM,SAAC,KAAD,CAAMqB,KAAK,oBAEzB,SAvFCA,K,+bC9HAszB,EAIR,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,eAAgB1H,EAAqB,EAArBA,OAAQprB,EAAa,EAAbA,QAC7B,EAAsCwC,EAAAA,SAAe4oB,GAArD,eAAO2H,EAAP,KAAoBC,EAApB,KACA,EAAgCxwB,EAAAA,UAAe,GAA/C,eAAOywB,EAAP,KAAiBC,EAAjB,KACA,GAAqBtoB,EAAAA,EAAAA,GACnBuoB,GADKC,GAAP,eAIMC,EAAM,mCAAG,+FACbH,GAAY,GADC,SAEQE,EAAW,CAC9BxxB,UAAW,CAACkxB,eAAAA,EAAgB1H,OAAQ2H,KAHzB,gBAK4B,YAAjC,QAHDxwB,EAFM,EAENA,YAGC,IAAJA,OAAA,EAAAA,EAAM+wB,gBAAgB5wB,YACxBiK,EAAAA,EAAAA,KAAmB,CAACC,QAAS,uBAAwB3H,OAAQ,YACxD,OAAI1C,QAAJ,IAAIA,GAAAA,EAAM+wB,kBACTrqB,EAAQ1G,EAAK+wB,gBACnB3mB,EAAAA,EAAAA,KAAmB,CACjB1H,OAAQ,SACR2H,SACE,UAACC,EAAA,EAAD,CAAO9N,UAAU,MAAM+N,QAAS,EAAhC,WACE,0DACA,SAACymB,EAAA,EAAD,CACE/zB,MAAOC,EAAAA,EAAAA,MACP8P,UAAU,SACVtO,QAAS,YACPiI,EAAAA,EAAAA,GAAgB,CACd/I,MAAO,eACPgJ,KACuB,gBAArBF,EAAMvG,YACJ,SAAC0G,EAAA,GAAD,CAAiBH,MAAOA,IAExB,sBAVV,8BAqBRjJ,IAnCa,2CAAH,qDAsCZ,OACE,UAACC,EAAA,GAAD,CACEC,QAAQ,EACRF,QAASA,EACTd,MAAO,CACLyE,MAAO,QAETxD,MAAK,eAAU2yB,EAAeU,WAAzB,WANP,WAQE,SAACvzB,EAAA,GAAD,WACE,SAAC,KAAD,CACEyD,MAAOqvB,EACPtf,SAAU,SAACzQ,GAAD,OAAOgwB,EAAehwB,EAAEkO,OAAOxN,QACzCxE,MAAO,CAACyE,MAAO,aAGnB,UAAC1D,EAAA,GAAD,YACE,SAACe,EAAA,GAAD,CAAQC,QAASjB,EAAjB,qBACA,SAACgB,EAAA,GAAD,CAAQiE,OAAO,UAAUhE,QAASoyB,EAAQ7nB,SAAUynB,EAApD,qCAQFE,GAAsBzpB,EAAAA,EAAAA,IAAH,+cAmBrBkC,EAAAA,G,WCvFS6nB,EAAyB,SAACC,GAKrC,OAJKA,IACHA,EAAqB,KAEvBA,EAAqB9kB,KAAK6L,IAAI,GAAIiZ,IACT,IAAMA,EAAqB,GAC5C,IAAN,OAAWA,EAAX,QAEyB,OAAvBA,EACI,UAEJA,EAAqB,MAAQA,EAAqB,KAC9C,IAAN,OAAWA,EAAqB,GAAhC,QAEyB,QAAvBA,EACI,SAEJA,EAAqB,OAASA,EAAqB,MAC/C,IAAN,OAAWA,EAAqB,KAAhC,UAEI,IAAN,OAAWA,EAAqB,MAAhC,UAGWC,EAKR,SAAC,GAAuD,IAAtD5d,EAAqD,EAArDA,OAAQnP,EAA6C,EAA7CA,YAAawqB,EAAgC,EAAhCA,aAAcwC,EAAkB,EAAlBA,aAEtCr0B,EAIEwW,EAJFxW,KADF,EAKIwW,EAHFhE,YAAc7M,EAFhB,EAEgBA,OAAQqN,EAFxB,EAEwBA,MACtBshB,EAEE9d,EAFF8d,QACAC,EACE/d,EADF+d,SAGF,EAA4CtxB,EAAAA,UAAe,GAA3D,eAAOuxB,EAAP,KAAwBC,EAAxB,KACMlB,EAAiB,CACrBU,WAAYzd,EAAOxW,KACnBwH,eAAgBH,EAAYrH,KAC5ByH,uBAAwBJ,EAAY4B,UAEhCvB,GAAOC,EAAAA,EAAAA,IAAcN,GACrBqtB,EAAgB,OAAGhtB,QAAH,IAAGA,OAAH,EAAGA,EAAM6oB,WAAWoE,UAEpC7gB,EAAad,EAAMvK,OAASuK,EAAM,GAAK,KACvC4hB,GAAqB,OAAPN,QAAO,IAAPA,OAAA,EAAAA,EAAS7rB,SAAU,EAEjCosB,EAAc5xB,EAAAA,SAClB,kBAAM,IAAIgc,KAAKqV,GAAW,IAAIhzB,KAAI,SAACqQ,GAAD,OAAYA,EAAOzJ,mBACrD,CAACosB,IAGGQ,EAAe7xB,EAAAA,SAAc,WACjC,OAAQyxB,GAAoB,IAAIzqB,MAC9B,SAAC8qB,GAAD,OAAoBA,EAAc5sB,OAAS0sB,EAAYhU,IAAIkU,EAAc/0B,WAE1E,CAAC00B,EAAkBG,IAEhBG,EAAqB/xB,EAAAA,SAAc,WACvC,OAAI6xB,EACKF,EAAc,EAAI,mBAAqB,WAEzCA,EAAc,EAAI,OAAS,QACjC,CAACE,EAAcF,IAEZ/I,EACJrV,EAAOhE,YAAYkC,kBACgC,eAAnD8B,EAAOhE,YAAYkC,iBAAiBvR,YACpCqT,EAAOhE,YAAYkC,iBAAiBugB,WAEtC,OACE,iCACE,SAACC,EAAA,EAAD,CACEt0B,OACE,UAACK,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUyB,IAAK,IAAzD,WACE,SAAC,KAAD,UAAUlB,KACV,SAACm1B,EAAA,EAAD,CAAc9tB,YAAaA,EAAamP,OAAQA,OAGpD7X,KAAK,UACLqY,MACE,iCACE,UAAC7N,EAAA,EAAD,CAAKxK,KAAK,UAAV,wBACY,SAACqW,EAAA,EAAD,CAAgB3N,YAAaA,OAExCmP,EAAO4e,UAAYvD,GAAgBlsB,IAAW+N,EAAAA,GAAAA,SAC7C,UAACvK,EAAA,EAAD,CAAKxK,KAAK,QAAV,yBACa,SAAC4F,EAAA,EAAD,CAAkBD,UAAWkS,EAAO4e,SAAS9wB,eAExD,QAGRxE,OACE,SAACmB,EAAA,EAAD,CAAKpB,OAAQ,CAACE,IAAK,GAAnB,UACE,SAACs1B,EAAA,GAAD,CAAuBhB,aAAcA,SAI3C,SAACiB,EAAA,GAAD,WACE,6BACG9e,EAAOxF,aACN,2BACE,yCACA,wBAAKwF,EAAOxF,iBAEZ,MACJ,2BACE,yCACA,wBACG8C,GACC,+BACE,UAAC7S,EAAA,EAAD,CACE1B,KAAM,CAACC,UAAW,MAAO0B,IAAK,EAAGzB,WAAY,UAC7CE,MAAO,CAAC41B,UAAW,QAFrB,WAIE,SAAChxB,EAAA,EAAD,CAAkBD,UAAWwP,EAAWxP,aACxC,SAAC,KAAD,CAASoL,KAAMoE,EAAYnE,gBAAiBW,EAAAA,GAAAA,cAIhD,4BAILkG,EAAO8d,SAAW9d,EAAO8d,QAAQ7rB,QAChC,2BACE,wBAAKusB,KACL,yBACE,SAAC1nB,EAAA,EAAD,CAAO9N,UAAU,SAAS+N,QAAS,EAAnC,SACGiJ,EAAO8d,QAAQhzB,KAAI,SAACqQ,GAAD,OAClBA,EAAOzJ,cACL,SAACW,EAAA,EAAD,CAEEX,aAAcyJ,EAAOzJ,aACrBc,oBAAqB3B,EACrBc,SAAUT,KAAQU,EAAAA,EAAAA,IAAgBV,EAAMiK,EAAOzJ,gBAH1CyJ,EAAOzJ,cAKZ,eAKV,MACJ,2BACE,oCACA,0BACGssB,GACC,SAAClB,EAAD,CACEC,eAAgBA,EAChB1H,OAAQA,GAAkB,GAC1BprB,QAAS,kBAAMg0B,GAAiB,MAEhC,MACJ,UAACxzB,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,MAAOC,WAAY,UAA1C,WACE,SAACwB,EAAA,EAAD,CAAKtB,MAAO,CAACmB,WAAYC,EAAAA,EAAAA,UAAsBsU,YAAa,IAA5D,SACGwW,GAAkB,UAErB,SAACpqB,EAAA,GAAD,CAAQC,QAAS,kBAAM+yB,GAAiB,IAAxC,4BAIN,2BACE,uCACA,wBAAKP,EAAuB1d,EAAO2d,yBAEpCI,EAAS5rB,WAAa4rB,EAAS5rB,UAAUF,QACxC,2BACE,8CACA,yBACE,SAACxH,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,SACGqzB,EAAS5rB,UAAUrH,KAAI,SAAC6E,GAAD,OACtB,SAAC3H,EAAA,EAAD,CAAoCE,KAAMyH,EAAIzH,KAAMC,KAAK,SAAzCwH,EAAIzH,KAAKY,KAAK,gBAKpC,e,6IClMDk2B,EAA8B,SAAC,GAAiC,IAAhC3D,EAA+B,EAA/BA,aAAiBC,GAAc,YACtEC,OAAUvpB,EAEd,GAAIqpB,EAAc,CAChB,IAAM4D,EAAgB5D,EAAaI,kBAAkBzrB,QACnD,SAAC0rB,GAAD,MAAkC,WAAtBA,EAAOC,cAErB,GAAIsD,EAAe,CACjB,IAAMC,EAAeD,EAAc,GACnC1D,KAAa2D,EAAarD,WAAYqD,EAAa3D,UAIvD,OAAgB,IAAZA,GAEA,SAAC,KAAD,kBAASD,GAAT,cACE,SAAC,IAAD,CACEpsB,OAAO,UACP9E,MAAM,oCACNoQ,aACE,qCACU,KACR,cACEshB,KAAK,oDACL3gB,OAAO,SACPC,IAAI,aAHN,0CAMK,IARP,4EAiBH,O,4MC1CI+jB,EAAuB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClC,SAAC,IAAD,CACE/kB,QAAS,CAACwB,SAAU,EAAGC,WAAY,IACnClB,OAAQ,CAACC,KAAM,QAASjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aACzCP,MAAO,CAACmV,WAAY,SAAU6B,aAAc,WAAYvW,SAAU,UAHpE,SAKGw1B,KAIQC,EAAoB,SAAC,GAAD,IAAED,EAAF,EAAEA,SAAF,OAC/B,SAAC,IAAD,CACE/kB,QAAS,CAACyB,WAAY,GAAID,SAAU,IACpC9S,KAAM,CAACC,UAAW,SAAUyO,eAAgB,cAC5CtO,MAAO,CAACM,MAAOC,EAAAA,EAAAA,QAAgBE,SAAU,UACzCgR,OAAQ,CAACC,KAAM,QAASjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAJ3C,SAMG01B,KAIQE,EAAY5rB,EAAAA,GAAAA,IAAAA,WAAH,uEAAGA,CAAH,gCAST6rB,EAAQ7rB,EAAAA,GAAAA,IAAAA,OAA6B,gBAAE8rB,EAAF,EAAEA,aAAF,MAAqB,CACrEr2B,MAAO,CACLwc,OAAO,GAAD,OAAK6Z,EAAL,WAFQ,8EAAG9rB,CAAH,mCAWL0jB,EAAM1jB,EAAAA,GAAAA,IAAAA,OAA2B,gBAAEwS,EAAF,EAAEA,QAASuZ,EAAX,EAAWA,OAAX,MAAwB,CACpEt2B,MAAO,CACLwc,OAAO,GAAD,OAAKO,EAAL,MACNwZ,UAAU,cAAD,OAAgBD,EAAhB,YAHG,4EAAG/rB,CAAH,8D,sDC7CT,IAAM8e,EAAyB,SAACmN,GACrC,IAAMC,EAAU,IAAInX,IACdoX,EAAa,IAAIpX,IAQvB,OAPAkX,EAAUrb,SAAQ,SAAC9S,GACbouB,EAAQvV,IAAI7Y,GACdquB,EAAWC,IAAItuB,GAEfouB,EAAQE,IAAItuB,MAGTquB,I,+GCHHE,EAAuB,SAACC,GAAD,OAAsB1sB,MAAM2sB,QAAQD,GAAUA,EAAS,IAOvE3O,EAAwB,SAAC6O,EAAsB9O,GAC1D,IAEM+O,EATuB,SAACC,EAAkBzwB,GAAnB,gBAAsCywB,EAAtC,kBAAwDzwB,GASzD0wB,CAFT5zB,EAAAA,WAAiB6zB,EAAAA,GAA7BF,SAE+CF,GACtD,GAA0CK,EAAAA,EAAAA,GACxCJ,EACAJ,GAFF,eAAOS,EAAP,KAAsBC,EAAtB,KAKMlP,EAAW9kB,EAAAA,aACf,SAACoE,GACC,IAAMlB,GAAMoC,EAAAA,EAAAA,IAAyBlB,GACrC4vB,GAAiB,SAACrX,GAChB,IAAMsX,EAAoB,IAAIjY,IAAIW,GAAW,IAM7C,OALIsX,EAAkBrW,IAAI1a,GACxB+wB,EAAkBC,OAAOhxB,GAEzB+wB,EAAkBZ,IAAInwB,GAEjB2D,MAAMC,KAAKmtB,QAGtB,CAACD,IAGGjP,EAAc/kB,EAAAA,aAClB,SAACm0B,GACCH,GAAiB,SAACrX,GAChB,IAAMsX,EAAoB,IAAIjY,IAAIW,GAAW,IAI7C,OAHAgI,EAAQ9M,SAAQ,SAAC3U,GACfixB,EAASF,EAAkBC,OAAOhxB,GAAO+wB,EAAkBZ,IAAInwB,MAE1D2D,MAAMC,KAAKmtB,QAGtB,CAACtP,EAASqP,IAGNnP,EAAe7kB,EAAAA,SAAc,WACjC,IAAMo0B,EAAe,IAAIpY,IAAI+X,GAC7B,OAAOpP,EAAQphB,QAAO,SAACL,GAAD,OAAUkxB,EAAaxW,IAAI1a,QAChD,CAACyhB,EAASoP,IAEb,OAAO/zB,EAAAA,SACL,iBAAO,CACL6kB,aAAAA,EACAC,SAAAA,EACAC,YAAAA,KAEF,CAACF,EAAcC,EAAUC,M,mVCvChBsP,EAAU,SAAC74B,GACtB,IAAO+oB,EAAoB/oB,EAApB+oB,IAAKngB,EAAe5I,EAAf4I,YACNqZ,EAAU8G,EAAIvW,KAAKxI,OAAS+e,EAAIvW,KAAK,GAAK,KACzCsmB,GAAgCpiB,EAAAA,EAAAA,IAA0B9N,EAAY4B,UAAtEsuB,6BACP,GAAwCp1B,EAAAA,EAAAA,GAGtCq1B,GAHF,eAAOC,EAAP,KAA+Bz0B,EAA/B,KAA+BA,KAKzB6K,EAA8C,SAApC,OAAJ7K,QAAI,IAAJA,OAAA,EAAAA,EAAM2L,mBAAmBxL,YAAzB,OAAgDH,QAAhD,IAAgDA,OAAhD,EAAgDA,EAAM2L,mBAAqB,KAEjF+oB,EAAkBz0B,EAAAA,aAAkB,WACxC,OAAIyd,QAAJ,IAAIA,GAAAA,EAASnS,IACXkpB,EAAsB,CAACp1B,UAAW,CAACyE,MAAO4Z,EAAQnS,QAEnD,CAACmS,EAAS+W,IAEPE,GAAW5H,EAAAA,EAAAA,GAAkBliB,GAE7B+pB,GACJ,SAACryB,EAAA,GAAD,CACE5G,KAAK,SACL2B,KAAK,wBACLoB,QAAS,kBAAMi2B,EAAS,CAACE,KAAM,SAC/B5rB,UAAWsrB,EAA6B/xB,UAAYqI,KAAQiqB,EAAAA,EAAAA,IAAejqB,KAIzEkqB,GACJ,SAACxyB,EAAA,GAAD,CACE5G,KAAK,eACL2B,KAAK,qCACLoB,QAAS,kBAAMi2B,EAAS,CAACE,KAAM,kBAC/B5rB,UAAWsrB,EAA6B/xB,UAAYqI,KAAQmqB,EAAAA,EAAAA,IAAkBnqB,KAIlF,OACE,SAACxI,EAAA,EAAD,CACE4yB,SAAU,kBAAMP,KAChBpyB,SACE,UAACC,EAAA,GAAD,YACE,SAACqY,EAAA,EAAD,CACEzd,IAAI4H,EAAAA,EAAAA,IAAsB,CACxBC,SAAUX,EAAYrH,KACtBiI,aAAcZ,EAAY4B,SAC1Bf,aAAcsf,EAAIxnB,KAClBmI,MAAOqf,EAAIrf,QAEbxJ,KAAK,MACL2B,KAAK,cAEP,SAACsd,EAAA,EAAD,CACEzd,IAAI4H,EAAAA,EAAAA,IAAsB,CACxBC,SAAUX,EAAYrH,KACtBiI,aAAcZ,EAAY4B,SAC1Bf,aAAcsf,EAAIxnB,KAClBmI,MAAOqf,EAAIrf,MACXzJ,KAAM,UAERC,KAAK,YACL2B,KAAK,yBAENi3B,EAA6B/xB,QAC5BoyB,GAEA,SAAChiB,EAAA,EAAD,CAAStQ,QAASiyB,EAA6BpjB,eAAgBzU,QAAQ,QAAvE,SACGk4B,IAGJL,EAA6B/xB,QAC5BuyB,GAEA,SAACniB,EAAA,EAAD,CAAStQ,QAASiyB,EAA6BpjB,eAAgBzU,QAAQ,QAAvE,SACGq4B,OAKThyB,SAAS,cAzCX,UA2CE,SAACtE,EAAA,GAAD,CAAQ9C,MAAM,SAACqH,EAAA,GAAD,CAAMhG,KAAK,qBAKzBw3B,GAAyBrtB,EAAAA,EAAAA,IAAH,kMAUxB+tB,EAAAA,I,gGClGEC,EAAmB,4BAUZC,EAAoB,SAAC35B,GAChC,IAAOuB,EAA2CvB,EAA3CuB,KAAMmI,EAAqC1J,EAArC0J,MAAOd,EAA8B5I,EAA9B4I,YAAasjB,EAAiBlsB,EAAjBksB,MAAOxO,EAAU1d,EAAV0d,OAExC,GAAgCha,EAAAA,EAAAA,GAC9Bk2B,EACA,CACEh2B,UAAW,CACTi2B,UAAUC,EAAAA,EAAAA,IAAsBlxB,EAAarH,MAJnD,eAAOw4B,EAAP,KAAiB51B,EAAjB,MASAC,EAAAA,EAAAA,IAAmB21B,IACnB11B,EAAAA,EAAAA,IAA0BF,EAAaG,EAAAA,IAEvC,IAAOC,EAAQJ,EAARI,KAEP,EAA6BC,EAAAA,SAAc,WACzC,GAAyC,cAAjC,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMy1B,gBAAgBt1B,YAA2B,CACnD,MAA6BH,EAAKy1B,gBAClC,MAAO,CAAC1iB,UADR,EAAOA,UACYC,QADnB,EAAkBA,SAGpB,MAAO,CAACD,UAAW,GAAIC,QAAS,MAC/B,CAAChT,IANG+S,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,QAQZ0iB,EAAaz1B,EAAAA,SAAc,WAC/B,GAAyC,cAAjC,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMy1B,gBAAgBt1B,YAA2B,CACnD,IAAM8N,EAAOjO,EAAKy1B,gBAAgBxnB,KAClC,GAAIA,EAAKxI,OACP,OAAO,OAAIwI,GAGf,MAAO,KACN,CAACjO,IAEJ,OACE,SAAC,KAAD,CAAK0Z,QAASP,EAAQ8Z,OAAQtL,EAA9B,UACE,UAACgO,EAAD,CAASvnB,OAAQ,CAACC,KAAM,SAAUjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAAnD,WACE,UAAC,KAAD,YACE,gBAAKP,MAAO,CAACC,SAAU,OAAQkV,WAAY,SAAUhN,WAAY,KAAjE,UACE,SAAC,KAAD,CAAM3H,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,gBAAuBrH,IAAzD,UACE,SAAC+tB,EAAA,EAAD,CAAgBztB,KAAMN,SAG1B,SAAC,KAAD,UACwC,cAAjC,OAAJgD,QAAI,IAAJA,OAAA,EAAAA,EAAMy1B,gBAAgBt1B,YACnBH,EAAKy1B,gBAAgBznB,YACrB,SAGR,SAAC,KAAD,UACG+E,EAAUtN,QAAUuN,EAAQvN,QAC3B,SAACxH,EAAA,EAAD,CAAK1B,KAAM,CAACC,UAAW,SAAUC,WAAY,aAAcyB,IAAK,GAAhE,UACE,SAAC03B,EAAD,WACE,SAAC9iB,EAAA,EAAD,CACEC,UAAWA,EACXC,QAASA,EACT3O,YAAaA,SAMnB,SAAC,KAAD,CAAezE,YAAaA,OAGhC,SAAC,KAAD,UACG81B,EAAWjwB,QACV,SAACmF,EAAA,EAAD,CACEC,IAAK6qB,EAAW,GAChB3qB,YAAY,EACZD,WAAS,EACTE,aAAa,EACbhO,KAAMA,KAGR,SAAC,KAAD,CAAe4C,YAAaA,OAGhC,SAAC,KAAD,UACG81B,EAAWjwB,QACV,SAACxH,EAAA,EAAD,CAAK4P,QAAS,CAAC9Q,IAAK,GAApB,UACE,SAACmlB,EAAA,GAAD,CAAkBja,QAASjL,EAAMiR,MAAM,OAAIynB,GAAYG,UAAWrT,MAAI,OAGxE,SAAC,KAAD,CAAe5iB,YAAaA,OAGhC,SAAC,KAAD,WACE,SAAC3B,EAAA,EAAD,CAAK1B,KAAM,CAAC0O,eAAgB,YAAatO,MAAO,CAAC41B,UAAW,QAA5D,UACE,SAAC+B,EAAD,CAAS9P,IAAK,CAACrf,MAAAA,EAAOnI,KAAAA,EAAMiR,KAAMynB,GAAarxB,YAAaA,cAQ3DyxB,EAAuB,WAClC,OACE,UAAC73B,EAAA,EAAD,CACEmQ,OAAQ,CAACC,KAAM,aAAcjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAC9CP,MAAO,CACLD,QAAS,OACTq5B,oBAAqBZ,EACrBhc,OAAQ,OACRtb,SAAU,OACVZ,MAAOC,EAAAA,EAAAA,SAPX,WAUE,SAAC,KAAD,oBACA,SAAC,KAAD,iCACA,SAAC,KAAD,0BACA,SAAC,KAAD,2BACA,SAAC,KAAD,QAKAy4B,GAAUzuB,EAAAA,EAAAA,IAAOjJ,EAAAA,GAAV,6EAAGiJ,CAAH,wDAEciuB,GAIrBS,EAA6B1uB,EAAAA,GAAAA,IAAAA,WAAH,qFAAGA,CAAH,oDAQ1BmuB,GAAmBluB,EAAAA,EAAAA,IAAH,+eAwBlB6H,EAAAA,GACAgnB,EAAAA,EACAC,EAAAA,I,uaCzJEd,EAAmB,gCASZe,EAAyB,SAACz6B,GACrC,IAAOuB,EAAoCvB,EAApCuB,KAAMqH,EAA8B5I,EAA9B4I,YAAasjB,EAAiBlsB,EAAjBksB,MAAOxO,EAAU1d,EAAV0d,OAE3BzU,GAAOC,EAAAA,EAAAA,IAAcN,GAE3B,GAAqClF,EAAAA,EAAAA,GAGnCg3B,EAAuB,CACvB92B,UAAW,CACTi2B,SAAU,CACR9wB,eAAgBH,EAAYrH,KAC5ByH,uBAAwBJ,EAAY4B,SACpC6nB,aAAc9wB,IAGlBsC,6BAA6B,IAX/B,eAAO82B,EAAP,KAAsBx2B,EAAtB,MAcAC,EAAAA,EAAAA,IAAmBu2B,IACnBt2B,EAAAA,EAAAA,IAA0BF,EAAaG,EAAAA,IAEvC,IAAOC,EAAQJ,EAARI,KAEDq2B,EAAep2B,EAAAA,SAAc,WACjC,MAAyC,cAAjC,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMquB,gBAAgBluB,YACjB,KAGFH,EAAKquB,kBACX,CAACruB,IAEEmF,KAAWkxB,KAAgBjxB,EAAAA,EAAAA,IAAgBV,EAAM2xB,EAAanxB,eAE9DoxB,EAAaD,GACftkB,EAAAA,EAAAA,GAAgBskB,EAAa1kB,aAAc0kB,EAAa5iB,mBAAqB,OAC7E,GAEJ,OACE,SAAC,KAAD,CAAKiG,QAASP,EAAQ8Z,OAAQtL,EAA9B,UACE,UAACgO,EAAD,CAASvnB,OAAQ,CAACC,KAAM,SAAUjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAAnD,WACE,SAAC,KAAD,UACGm5B,GACC,UAAC,IAAD,CAAK95B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WAEE,SAAC,IAAD,CAA2BmG,YAAaA,EAAaiP,SAAU+iB,GAA1Cr5B,IACpB0yB,EAAAA,EAAAA,GACC2G,EAAaxmB,cAAclN,OAC3B0zB,EAAaxmB,cAAcogB,iBAG7B,QAEN,SAAC,KAAD,WACE,UAAC,IAAD,CAAK1zB,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,iBAAMvB,MAAO,CAACmI,WAAY,KAA1B,UACE,SAAC,KAAD,CAAM3H,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,qBAA4BrH,IAA9D,UACE,SAAC,IAAD,CAAgBM,KAAMN,QAGzBq5B,GACC,SAAC,KAAD,WACE,SAAC,IAAD,CACEvwB,UAAQ,EACRC,KAAK,QACLb,aAAcmxB,EAAanxB,aAC3Bc,oBAAqB3B,EACrBc,MAAOA,MAGT,WAGR,SAAC,KAAD,UACGkxB,GACC,UAAC,IAAD,CAAK95B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,SAACq4B,EAAD,CAAyB55B,MAAO,CAACC,SAAU,QAA3C,UACE,SAAC,IAAD,CAASmG,SAAS,WAAWT,QAAS+zB,EAAa1kB,aAAcjV,QAAQ,QAAzE,UACE,gBACEC,MAAO,CACLM,MAAOC,EAAAA,EAAAA,KACPE,SAAU,SACV0U,WAAY,SACZlV,SAAU,OACV+W,aAAc,YAEhB/V,MAAO04B,EART,SAUGA,QAIND,EAAaxmB,cAAcuiB,UAC5BiE,EAAaxmB,cAAclN,SAAW+N,EAAAA,GAAAA,SACpC,SAAC,KAAD,WACE,iBACE/T,MAAO,CACLS,SAAU,SACV0U,WAAY,SACZlV,SAAU,OACV+W,aAAc,YALlB,4BASE,SAAC,IAAD,CACErS,UAAW+0B,EAAaxmB,cAAcuiB,SAAS9wB,UAC/C4uB,SAAUmG,EAAa5iB,kBACvB0c,WAAY,CAACC,aAAa,EAAOC,cAAc,UAInD,SAGN,SAAC,KAAD,CAAezwB,YAAaA,OAGhC,SAAC,KAAD,UACe,OAAZy2B,QAAY,IAAZA,GAAAA,EAAcxmB,cAAcG,MAAMvK,QACjC,0BACE,SAAC,KAAD,CACEiH,KAAM2pB,EAAaxmB,cAAcG,MAAM,GACvCrD,gBAAiBW,EAAAA,GAAAA,cAIrB,SAAC,KAAD,CAAe1N,YAAaA,OAGhC,SAAC,KAAD,UACe,OAAZy2B,QAAY,IAAZA,GAAAA,EAAcxmB,gBAA6B,OAAZwmB,QAAY,IAAZA,OAAA,EAAAA,EAAcxmB,cAAc5B,KAAKxI,QAAS,GACxE,SAAC,IAAD,CACEoF,IAAKwrB,EAAaxmB,cAAc5B,KAAK,GACrCjR,KAAMA,EACN+N,YAAY,EACZD,WAAS,EACTE,aAAa,KAGf,SAAC,KAAD,CAAepL,YAAaA,OAGhC,SAAC,KAAD,UACe,OAAZy2B,QAAY,IAAZA,GAAAA,EAAcxzB,cACb,SAAC,IAAD,CACEP,SACE,UAAC,KAAD,YACE,SAAC,IAAD,CACEhF,KAAK,yBACL3B,KAAK,eACLgT,OAAO,SACPxR,IAAImI,EAAAA,EAAAA,IACFjB,EAD0B,WAEtBc,EAAQ,OAAS,YAFK,YAEUkxB,EAAanxB,aAFvB,mBAK9B,SAAC,IAAD,CACE5H,KAAK,4BACL3B,KAAK,aACLgT,OAAO,SACPxR,IAAImI,EAAAA,EAAAA,IACFjB,EAD0B,WAEtBc,EAAQ,OAAS,YAFK,YAEUkxB,EAAanxB,aAFvB,qBAOlCnC,SAAS,cAvBX,UAyBE,SAAC,KAAD,CAAQpH,MAAM,SAAC,KAAD,CAAMqB,KAAK,oBAEzB,aAODw5B,EAA4B,WACvC,OACE,UAAC,IAAD,CACEpoB,OAAQ,CAACC,KAAM,aAAcjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAC9CP,MAAO,CACLD,QAAS,OACTq5B,oBAAqBZ,EACrBhc,OAAQ,OACRtb,SAAU,OACVZ,MAAOC,EAAAA,EAAAA,SAPX,WAUE,SAAC,KAAD,KACA,SAAC,KAAD,6BACA,SAAC,KAAD,wBACA,SAAC,KAAD,yBACA,SAAC,KAAD,wBACA,SAAC,KAAD,QAKAy4B,GAAUzuB,EAAAA,EAAAA,IAAOjJ,EAAAA,GAAV,qFAAGiJ,CAAH,wDAEciuB,GAIrBoB,EAA0BrvB,EAAAA,GAAAA,IAAAA,WAAH,0FAAGA,CAAH,+EAYvBivB,GAAwBhvB,EAAAA,EAAAA,IAAH,6qBAgCvBmH,EAAAA,GACAU,EAAAA,GACAgnB,EAAAA,I,8VCpREb,EAAmB,mCASZsB,EAAuB,SAACh7B,GACnC,IAAOuB,EAAoCvB,EAApCuB,KAAMqH,EAA8B5I,EAA9B4I,YAAasjB,EAAiBlsB,EAAjBksB,MAAOxO,EAAU1d,EAAV0d,OAE3BzU,GAAOC,EAAAA,EAAAA,IAAcN,GAE3B,GAAmClF,EAAAA,EAAAA,GACjCu3B,EACA,CACEr3B,UAAW,CACTi2B,SAAU,CACR9wB,eAAgBH,EAAYrH,KAC5ByH,uBAAwBJ,EAAY4B,SACpCgrB,WAAYj0B,MAPpB,eAAO25B,EAAP,KAAoB/2B,EAApB,MAaAC,EAAAA,EAAAA,IAAmB82B,IACnB72B,EAAAA,EAAAA,IAA0BF,EAAaG,EAAAA,IAEvC,IAAOC,EAAQJ,EAARI,KAED42B,EAAa32B,EAAAA,SAAc,WAC/B,MAAuC,YAA/B,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAM62B,cAAc12B,YACf,KAGFH,EAAK62B,gBACX,CAAC72B,IAEJ,OACE,SAAC,KAAD,CAAK0Z,QAASP,EAAQ8Z,OAAQtL,EAA9B,UACE,UAACgO,EAAD,CAASvnB,OAAQ,CAACC,KAAM,SAAUjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAAnD,WACE,SAAC,KAAD,UACG05B,GACC,SAAC,IAAD,CAAKr6B,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,UAEE,SAAC,IAAD,CAAyBmG,YAAaA,EAAamP,OAAQojB,GAAxC55B,KAEnB,QAEN,SAAC,KAAD,WACE,UAAC,IAAD,CAAKT,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,WACE,iBAAMvB,MAAO,CAACmI,WAAY,KAA1B,UACE,SAAC,KAAD,CAAM3H,IAAImI,EAAAA,EAAAA,IAAyBjB,EAAD,mBAA0BrH,IAA5D,UACE,SAAC,IAAD,CAAgBM,KAAMN,SAG1B,gBACEL,MAAO,CACLC,SAAU,OACVQ,SAAU,SACVuW,aAAc,YAJlB,UAOE,SAAC,KAAD,CACEhX,MAAO,CACLM,MAAOC,EAAAA,EAAAA,QACP4U,WAAY,UAHhB,gBAMG8kB,QANH,IAMGA,OANH,EAMGA,EAAY5oB,sBAKrB,SAAC,KAAD,WACE,UAAC,IAAD,CAAKzR,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAIvB,MAAO,CAACkB,SAAU,QAA5D,UACa,OAAV+4B,QAAU,IAAVA,GAAAA,EAAYtF,SAAWsF,EAAWtF,QAAQ7rB,QACzC,SAAC,IAAD,CAAKlJ,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,SACG04B,EAAWtF,QAAQhzB,KAAI,SAACqQ,GAAD,OACtB,SAAC,IAAD,CAEE7I,UAAQ,EACRC,KAAK,QACLb,aAAcyJ,EAAOzJ,aACrBc,oBAAqB3B,EACrBc,SAAUT,KAAQU,EAAAA,EAAAA,IAAgBV,EAAMiK,EAAOzJ,gBAL1CyJ,EAAOzJ,mBAShB,KACO,OAAV0xB,QAAU,IAAVA,GAAAA,EAAYrF,SAAS5rB,WAAaixB,EAAWrF,SAAS5rB,UAAUF,QAC/D,SAAC,IAAD,CAAKlJ,KAAM,CAACC,UAAW,SAAU0B,IAAK,GAAtC,SACG04B,EAAWrF,SAAS5rB,UAAUrH,KAAI,SAAC6E,GAAD,OACjC,SAAC,IAAD,CAAoCzH,KAAMyH,EAAIzH,KAAMC,KAAK,SAAzCwH,EAAIzH,KAAKY,KAAK,WAGhC,WAGR,SAAC,KAAD,UACGs6B,GACC,gBAAKj6B,MAAO,CAACM,MAAOC,EAAAA,EAAAA,MAApB,UACGg0B,EAAAA,EAAAA,GAAuB0F,EAAWzF,uBAGrC,SAAC,KAAD,CAAevxB,YAAaA,OAGhC,SAAC,KAAD,UACa,OAAVg3B,QAAU,IAAVA,GAAAA,EAAYpnB,YAAYQ,MAAMvK,QAC7B,0BACE,SAAC,KAAD,CACEiH,KAAMkqB,EAAWpnB,YAAYQ,MAAM,GACnCrD,gBAAiBW,EAAAA,GAAAA,YAIrB,SAAC,KAAD,CAAe1N,YAAaA,OAGhC,SAAC,KAAD,UACa,OAAVg3B,QAAU,IAAVA,GAAAA,EAAYpnB,cAAyB,OAAVonB,QAAU,IAAVA,OAAA,EAAAA,EAAYpnB,YAAYvB,KAAKxI,QAAS,GAChE,SAAC,IAAD,CACEoF,IAAK+rB,EAAWpnB,YAAYvB,KAAK,GACjCjR,KAAMA,EACN+N,YAAY,EACZD,WAAS,EACTE,aAAa,KAGf,SAAC,KAAD,CAAepL,YAAaA,YAQ3Bk3B,EAA0B,WACrC,OACE,UAAC,IAAD,CACE1oB,OAAQ,CAACC,KAAM,aAAcjN,MAAO,EAAGnE,MAAOC,EAAAA,EAAAA,aAC9CP,MAAO,CACLD,QAAS,OACTq5B,oBAAqBZ,EACrBhc,OAAQ,OACRtb,SAAU,OACVZ,MAAOC,EAAAA,EAAAA,SAPX,WAUE,SAAC,KAAD,KACA,SAAC,KAAD,oBACA,SAAC,KAAD,2BACA,SAAC,KAAD,yBACA,SAAC,KAAD,yBACA,SAAC,KAAD,2BAKAy4B,GAAUzuB,EAAAA,EAAAA,IAAOjJ,EAAAA,GAAV,oFAAGiJ,CAAH,wDAEciuB,GAIrBuB,GAAsBvvB,EAAAA,EAAAA,IAAH,owBAqCrBmH,EAAAA,GACAU,EAAAA,GACAinB,EAAAA,I,0MC5NSc,EASR,SAAC,GASC,IARL1yB,EAQI,EARJA,YACA8U,EAOI,EAPJA,OACAwO,EAMI,EANJA,MACA1G,EAKI,EALJA,SACA8D,EAII,EAJJA,SACAC,EAGI,EAHJA,YACA9D,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,SAAC,KAAD,CAAKzH,QAASP,EAAQ8Z,OAAQtL,EAA9B,UACE,SAAC,IAAD,CACE3iB,SAAUX,EAAYrH,KACtBiI,aAAcZ,EAAY4B,SAC1Bgb,SAAUA,EACVviB,QAAS,SAAC+B,GAAD,OACPA,EAAEgmB,iBAAiB,SAAWzB,GAAa/D,GAAY8D,EAAS1gB,IAElE6c,aAAcA,EACdC,aAAcA,OAMT6V,EAGR,SAAC,GAAwC,IAAvCp3B,EAAsC,EAAtCA,YAAsC,IAAzBq3B,WAAAA,OAAyB,MAAZ,OAAY,EACpCC,EAAyBt3B,EAAzBs3B,OAAQtpB,EAAiBhO,EAAjBgO,QAAS5N,EAAQJ,EAARI,KACxB,OACE,gBAAKrD,MAAO,CAACM,MAAOC,EAAAA,EAAAA,SAApB,UACIg6B,GAAWtpB,IAAY5N,EAAQ,UAAYi3B,KAKtCE,EAAwB,SAAC,GAAgB,IAAfvE,EAAc,EAAdA,SACrC,OACE,SAACwE,EAAD,WACE,SAAC,KAAD,UAAUxE,OAKVwE,EAAuBlwB,EAAAA,GAAAA,IAAAA,WAAH,uFAAGA,CAAH,6FAKtBmwB,EAAAA,GACSn6B,EAAAA,EAAAA,SAOA2C,EAAqB,SAACy3B,GACjCr3B,EAAAA,WAAgB,WACd,IAAMigB,EAAQqX,YAAW,WACvBD,MALkB,KAQpB,OAAO,kBAAME,aAAatX,MACzB,CAACoX","sources":["../../core/src/assets/AssetLink.tsx","../../core/src/instance/BackfillPartitionsRequestedDialog.tsx","../../core/src/instance/BackfillRow.tsx","../../core/src/instance/BackfillStepStatusDialog.tsx","../../core/src/instance/BackfillTerminationDialog.tsx","../../core/src/instance/BackfillTable.tsx","../../core/src/instance/LastRunSummary.tsx","../../core/src/instance/StepSummaryForRun.tsx","../../core/src/instigation/InstigationTick.tsx","../../core/src/instigation/InstigationUtils.tsx","../../core/src/instigation/Unloadable.tsx","../../core/src/nav/RepositoryLink.tsx","../../core/src/nav/ScheduleOrSensorTag.tsx","../../core/src/overview/OverviewExpansionKey.tsx","../../core/src/partitions/PartitionRunList.tsx","../../core/src/partitions/PartitionStepStatus.tsx","../../core/src/partitions/RunMatrixUtils.tsx","../../core/src/partitions/useMatrixData.tsx","../../core/src/partitions/usePartitionStepQuery.tsx","../../core/src/runs/RepoSectionHeader.tsx","../../core/src/runs/RunStatusPez.tsx","../../core/src/runs/mergeStatusToBackground.tsx","../../core/src/runs/RunTimeline.tsx","../../core/src/ui/useFormatDateTime.tsx","../../core/src/runs/batchRunsForTimeline.tsx","../../core/src/runs/useJobReExecution.tsx","../../core/src/schedules/SchedulePartitionStatus.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/SchedulesTable.tsx","../../core/src/sensors/EditCursorDialog.tsx","../../core/src/sensors/SensorDetails.tsx","../../core/src/sensors/SensorInfo.tsx","../../core/src/ui/VirtualizedTable.tsx","../../core/src/ui/findDuplicateRepoNames.tsx","../../core/src/ui/useRepoExpansionState.tsx","../../core/src/instance/JobMenu.tsx","../../core/src/workspace/VirtualizedJobRow.tsx","../../core/src/workspace/VirtualizedScheduleRow.tsx","../../core/src/workspace/VirtualizedSensorRow.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx"],"sourcesContent":["import {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetLink: React.FC<{\n  path: string[];\n  icon?: 'asset' | 'asset_non_sda' | 'folder';\n  textStyle?: 'break-word' | 'middle-truncate';\n  url?: string;\n  isGroup?: boolean;\n}> = (props) => {\n  const {path, icon, url, isGroup, textStyle = 'break-word'} = props;\n  const linkUrl = url ? url : assetDetailsPathForKey({path});\n  const assetPath =\n    path\n      .reduce((accum, elem, ii) => [...accum, ii > 0 ? ' / ' : '', elem], [] as string[])\n      .join('') + (isGroup ? '/' : '');\n\n  return (\n    <Box\n      flex={{direction: 'row', alignItems: 'flex-start', display: 'inline-flex'}}\n      style={{maxWidth: '100%'}}\n    >\n      {icon ? (\n        <Box margin={{right: 8, top: 2}}>\n          <Icon name={icon} color={Colors.Gray400} />\n        </Box>\n      ) : null}\n      <Link to={linkUrl} style={{overflow: 'hidden'}}>\n        {textStyle === 'break-word' ? (\n          <span style={{wordBreak: 'break-word'}}>{assetPath}</span>\n        ) : (\n          <MiddleTruncate text={assetPath} />\n        )}\n      </Link>\n    </Box>\n  );\n};\n","import {Button, DialogBody, DialogFooter, Dialog, FontFamily, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '18px', fontFamily: FontFamily.monospace}}>\n            {backfill?.backfillId}\n          </span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogBody>\n        {backfill ? (\n          <Box flex={{direction: 'column', gap: 8}} style={{maxHeight: '80vh', overflowY: 'auto'}}>\n            {backfill.partitionNames.map((partitionName: string) => (\n              <div key={partitionName}>{partitionName}</div>\n            ))}\n          </Box>\n        ) : null}\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Button, Colors, Icon, MenuItem, Menu, Popover, Tag, Mono} from '@dagster-io/ui';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {useHistory, Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {RunStatus, BulkActionStatus} from '../graphql/types';\nimport {\n  PartitionState,\n  PartitionStatus,\n  runStatusToPartitionState,\n} from '../partitions/PartitionStatus';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../runs/AssetKeyTagCollection';\nimport {inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../runs/RunTimeline';\nimport {runsPathWithFilters} from '../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\nexport const BackfillRow = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n  onShowPartitionsRequested,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  showBackfillTarget: boolean;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n}) => {\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId: backfill.backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId: backfill.backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions\n  const [queryStatus, queryResult] =\n    backfill.numPartitions > BACKFILL_PARTITIONS_COUNTS_THRESHOLD ? statusCounts : statusDetails;\n\n  useDelayedRowQuery(queryStatus);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses.results;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.backfillId}`,\n    },\n  ]);\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono style={{fontSize: '16px', lineHeight: '18px'}}>\n          <Link to={runsUrl}>{backfill.backfillId}</Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 140}}>\n        {counts ? (\n          <BackfillStatusTag backfill={backfill} counts={counts} />\n        ) : (\n          <LoadingOrNone queryResult={queryResult} />\n        )}\n      </td>\n      <td>\n        {counts ? (\n          <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n        ) : (\n          <LoadingOrNone queryResult={queryResult} />\n        )}\n      </td>\n      <td>\n        <BackfillMenu\n          backfill={backfill}\n          onResumeBackfill={onResumeBackfill}\n          onTerminateBackfill={onTerminateBackfill}\n          onShowStepStatus={onShowStepStatus}\n          canCancelRuns={\n            counts ? counts[RunStatus.QUEUED] > 0 || counts[RunStatus.STARTED] > 0 : false\n          }\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BackfillMenu = ({\n  backfill,\n  canCancelRuns,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n}: {\n  backfill: BackfillTableFragment;\n  canCancelRuns: boolean;\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n}) => {\n  const history = useHistory();\n  const {canCancelPartitionBackfill, canLaunchPartitionBackfill} = usePermissionsDEPRECATED();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.backfillId}`,\n    },\n  ]);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          {canCancelPartitionBackfill.enabled ? (\n            <>\n              {backfill.numCancelable > 0 ? (\n                <MenuItem\n                  text=\"Cancel backfill submission\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n              {canCancelRuns ? (\n                <MenuItem\n                  text=\"Terminate unfinished runs\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n            </>\n          ) : null}\n          {canLaunchPartitionBackfill.enabled &&\n          backfill.status === BulkActionStatus.FAILED &&\n          backfill.partitionSet ? (\n            <MenuItem\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => onResumeBackfill(backfill)}\n            />\n          ) : null}\n          <MenuItem\n            text=\"View backfill runs\"\n            icon=\"settings_backup_restore\"\n            onClick={() => history.push(runsUrl)}\n          />\n          <MenuItem\n            text=\"View step status\"\n            icon=\"view_list\"\n            onClick={() => {\n              onShowStepStatus(backfill);\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n\n  // Note: The backend reports a run status as the state of each partition, but\n  // Dagit doesn't consider all run statuses (eg: \"Canceling\") a valid partition state.\n  // Coerce the data from the backend into PartitionState, collapsing the counts.\n  const partitionCounts = Object.entries(counts).reduce((partitionCounts, [runStatus, count]) => {\n    const key = runStatusToPartitionState(runStatus as RunStatus);\n    partitionCounts[key] = (partitionCounts[key] || 0) + count;\n    return partitionCounts;\n  }, {});\n\n  return statuses ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      partitionStateForKey={(key, _) =>\n        runStatusToPartitionState(statuses.filter((s) => s.partitionName === key)[0].runStatus)\n      }\n      splitPartitions={true}\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[PartitionState.SUCCESS]}\n      inProgressCount={partitionCounts[PartitionState.STARTED]}\n      failedCount={partitionCounts[PartitionState.FAILURE]}\n    />\n  );\n};\n\nconst BackfillTarget: React.FC<{\n  backfill: BackfillTableFragment;\n}> = ({backfill}) => {\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const repoAddress = partitionSet\n    ? buildRepoAddress(\n        partitionSet.repositoryOrigin.repositoryName,\n        partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const repo = useRepository(repoAddress);\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.Gray400} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} modalTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        <TagButton onClick={onExpand}>\n          <Tag intent=\"primary\" interactive>\n            {backfill.partitionNames.length.toLocaleString()} partitions\n          </Tag>\n        </TagButton>\n      </div>\n      {allPartitions && (\n        <PartitionStatus\n          small\n          hideStatusTooltip\n          partitionNames={allPartitions}\n          partitionStateForKey={(key) =>\n            backfill.partitionNames.includes(key) ? PartitionState.QUEUED : PartitionState.MISSING\n          }\n        />\n      )}\n    </Box>\n  );\n};\n\nconst BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  counts: {[status: string]: number};\n}) => {\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>Requested</Tag>;\n    case BulkActionStatus.CANCELED:\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">{backfill.status === 'FAILED' ? 'Failed' : 'Canceled'}</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        backfillId\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        backfillId\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Button, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionPerOpStatus} from '../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  BackfillTableFragment,\n  PartitionSetForBackfillTableFragment,\n} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfill?.partitionSet) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.backfillId}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface ContentProps {\n  backfill: BackfillTableFragment;\n  partitionSet: PartitionSetForBackfillTableFragment;\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n\n  const runsFilter = React.useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.backfillId}`};\n    return [token];\n  }, [backfill.backfillId]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames: backfill.partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={backfill.partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../graphql/types';\nimport {cancelableStatuses} from '../runs/RunStatuses';\nimport {TerminationDialog} from '../runs/TerminationDialog';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.backfillId || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const unfinishedMap = React.useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.backfillId}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={!!backfill && backfill.status !== BulkActionStatus.CANCELED && !!numUnscheduled}\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        <DialogBody>\n          There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n          yet to be queued or launched.\n        </DialogBody>\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      <TerminationDialog\n        isOpen={\n          !!backfill &&\n          (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n          !!Object.keys(unfinishedMap).length\n        }\n        onClose={onClose}\n        onComplete={onComplete}\n        selectedRuns={unfinishedMap}\n      />\n    </>\n  );\n};\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      __typename\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Group, Table} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\n\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillStepStatusDialog} from './BackfillStepStatusDialog';\nimport {BackfillTerminationDialog} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [terminationBackfill, setTerminationBackfill] = React.useState<BackfillTableFragment>();\n  const [stepStatusBackfill, setStepStatusBackfill] = React.useState<BackfillTableFragment>();\n  const [\n    partitionsRequestedBackfill,\n    setPartitionsRequestedBackfill,\n  ] = React.useState<BackfillTableFragment>();\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n  const {canCancelPartitionBackfill} = usePermissionsDEPRECATED();\n\n  const candidateId = terminationBackfill?.backfillId;\n\n  React.useEffect(() => {\n    if (canCancelPartitionBackfill.enabled && candidateId) {\n      const [backfill] = backfills.filter((backfill) => backfill.backfillId === candidateId);\n      setTerminationBackfill(backfill);\n    }\n  }, [backfills, candidateId, canCancelPartitionBackfill]);\n\n  const resume = async (backfill: BackfillTableFragment) => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.backfillId}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      SharedToaster.show({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      SharedToaster.show({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  return (\n    <>\n      <Table $monospaceFont={false}>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.backfillId}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onTerminateBackfill={setTerminationBackfill}\n              onResumeBackfill={resume}\n              onShowStepStatus={setStepStatusBackfill}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n            />\n          ))}\n        </tbody>\n      </Table>\n      <BackfillStepStatusDialog\n        backfill={stepStatusBackfill}\n        onClose={() => setStepStatusBackfill(undefined)}\n      />\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n      <BackfillTerminationDialog\n        backfill={terminationBackfill}\n        onClose={() => setTerminationBackfill(undefined)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    backfillId\n    status\n    numCancelable\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary: React.FC<Props> = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tag,\n  Body,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {InstigationType, InstigationTickStatus} from '../graphql/types';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\n\nimport {\n  LaunchedRunListQuery,\n  LaunchedRunListQueryVariables,\n  TickTagFragment,\n} from './types/InstigationTick.types';\n\nexport const TickTag: React.FC<{\n  tick: TickTagFragment;\n  instigationType?: InstigationType;\n}> = ({tick, instigationType}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  switch (tick.status) {\n    case InstigationTickStatus.STARTED:\n      return <Tag>Started</Tag>;\n    case InstigationTickStatus.SUCCESS:\n      if (!tick.runIds.length) {\n        return <Tag intent=\"primary\">Requested</Tag>;\n      }\n      const tag = (\n        <>\n          <Tag intent=\"primary\" interactive>\n            <ButtonLink underline=\"never\" onClick={() => setOpen(true)}>\n              {tick.runIds.length} Requested\n            </ButtonLink>\n          </Tag>\n          <Dialog\n            isOpen={open}\n            onClose={() => setOpen(false)}\n            style={{width: '90vw'}}\n            title=\"Launched runs\"\n          >\n            <RunList runIds={tick.runIds} />\n            <DialogFooter>\n              <Button intent=\"primary\" onClick={() => setOpen(false)}>\n                OK\n              </Button>\n            </DialogFooter>\n          </Dialog>\n        </>\n      );\n      if (tick.runKeys.length > tick.runIds.length) {\n        const message = `${tick.runKeys.length} runs requested, but ${\n          tick.runKeys.length - tick.runIds.length\n        } skipped because the runs already exist for those requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            {tag}\n          </Tooltip>\n        );\n      }\n      return tag;\n\n    case InstigationTickStatus.SKIPPED:\n      if (tick.runKeys.length) {\n        const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      if (tick.skipReason) {\n        return (\n          <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      return <Tag intent=\"warning\">Skipped</Tag>;\n    case InstigationTickStatus.FAILURE:\n      if (!tick.error) {\n        return <Tag intent=\"danger\">Failure</Tag>;\n      } else {\n        const error = tick.error;\n        const showError = () =>\n          showCustomAlert({\n            title: instigationType\n              ? instigationType === InstigationType.SCHEDULE\n                ? 'Schedule Response'\n                : 'Sensor Response'\n              : 'Python Error',\n            body: <PythonErrorInfo error={error} />,\n          });\n        return (\n          <>\n            <LinkButton onClick={showError}>\n              <Tag minimal={true} intent=\"danger\">\n                Failure\n              </Tag>\n            </LinkButton>\n            <ButtonLink onClick={showError} style={{marginLeft: 8, fontSize: 12}}>\n              View\n            </ButtonLink>\n          </>\n        );\n      }\n    default:\n      return assertUnreachable(tick.status);\n  }\n};\n\nexport const RunList: React.FC<{runIds: string[]}> = ({runIds}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList: React.FC<{\n  originRunIds?: string[];\n}> = ({originRunIds}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.Gray200}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\nconst LinkButton = styled.button`\n  background: inherit;\n  border: none;\n  cursor: pointer;\n  font-size: inherit;\n  text-decoration: none;\n  padding: 0;\n`;\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\n\nexport const InstigatedRunStatus: React.FC<{\n  instigationState: InstigationStateFragment;\n}> = ({instigationState}) => {\n  if (!instigationState.runs.length) {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n  return <LastRunSummary run={instigationState.runs[0]} name={instigationState.name} />;\n};\n\nexport const RunStatusLink: React.FC<{run: RunStatusFragment}> = ({run}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.runId}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({runId: run.runId})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    runId\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.Gray500};\n  }\n`;\n","import {useMutation} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Group, Table, Subheading, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor Name</th>\n            <th style={{width: '100px'}}>Last Tick</th>\n            <th>Last Run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule Name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last Tick</th>\n            <th>Last Run</th>\n            <th>Partition Set Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks} = sensorState;\n  const {canStopSensor} = usePermissionsDEPRECATED();\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !canStopSensor.enabled;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n    return lacksPermission ? (\n      <Tooltip content={canStopSensor.disabledReason}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const {canStopRunningSchedule} = usePermissionsDEPRECATED();\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !canStopRunningSchedule.enabled;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={canStopRunningSchedule.disabledReason}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import {Box, Colors, Icon, IconWrapper, MiddleTruncate, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ReloadRepositoryLocationButton} from './ReloadRepositoryLocationButton';\n\nexport const RepositoryLink: React.FC<{\n  repoAddress: RepoAddress;\n  showIcon?: boolean;\n  showRefresh?: boolean;\n}> = ({repoAddress, showIcon = false, showRefresh = true}) => {\n  const {location} = repoAddress;\n  const {canReloadRepositoryLocation} = usePermissionsForLocation(repoAddress.location);\n  const repoString = repoAddressAsHumanString(repoAddress);\n\n  return (\n    <Box flex={{display: 'inline-flex', direction: 'row', alignItems: 'center'}} title={repoString}>\n      {showIcon && <Icon name=\"folder\" style={{marginRight: 8}} color={Colors.Gray400} />}\n      <RepositoryName to={workspacePathFromAddress(repoAddress)} style={{flex: 1}}>\n        <MiddleTruncate text={repoString} />\n      </RepositoryName>\n      {canReloadRepositoryLocation.enabled && showRefresh ? (\n        <ReloadRepositoryLocationButton location={location}>\n          {({tryReload, reloading}) => (\n            <ReloadTooltip\n              content={\n                reloading ? (\n                  'Reloading…'\n                ) : (\n                  <>\n                    Reload location <strong>{location}</strong>\n                  </>\n                )\n              }\n            >\n              {reloading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <StyledButton onClick={tryReload}>\n                  <Icon name=\"refresh\" color={Colors.Gray400} />\n                </StyledButton>\n              )}\n            </ReloadTooltip>\n          )}\n        </ReloadRepositoryLocationButton>\n      ) : null}\n    </Box>\n  );\n};\n\nconst RepositoryName = styled(Link)`\n  max-width: 280px;\n`;\n\nconst ReloadTooltip = styled(Tooltip)`\n  margin-left: 4px;\n\n  && {\n    display: block;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  margin: 0;\n\n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & ${IconWrapper} {\n    display: block;\n    transition: color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    color: ${Colors.Blue500};\n  }\n`;\n","import {Box, ButtonLink, Colors, Tag, Tooltip, FontFamily, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitch.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitch.types';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleAndSensorDialog} from './ScheduleAndSensorDialog';\n\nexport const ScheduleOrSensorTag: React.FC<{\n  schedules: ScheduleSwitchFragment[];\n  sensors: SensorSwitchFragment[];\n  repoAddress: RepoAddress;\n  showSwitch?: boolean;\n}> = ({schedules, sensors, repoAddress, showSwitch = true}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const scheduleCount = schedules.length;\n  const sensorCount = sensors.length;\n\n  if (scheduleCount > 1 || sensorCount > 1 || (scheduleCount && sensorCount)) {\n    const buttonText =\n      scheduleCount && sensorCount\n        ? `${scheduleCount + sensorCount} schedules/sensors`\n        : scheduleCount\n        ? `${scheduleCount} schedules`\n        : `${sensorCount} sensors`;\n\n    const icon = scheduleCount > 1 ? 'schedule' : 'sensors';\n\n    return (\n      <>\n        <Tag icon={icon}>\n          <ButtonLink onClick={() => setOpen(true)} color={Colors.Link}>\n            {buttonText}\n          </ButtonLink>\n        </Tag>\n        <ScheduleAndSensorDialog\n          isOpen={open}\n          onClose={() => setOpen(false)}\n          repoAddress={repoAddress}\n          schedules={schedules}\n          sensors={sensors}\n          showSwitch={showSwitch}\n        />\n      </>\n    );\n  }\n\n  if (scheduleCount) {\n    return (\n      <MatchingSchedule schedule={schedules[0]} repoAddress={repoAddress} showSwitch={showSwitch} />\n    );\n  }\n\n  if (sensorCount) {\n    return <MatchingSensor sensor={sensors[0]} repoAddress={repoAddress} showSwitch={showSwitch} />;\n  }\n\n  return null;\n};\n\nconst MatchingSchedule: React.FC<{\n  schedule: ScheduleSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({schedule, repoAddress, showSwitch}) => {\n  const {cronSchedule, executionTimezone, scheduleState} = schedule;\n  const running = scheduleState.status === 'RUNNING';\n  const tag = (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"schedule\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n          style={{overflow: 'hidden', textOverflow: 'ellipsis'}}\n        >\n          {humanCronString(cronSchedule, executionTimezone || 'UTC')}\n        </Link>\n        {showSwitch ? (\n          <ScheduleSwitch size=\"small\" repoAddress={repoAddress} schedule={schedule} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n\n  return schedule.cronSchedule ? (\n    <Tooltip\n      placement=\"top-start\"\n      content={\n        <Box flex={{direction: 'column', gap: 4}}>\n          <div>\n            Name: <strong>{schedule.name}</strong>\n          </div>\n          <div>\n            Cron:{' '}\n            <span style={{fontFamily: FontFamily.monospace, marginLeft: '4px'}}>\n              ({schedule.cronSchedule})\n            </span>\n          </div>\n          <div>\n            Timezone: <strong>{schedule.executionTimezone || 'UTC'}</strong>\n          </div>\n        </Box>\n      }\n    >\n      {tag}\n    </Tooltip>\n  ) : (\n    tag\n  );\n};\n\nconst MatchingSensor: React.FC<{\n  sensor: SensorSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({sensor, repoAddress, showSwitch}) => {\n  const running = sensor.sensorState.status === 'RUNNING';\n  return (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"sensors\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n          style={{maxWidth: 200, overflow: 'hidden'}}\n        >\n          <MiddleTruncate text={sensor.name} />\n        </Link>\n        {showSwitch ? (\n          <SensorSwitch size=\"small\" repoAddress={repoAddress} sensor={sensor} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList: React.FC<PartitionRunListProps> = (props) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n} from '@dagster-io/ui';\nimport keyBy from 'lodash/keyBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {PartitionHealthData, PartitionHealthDimension} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {useViewport} from '../gantt/useViewport';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {PartitionState} from './PartitionStatus';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  topLabelHeightForLabels,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixStep,\n  PartitionRuns,\n  useMatrixData,\n  MatrixData,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n} from './useMatrixData';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\nexport const PartitionPerAssetStatus: React.FC<\n  Omit<PartitionStepStatusBaseProps, 'partitionNames'> & {\n    assetHealth: PartitionHealthData[];\n    assetQueryItems: GraphQueryItem[];\n    rangeDimensionIdx: number;\n    rangeDimension: PartitionHealthDimension;\n  }\n> = ({assetHealth, rangeDimension, rangeDimensionIdx, assetQueryItems, ...rest}) => {\n  const healthByAssetKey = keyBy(assetHealth, (a) => tokenForAssetKey(a.assetKey));\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter(\n    (b) =>\n      healthByAssetKey[b.node.name]?.dimensions[rangeDimensionIdx]?.name === rangeDimension.name,\n  );\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, idx) => ({\n      idx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: partitionStateToStatusSquareColor(\n          healthByAssetKey[box.node.name].stateForSingleDimension(rangeDimensionIdx, partitionKey),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nexport const partitionStateToStatusSquareColor = (state: PartitionState) => {\n  return state === PartitionState.SUCCESS\n    ? 'SUCCESS'\n    : state === PartitionState.SUCCESS_MISSING\n    ? 'SUCCESS-MISSING'\n    : 'MISSING';\n};\n\nexport const PartitionPerOpStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    repoAddress: RepoAddress;\n    partitions: PartitionRuns[];\n  }\n> = ({repoAddress, pipelineName, partitions, partitionNames, ...rest}) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\nconst PartitionStepStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    data: MatrixData;\n    showLatestRun: boolean;\n  }\n> = (props) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = React.useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => (stepsByName[step.name] = step));\n    return stepRows.map((stepRow) => stepsByName[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.KeylineGray};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: white;\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: #ececec;\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.KeylineGray};\n`;\n\nexport const PARTITION_STEP_STATUS_RUN_FRAGMENT = gql`\n  fragment PartitionStepStatusRun on Run {\n    id\n    runId\n    tags {\n      key\n      value\n    }\n    stepStats {\n      __typename\n      stepKey\n      status\n    }\n  }\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare: React.FC<{\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}> = ({step, runs, runsLoaded, hovered, setHovered, setFocused, partitionName}) => {\n  const [opened, setOpened] = React.useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = runs[runs.length - 1].status;\n    squareStatus = runStatus === RunStatus.CANCELED ? 'failure' : runStatus.toLowerCase();\n  }\n\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1], {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const BOX_SIZE = 32;\n\nexport const STEP_STATUS_COLORS = {\n  SUCCESS: Colors.Green500,\n  SUCCESS_SKIPPED: Colors.Green200,\n  FAILURE: Colors.Red500,\n  FAILURE_SKIPPED: Colors.Red200,\n  SKIPPED: Colors.Yellow500,\n  IN_PROGRESS: '#eee',\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.Gray100};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.White};\n        .tilted {\n          background: ${Colors.Gray100};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.Gray400}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.Blue500};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue500};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.Blue200};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue200};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.Blue500} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: rgba(248, 247, 245, 1);\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(white 0%, white 45%, rgba(248, 247, 245, 1) 60%);\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) => flatGradientStack([hovered ? Colors.Gray100 : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  const maxlength = Math.max(...labels.map((p) => p.length));\n  return (maxlength > 10 ? maxlength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted: React.FC<{label: string; $height: number}> = ({label, $height}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.Gray200};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n\nexport const GridScrollContainer = styled.div`\n  padding-right: 60px;\n  padding-bottom: 16px;\n  overflow-x: scroll;\n  overscroll-behavior-x: contain;\n  z-index: 0;\n  background: ${Colors.White};\n  flex: 1;\n  scrollbar-color: ${Colors.Gray500} ${Colors.Gray100};\n  scrollbar-width: thin;\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n  }\n  &::-webkit-scrollbar:vertical {\n    width: 11px;\n  }\n  &::-webkit-scrollbar:horizontal {\n    height: 11px;\n  }\n  &::-webkit-scrollbar-thumb {\n    border-radius: 8px;\n    border: 2px solid ${Colors.Gray100};\n    background-color: ${Colors.Gray500};\n  }\n  &::-webkit-scrollbar-track {\n    background-color: ${Colors.Gray100};\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nimport {\n  PartitionMatrixStepRunFragment,\n  PartitionMatrixSolidHandleFragment,\n} from './types/useMatrixData.types';\n\ntype StatusSquareColor = 'SUCCESS' | 'FAILURE' | 'MISSING' | 'FAILURE-MISSING' | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\nexport interface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagit 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nexport function isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    partitionsByName[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = partitionsByName[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1];\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx];\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx].color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx].color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii].finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii].runs.length === 0 ||\n        partitionColumns[ii].steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    runId\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {useApolloClient, ApolloClient, gql} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQueryVariables,\n  PartitionStepLoaderQuery,\n} from './types/usePartitionStepQuery.types';\nimport {PartitionRuns, PARTITION_MATRIX_STEP_RUN_FRAGMENT} from './useMatrixData';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.runId === r.runId))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.Dark} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.Gray50};\n  border: 0;\n  box-shadow: inset 0px -1px 0 ${Colors.KeylineGray}, inset 0px 1px 0 ${Colors.KeylineGray};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.Gray100};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.Gray700};\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\n\nconst RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue500,\n  NOT_STARTED: Colors.Blue500,\n  STARTING: Colors.Blue500,\n  MANAGED: Colors.Blue500,\n  STARTED: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n};\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.runId}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.runId}\n            runId={run.runId}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.runId}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.KeylineGray};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.Dark};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {Colors} from '@dagster-io/ui';\n\nimport {queuedStatuses, inProgressStatuses, failedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.Blue200;\n    case 'inProgress':\n      return Colors.Blue500;\n    case 'failed':\n      return Colors.Red500;\n    case 'succeeded':\n      return Colors.Green500;\n    case 'scheduled':\n      return Colors.Blue200;\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  Popover,\n  Mono,\n  FontFamily,\n  Tooltip,\n  Tag,\n  Icon,\n  Spinner,\n  MiddleTruncate,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RepoSectionHeader, SECTION_HEADER_HEIGHT} from './RepoSectionHeader';\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {batchRunsForTimeline, RunBatch} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const [width, setWidth] = React.useState<number | null>(null);\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce((accum, job) => {\n    const {repoAddress} = job;\n    const repoKey = repoAddressAsURLString(repoAddress);\n    const jobsForRepo = accum[repoKey] || [];\n    return {...accum, [repoKey]: [...jobsForRepo, job]};\n  }, {});\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const observer = React.useRef<ResizeObserver | null>(null);\n\n  const containerRef = React.useCallback((node) => {\n    if (node) {\n      observer.current = new ResizeObserver((entries) => {\n        const entry = entries[0];\n        setWidth(entry.contentRect.width);\n      });\n      observer.current.observe(node);\n    } else {\n      observer.current?.disconnect();\n    }\n  }, []);\n\n  if (!width) {\n    return (\n      <Timeline $height={DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT} ref={containerRef}>\n        <div />\n      </Timeline>\n    );\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  let nextTop = DATE_TIME_HEIGHT;\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey].length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n  const timelineHeight = DATE_TIME_HEIGHT + (anyJobs ? height : EMPTY_STATE_HEIGHT);\n\n  return (\n    <Timeline $height={timelineHeight} ref={containerRef}>\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', height: DATE_TIME_HEIGHT}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        Jobs\n      </Box>\n      <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      {repoOrder.length ? (\n        repoOrder.map((repoKey) => {\n          const name = repoAddressFromPath(repoKey)?.name;\n          const jobs = buckets[repoKey];\n          const top = nextTop;\n          const expanded = expandedKeys.includes(repoKey);\n          nextTop = top + SECTION_HEADER_HEIGHT + (expanded ? jobs.length * ROW_HEIGHT : 0);\n          return (\n            <TimelineSection\n              expanded={expanded}\n              range={range}\n              top={top}\n              key={repoKey}\n              repoKey={repoKey}\n              isDuplicateRepoName={!!(name && duplicateRepoNames.has(name))}\n              jobs={buckets[repoKey]}\n              onToggle={onToggle}\n              onToggleAll={onToggleAll}\n              width={width}\n            />\n          );\n        })\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </Timeline>\n  );\n};\n\ninterface TimelineSectionProps {\n  expanded: boolean;\n  repoKey: string;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  top: number;\n  range: [number, number];\n  width: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineSection = (props: TimelineSectionProps) => {\n  const {\n    expanded,\n    onToggle,\n    onToggleAll,\n    repoKey,\n    isDuplicateRepoName,\n    jobs,\n    range,\n    top,\n    width,\n  } = props;\n  const repoAddress = repoAddressFromPath(repoKey);\n  const repoName = repoAddress?.name || 'Unknown repo';\n  const repoLocation = repoAddress?.location || 'Unknown location';\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.getModifierState('Shift')) {\n        onToggleAll(!expanded);\n      } else {\n        repoAddress && onToggle(repoAddress);\n      }\n    },\n    [expanded, onToggle, onToggleAll, repoAddress],\n  );\n\n  return (\n    <div>\n      <SectionHeaderContainer $top={top}>\n        <RepoSectionHeader\n          expanded={expanded}\n          repoName={repoName}\n          repoLocation={repoLocation}\n          onClick={onClick}\n          showLocation={isDuplicateRepoName}\n          rightElement={<RunStatusTags jobs={jobs} />}\n        />\n      </SectionHeaderContainer>\n      {expanded\n        ? jobs.map((job, ii) => (\n            <RunTimelineRow\n              key={job.key}\n              job={job}\n              top={top + SECTION_HEADER_HEIGHT + ii * ROW_HEIGHT}\n              range={range}\n              width={width}\n            />\n          ))\n        : null}\n    </div>\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\nconst SectionHeaderContainer = styled.div<{$top: number}>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n\n  ${({$top}) => `transform: translateY(${$top}px);`}\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(startDate, dateTimeOptionsWithTimezone);\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.Gray200}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine style={{left: nowLeft, backgroundColor: Colors.Blue500, zIndex: 1}} />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Gray800};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset 0 1px 0 ${Colors.KeylineGray},\n    inset -1px 0 0 ${Colors.KeylineGray};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset -1px 0 0 ${Colors.KeylineGray};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.KeylineGray};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${Colors.Blue500};\n  border-radius: 1px;\n  color: ${Colors.White};\n  cursor: default;\n  font-size: 12px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 2;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $top={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.Gray900}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0].id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.White}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n    >\n      {content()}\n    </Box>\n  );\n};\n\nconst Timeline = styled.div<{$height: number}>`\n  ${({$height}) => `height: ${$height}px;`}\n  position: relative;\n`;\n\nconst Row = styled.div<{$top: number}>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.KeylineGray};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: ${ROW_HEIGHT + 1}px;\n  padding: 1px 0;\n  position: absolute;\n  left: 0;\n  top: 0;\n\n  ${({$top}) => `transform: translateY(${$top}px);`}\n\n  :first-child, :hover {\n    box-shadow: inset 0 1px 0 ${Colors.KeylineGray}, inset 0 -1px 0 ${Colors.KeylineGray};\n  }\n\n  :hover {\n    background-color: ${Colors.Gray10};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 2px;\n  height: ${ROW_HEIGHT - 4}px;\n  position: absolute;\n  top: 2px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition: background-color 300ms linear, width 300ms ease-in-out;\n\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.White};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? {side: 'top', width: 1, color: Colors.KeylineGray} : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n          <Link to={`${job.path}runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import * as React from 'react';\n\nimport {TimezoneContext} from '../app/time/TimezoneContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\n/**\n * Return a date/time formatter function that takes the user's stored timezone into\n * account. Useful for rendering arbitrary non-typical date/time formats.\n *\n * @returns string\n */\nexport const useFormatDateTime = () => {\n  const [storedTimezone] = React.useContext(TimezoneContext);\n  const timeZone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n  return React.useCallback(\n    (date: Date, options: Intl.DateTimeFormatOptions) => {\n      return Intl.DateTimeFormat(navigator.language, {timeZone, ...options}).format(date);\n    },\n    [timeZone],\n  );\n};\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n  const nowLeft = ((now - start) / (end - start)) * width;\n\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => b.left - a.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {useMutation} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showLaunchError} from '../launchpad/showLaunchError';\nimport {useRepositoryForRun} from '../workspace/useRepositoryForRun';\n\nimport {\n  getReexecutionVariables,\n  handleLaunchResult,\n  LAUNCH_PIPELINE_REEXECUTION_MUTATION,\n  ReExecutionStyle,\n} from './RunUtils';\nimport {RunFragment} from './types/RunFragments.types';\nimport {\n  LaunchPipelineReexecutionMutation,\n  LaunchPipelineReexecutionMutationVariables,\n} from './types/RunUtils.types';\n\nexport const useJobReExecution = (run: RunFragment | undefined | null) => {\n  const history = useHistory();\n  const [launchPipelineReexecution] = useMutation<\n    LaunchPipelineReexecutionMutation,\n    LaunchPipelineReexecutionMutationVariables\n  >(LAUNCH_PIPELINE_REEXECUTION_MUTATION);\n  const repoMatch = useRepositoryForRun(run);\n\n  return React.useCallback(\n    async (style: ReExecutionStyle) => {\n      if (!run || !run.pipelineSnapshotId || !repoMatch) {\n        return;\n      }\n\n      const variables = getReexecutionVariables({\n        run,\n        style,\n        repositoryLocationName: repoMatch.match.repositoryLocation.name,\n        repositoryName: repoMatch.match.repository.name,\n      });\n\n      try {\n        const result = await launchPipelineReexecution({variables});\n        handleLaunchResult(run.pipelineName, result.data?.launchPipelineReexecution, history, {\n          preserveQuerystring: true,\n          behavior: 'open',\n        });\n      } catch (error) {\n        showLaunchError(error as Error);\n      }\n    },\n    [history, launchPipelineReexecution, repoMatch, run],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {ButtonLink, Colors, Group, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assertUnreachable} from '../app/Util';\nimport {RunStatus} from '../graphql/types';\nimport {StatusTable} from '../instigation/InstigationUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  SchedulePartitionStatusFragment,\n  SchedulePartitionStatusQuery,\n  SchedulePartitionStatusQueryVariables,\n  SchedulePartitionStatusResultFragment,\n} from './types/SchedulePartitionStatus.types';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\nconst RUN_STATUSES = ['Succeeded', 'Failed', 'Missing', 'Pending'];\n\nconst calculateDisplayStatus = (partition: SchedulePartitionStatusResultFragment) => {\n  switch (partition.runStatus) {\n    case null:\n      return 'Missing';\n    case RunStatus.SUCCESS:\n      return 'Succeeded';\n    case RunStatus.FAILURE:\n    case RunStatus.CANCELED:\n    case RunStatus.CANCELING:\n      return 'Failed';\n    case RunStatus.MANAGED:\n    case RunStatus.QUEUED:\n    case RunStatus.NOT_STARTED:\n    case RunStatus.STARTED:\n    case RunStatus.STARTING:\n      return 'Pending';\n    default:\n      return assertUnreachable(partition.runStatus);\n  }\n};\n\nexport const SchedulePartitionStatus: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n}> = React.memo(({repoAddress, schedule}) => {\n  const repo = useRepository(repoAddress);\n  const {name: scheduleName, partitionSet, pipelineName} = schedule;\n\n  const partitionSetName = partitionSet?.name;\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const partitionPath = React.useMemo(() => {\n    const query = partitionSetName\n      ? qs.stringify(\n          {\n            partitionSet: partitionSetName,\n          },\n          {addQueryPrefix: true},\n        )\n      : '';\n    return `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions${query}`;\n  }, [partitionSetName, isJob, pipelineName]);\n\n  const partitionURL = workspacePathFromAddress(repoAddress, partitionPath);\n\n  const [retrievePartitionStatus, {data, loading}] = useLazyQuery<\n    SchedulePartitionStatusQuery,\n    SchedulePartitionStatusQueryVariables\n  >(SCHEDULE_PARTITION_STATUS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        scheduleName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  const onClick = React.useCallback(() => retrievePartitionStatus(), [retrievePartitionStatus]);\n\n  const loadable = () => {\n    if (loading) {\n      return <Caption style={{color: Colors.Gray400}}>Loading…</Caption>;\n    }\n\n    if (!data) {\n      return (\n        <ButtonLink onClick={onClick}>\n          <Caption>Show coverage</Caption>\n        </ButtonLink>\n      );\n    }\n\n    const partitionFragment = data.scheduleOrError;\n    if (partitionFragment.__typename === 'Schedule') {\n      return (\n        <RetrievedSchedulePartitionStatus\n          schedule={partitionFragment}\n          partitionURL={partitionURL}\n        />\n      );\n    }\n\n    return <Caption style={{color: Colors.Red700}}>Partition set not found!</Caption>;\n  };\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Link to={partitionURL}>{partitionSetName}</Link>\n      {loadable()}\n    </Group>\n  );\n});\n\nconst RetrievedSchedulePartitionStatus: React.FC<{\n  schedule: SchedulePartitionStatusFragment;\n  partitionURL: string;\n}> = ({schedule, partitionURL}) => {\n  const {partitionSet} = schedule;\n\n  if (!partitionSet || partitionSet.partitionStatusesOrError.__typename !== 'PartitionStatuses') {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n\n  const partitions = partitionSet.partitionStatusesOrError.results;\n  const partitionsByType = {};\n  partitions.forEach((partition) => {\n    const displayStatus = calculateDisplayStatus(partition);\n    partitionsByType[displayStatus] = [...(partitionsByType[displayStatus] || []), partition];\n  });\n\n  return (\n    <StatusTable>\n      <tbody>\n        {RUN_STATUSES.map((status) => {\n          if (!(status in partitionsByType)) {\n            return null;\n          }\n          return (\n            <tr key={status}>\n              <td style={{width: '100px'}}>{status}</td>\n              <td>\n                {status === 'Failed' || status === 'Missing' ? (\n                  <Link\n                    to={`${partitionURL}?showFailuresAndGapsOnly=true`}\n                    style={{color: Colors.Gray900}}\n                  >\n                    {partitionsByType[status].length}\n                  </Link>\n                ) : (\n                  partitionsByType[status].length\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </StatusTable>\n  );\n};\n\nconst SCHEDULE_PARTITION_STATUS_QUERY = gql`\n  query SchedulePartitionStatusQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...SchedulePartitionStatusFragment\n      }\n    }\n  }\n\n  fragment SchedulePartitionStatusFragment on Schedule {\n    id\n    mode\n    pipelineName\n    partitionSet {\n      id\n      name\n      partitionStatusesOrError {\n        ... on PartitionStatuses {\n          results {\n            id\n            ...SchedulePartitionStatusResult\n          }\n        }\n      }\n    }\n  }\n\n  fragment SchedulePartitionStatusResult on PartitionStatus {\n    id\n    partitionName\n    runStatus\n  }\n`;\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths) {\n      const schedulerHealth = schedulerHealths[0];\n      healthy = !!(schedulerHealth.required && schedulerHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box, Button, Colors, Icon, Menu, Popover, Table, Tag, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {InstigatedRunStatus} from '../instigation/InstigationUtils';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {MenuLink} from '../ui/MenuLink';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\nexport const SchedulesTable: React.FC<{\n  schedules: ScheduleFragment[];\n  repoAddress: RepoAddress;\n}> = ({repoAddress, schedules}) => {\n  const lastTick = 'Status of the last tick: One of `Started`, `Skipped`, `Requested`, `Failed`';\n  const lastRun = 'The status of the last run requested by this schedule';\n  const partitionStatus = (\n    <div style={{width: 300}}>\n      <p>The status of each partition in the partition set associated with this schedule.</p>\n      <p>\n        Partitions have a `Success` status if the last run for that partition completed\n        successfully.\n      </p>\n      <p>Partititons have a `Missing` status if no run has been executed for that partition.</p>\n    </div>\n  );\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '60px'}}></th>\n          <th>Schedule name</th>\n          <th style={{width: '15%'}}>Schedule</th>\n          <th style={{width: '10%'}}>Next tick</th>\n          <th style={{width: '10%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last tick\n              <Tooltip position=\"top\" content={lastTick}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: 130}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Last run\n              <Tooltip position=\"top\" content={lastRun}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: '30%'}}>\n            <Box flex={{gap: 8, alignItems: 'end'}}>\n              Partition Set\n              <Tooltip position=\"top\" content={partitionStatus}>\n                <Icon name=\"info\" color={Colors.Gray400} />\n              </Tooltip>\n            </Box>\n          </th>\n          <th style={{width: 80}} />\n        </tr>\n      </thead>\n      <tbody>\n        {schedules.map((schedule) => (\n          <ScheduleRow repoAddress={repoAddress} schedule={schedule} key={schedule.name} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp3-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n\nconst ScheduleRow: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n}> = (props) => {\n  const {repoAddress, schedule} = props;\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, schedule.pipelineName);\n\n  const {\n    name,\n    cronSchedule,\n    executionTimezone,\n    futureTicks,\n    pipelineName,\n    scheduleState,\n  } = schedule;\n  const {status, ticks, runningCount: runningScheduleCount} = scheduleState;\n\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  return (\n    <tr key={name}>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          {errorDisplay(status, runningScheduleCount)}\n        </Box>\n      </td>\n      <td>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>{name}</Link>\n          </span>\n          <PipelineReference\n            showIcon\n            size=\"small\"\n            pipelineName={pipelineName}\n            pipelineHrefContext={repoAddress}\n            isJob={isJob}\n          />\n        </Box>\n      </td>\n      <td>\n        {cronSchedule ? (\n          <Tooltip position=\"bottom\" content={cronSchedule}>\n            <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n          </Tooltip>\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        {futureTicks.results.length && status === InstigationStatus.RUNNING ? (\n          <TimestampDisplay\n            timestamp={futureTicks.results[0].timestamp!}\n            timezone={executionTimezone}\n            timeFormat={{showSeconds: false, showTimezone: true}}\n          />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        {schedule.partitionSet ? (\n          <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n        ) : (\n          <div style={{color: Colors.Gray300}}>None</div>\n        )}\n      </td>\n      <td>\n        {schedule.partitionSet ? (\n          <Popover\n            content={\n              <Menu>\n                <MenuLink\n                  text=\"View Partition History...\"\n                  icon=\"dynamic_feed\"\n                  target=\"_blank\"\n                  to={workspacePathFromAddress(\n                    repoAddress,\n                    `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions`,\n                  )}\n                />\n                <MenuLink\n                  text=\"Launch Partition Backfill...\"\n                  icon=\"add_circle\"\n                  target=\"_blank\"\n                  to={workspacePathFromAddress(\n                    repoAddress,\n                    `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions`,\n                  )}\n                />\n              </Menu>\n            }\n            position=\"bottom-left\"\n          >\n            <Button icon={<Icon name=\"expand_more\" />} />\n          </Popover>\n        ) : null}\n      </td>\n    </tr>\n  );\n};\n","import {gql, useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {TextArea} from '@blueprintjs/core';\nimport {ButtonLink, Button, Colors, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport 'chartjs-adapter-date-fns';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {SensorSelector} from '../graphql/types';\n\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from './types/EditCursorDialog.types';\n\nexport const EditCursorDialog: React.FC<{\n  cursor: string;\n  sensorSelector: SensorSelector;\n  onClose: () => void;\n}> = ({sensorSelector, cursor, onClose}) => {\n  const [cursorValue, setCursorValue] = React.useState(cursor);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const [requestSet] = useMutation<SetSensorCursorMutation, SetSensorCursorMutationVariables>(\n    SET_CURSOR_MUTATION,\n  );\n\n  const onSave = async () => {\n    setIsSaving(true);\n    const {data} = await requestSet({\n      variables: {sensorSelector, cursor: cursorValue},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      SharedToaster.show({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      SharedToaster.show({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={true}\n      onClose={onClose}\n      style={{\n        width: '50vw',\n      }}\n      title={`Edit ${sensorSelector.sensorName} cursor`}\n    >\n      <DialogBody>\n        <TextArea\n          value={cursorValue}\n          onChange={(e) => setCursorValue(e.target.value)}\n          style={{width: '100%'}}\n        />\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button intent=\"primary\" onClick={onSave} disabled={isSaving}>\n          Set cursor value\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst SET_CURSOR_MUTATION = gql`\n  mutation SetSensorCursorMutation($sensorSelector: SensorSelector!, $cursor: String) {\n    setSensorCursor(sensorSelector: $sensorSelector, cursor: $cursor) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          status\n          typeSpecificData {\n            ... on SensorData {\n              lastCursor\n            }\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Button,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Heading,\n  FontFamily,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment.types';\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  minIntervalSeconds = Math.max(30, minIntervalSeconds);\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n}> = ({sensor, repoAddress, daemonHealth, refreshState}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    targets,\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = React.useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n  const repo = useRepository(repoAddress);\n  const pipelinesAndJobs = repo?.repository.pipelines;\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const targetCount = targets?.length || 0;\n\n  const targetNames = React.useMemo(\n    () => new Set((targets || []).map((target) => target.pipelineName)),\n    [targets],\n  );\n\n  const anyPipelines = React.useMemo(() => {\n    return (pipelinesAndJobs || []).some(\n      (pipelineOrJob) => !pipelineOrJob.isJob && targetNames.has(pipelineOrJob.name),\n    );\n  }, [pipelinesAndJobs, targetNames]);\n\n  const pipelineOrJobLabel = React.useMemo(() => {\n    if (anyPipelines) {\n      return targetCount > 1 ? 'Jobs / Pipelines' : 'Pipeline';\n    }\n    return targetCount > 1 ? 'Jobs' : 'Job';\n  }, [anyPipelines, targetCount]);\n\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n          </Box>\n        }\n        icon=\"sensors\"\n        tags={\n          <>\n            <Tag icon=\"sensors\">\n              Sensor in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {sensor.nextTick && daemonHealth && status === InstigationStatus.RUNNING ? (\n              <Tag icon=\"timer\">\n                Next tick: <TimestampDisplay timestamp={sensor.nextTick.timestamp!} />\n              </Tag>\n            ) : null}\n          </>\n        }\n        right={\n          <Box margin={{top: 4}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} />\n                    <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.targets && sensor.targets.length ? (\n            <tr>\n              <td>{pipelineOrJobLabel}</td>\n              <td>\n                <Group direction=\"column\" spacing={2}>\n                  {sensor.targets.map((target) =>\n                    target.pipelineName ? (\n                      <PipelineReference\n                        key={target.pipelineName}\n                        pipelineName={target.pipelineName}\n                        pipelineHrefContext={repoAddress}\n                        isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                      />\n                    ) : null,\n                  )}\n                </Group>\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Cursor</td>\n            <td>\n              {isCursorEditing ? (\n                <EditCursorDialog\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              ) : null}\n              <Box flex={{direction: 'row', alignItems: 'center'}}>\n                <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                  {cursor ? cursor : 'None'}\n                </Box>\n                <Button onClick={() => setCursorEditing(true)}>Edit</Button>\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored Assets</td>\n              <td>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {metadata.assetKeys.map((key) => (\n                    <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                  ))}\n                </Box>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SensorInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const sensorHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SENSOR',\n    );\n    if (sensorHealths) {\n      const sensorHealth = sensorHealths[0];\n      healthy = !!(sensorHealth.required && sensorHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The sensor daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a\n                href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const HeaderCell: React.FC = ({children}) => (\n  <Box\n    padding={{vertical: 8, horizontal: 24}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n    style={{whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden'}}\n  >\n    {children}\n  </Box>\n);\n\nexport const RowCell: React.FC = ({children}) => (\n  <Box\n    padding={{horizontal: 24, vertical: 12}}\n    flex={{direction: 'column', justifyContent: 'flex-start'}}\n    style={{color: Colors.Gray500, overflow: 'hidden'}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n  >\n    {children}\n  </Box>\n);\n\nexport const Container = styled.div`\n  height: 100%;\n  overflow: auto;\n`;\n\ntype InnerProps = {\n  $totalHeight: number;\n};\n\nexport const Inner = styled.div.attrs<InnerProps>(({$totalHeight}) => ({\n  style: {\n    height: `${$totalHeight}px`,\n  },\n}))<InnerProps>`\n  position: relative;\n  width: 100%;\n`;\n\ntype RowProps = {$height: number; $start: number};\n\nexport const Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n`;\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import * as React from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagit.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = React.useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = React.useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = React.useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RUN_FRAGMENT} from '../runs/RunFragments';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReExecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const {canLaunchPipelineReexecution} = usePermissionsForLocation(repoAddress.location);\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n\n  const fetchIfPossible = React.useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const onLaunch = useJobReExecution(run);\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => onLaunch({type: 'all'})}\n      disabled={!canLaunchPipelineReexecution.enabled || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => onLaunch({type: 'from-failure'})}\n      disabled={!canLaunchPipelineReexecution.enabled || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <Popover\n      onOpened={() => fetchIfPossible()}\n      content={\n        <Menu>\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n            })}\n            icon=\"job\"\n            text=\"View job\"\n          />\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n              path: '/runs',\n            })}\n            icon=\"checklist\"\n            text=\"View all recent runs\"\n          />\n          {canLaunchPipelineReexecution.enabled ? (\n            reExecuteAllItem\n          ) : (\n            <Tooltip content={canLaunchPipelineReexecution.disabledReason} display=\"block\">\n              {reExecuteAllItem}\n            </Tooltip>\n          )}\n          {canLaunchPipelineReexecution.enabled ? (\n            reExecuteFromFailureItem\n          ) : (\n            <Tooltip content={canLaunchPipelineReexecution.disabledReason} display=\"block\">\n              {reExecuteFromFailureItem}\n            </Tooltip>\n          )}\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunFragment\n      }\n    }\n  }\n\n  ${RUN_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const {schedules, sensors} = data.pipelineOrError;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [data]);\n\n  const latestRuns = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const runs = data.pipelineOrError.runs;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>\n            {data?.pipelineOrError.__typename === 'Pipeline'\n              ? data.pipelineOrError.description\n              : ''}\n          </CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n              {/* {schedules.length ? <NextTick schedules={schedules} /> : null} */}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu job={{isJob, name, runs: latestRuns}} repoAddress={repoAddress} />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp3-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1fr 1fr 148px 180px 80px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.Dark,\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={scheduleData.scheduleState.ticks[0]}\n                instigationType={InstigationType.SCHEDULE}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs.length > 0 ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell />\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp3-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1.5fr 1fr 120px 148px 180px';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData?.targets && sensorData.targets.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.targets.map((target) => (\n                  <PipelineReference\n                    key={target.pipelineName}\n                    showIcon\n                    size=\"small\"\n                    pipelineName={target.pipelineName}\n                    pipelineHrefContext={repoAddress}\n                    isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                  />\n                ))}\n              </Box>\n            ) : null}\n            {sensorData?.metadata.assetKeys && sensorData.metadata.assetKeys.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.metadata.assetKeys.map((key) => (\n                  <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                ))}\n              </Box>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.Dark}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={sensorData.sensorState.ticks[0]}\n                instigationType={InstigationType.SENSOR}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs.length > 0 ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Job / Asset</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}> = ({queryResult, noneString = 'None'}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText: React.FC = ({children}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.Gray500};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: LazyQueryExecFunction<any, any>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n"],"names":["AssetLink","props","path","icon","url","isGroup","textStyle","linkUrl","assetDetailsPathForKey","assetPath","reduce","accum","elem","ii","join","flex","direction","alignItems","display","style","maxWidth","margin","right","top","name","color","Colors","to","overflow","wordBreak","text","BackfillPartitionsRequestedDialog","backfill","onClose","Dialog","isOpen","title","fontSize","fontFamily","FontFamily","backfillId","Box","gap","maxHeight","overflowY","partitionNames","map","partitionName","topBorder","Button","onClick","BackfillRow","allPartitions","showBackfillTarget","onTerminateBackfill","onResumeBackfill","onShowStepStatus","onShowPartitionsRequested","statusDetails","useLazyQuery","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","variables","notifyOnNetworkStatusChange","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","numPartitions","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","queryStatus","queryResult","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","React","partitionBackfillOrError","__typename","counts","statuses","Object","fromEntries","partitionStatusCounts","e","runStatus","count","partitionStatuses","results","countBy","k","runsUrl","runsPathWithFilters","token","value","width","lineHeight","timestamp","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","BackfillStatusTag","BackfillRunStatus","BackfillMenu","canCancelRuns","RunStatus","history","useHistory","usePermissionsDEPRECATED","canCancelPartitionBackfill","canLaunchPartitionBackfill","Popover","content","Menu","enabled","numCancelable","intent","status","BulkActionStatus","partitionSet","push","position","Icon","partitionCounts","entries","key","runStatusToPartitionState","PartitionStatus","partitionStateForKey","_","filter","s","splitPartitions","entry","find","r","runId","succeededCount","PartitionState","inProgressCount","failedCount","assetSelection","partitionSetName","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","repo","useRepository","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","fontWeight","workspacePipelinePath","repoName","repoLocation","pipelineName","isJob","isThisThingAJob","encodeURIComponent","workspacePathFromAddress","repoAddressAsHumanString","undefined","length","AssetKeyTagCollection","assetKeys","modalTitle","PipelineReference","showIcon","size","pipelineHrefContext","location","TagButton","Tag","interactive","toLocaleString","small","hideStatusTooltip","includes","bottom","error","showCustomAlert","body","PythonErrorInfo","Array","from","inProgressStatuses","some","styled","gql","BackfillStepStatusDialog","BackfillStepStatusDialogContent","pageSize","setPageSize","offset","setOffset","runsFilter","partitions","usePartitionStepQuery","partitionTagName","DagsterTag","repositorySelector","repoAddressToSelector","jobName","skipQuery","BackfillTerminationDialog","onComplete","useMutation","CANCEL_BACKFILL_MUTATION","cancelBackfill","useQuery","skip","isSubmitting","setIsSubmitting","unfinishedMap","partition","cancelableStatuses","numUnscheduled","cancel","disabled","TerminationDialog","keys","selectedRuns","PYTHON_ERROR_FRAGMENT","BackfillTable","backfills","refetch","terminationBackfill","setTerminationBackfill","stepStatusBackfill","setStepStatusBackfill","partitionsRequestedBackfill","setPartitionsRequestedBackfill","RESUME_BACKFILL_MUTATION","resumeBackfill","candidateId","resume","resumePartitionBackfill","SharedToaster","message","Group","spacing","action","Table","$monospaceFont","BACKFILL_TABLE_FRAGMENT","LastRunSummary","run","showHover","showButton","showSummary","justifyContent","tagElement","interactionKind","hoverOpenDelay","tag","failedStatuses","id","A","StepSummaryForRun","STEP_SUMMARY_FOR_RUN_QUERY","pipelineRunOrError","relevantSteps","stepStats","step","StepEventStatus","stepCount","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","stepKey","TickTag","tick","instigationType","open","setOpen","InstigationTickStatus","runIds","underline","RunList","runKeys","skipReason","targetTagName","showError","InstigationType","LinkButton","minimal","marginLeft","assertUnreachable","LAUNCHED_RUN_LIST_QUERY","loading","padding","purpose","pipelineRunsOrError","description","runs","FailedRunList","originRunIds","border","side","TICK_TAG_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","RunStatusLink","target","rel","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","UnloadableSensors","sensorStates","showSubheading","vertical","horizontal","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","scheduleState","ScheduleStateRow","selectorId","ticks","canStopSensor","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","toggleOffInFlight","confirm","useConfirmation","onChangeSwitch","InstigationStatus","jobOriginId","jobSelectorId","lacksPermission","latestTick","element","format","checked","onChange","disabledReason","checkbox","instigatorState","canStopRunningSchedule","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","whiteSpace","humanCronString","RepositoryLink","showRefresh","canReloadRepositoryLocation","usePermissionsForLocation","repoString","marginRight","RepositoryName","tryReload","reloading","ReloadTooltip","StyledButton","Link","Tooltip","IconWrapper","ScheduleOrSensorTag","schedules","sensors","showSwitch","scheduleCount","sensorCount","buttonText","MatchingSchedule","schedule","MatchingSensor","sensor","executionTimezone","running","textOverflow","placement","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","tags","Spinner","NonIdealState","RunTable","getVisibleItemCount","viewportWidth","ceil","BOX_SIZE","PartitionPerAssetStatus","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","healthByAssetKey","keyBy","a","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","buildLayout","nodes","mode","GanttChartMode","boxes","b","node","dimensions","stepRows","box","x","totalFailurePercent","finalFailurePercent","partitionColumns","partitionKeys","partitionKey","idx","runsLoaded","steps","unix","partitionStateToStatusSquareColor","stateForSingleDimension","PartitionStepStatus","showLatestRun","state","PartitionPerOpStatus","pipelineSelector","pipeline","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","useViewport","viewport","containerProps","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","max","visibleEnd","visibleColumns","slice","minUnix","Date","now","maxUnix","min","timeboundsOfPartitions","topLabelHeight","topLabelHeightForLabels","p","PartitionRunMatrixContainer","autoFocus","floating","flexShrink","height","paddingLeft","Divider","stepName","PagerControl","$direction","zIndex","$height","label","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","left","squareStatus","opened","setOpened","toLowerCase","className","onMouseEnter","onMouseLeave","onOpening","onClosed","MenuLink","linkToRunEvent","STEP_STATUS_COLORS","SUCCESS","SUCCESS_SKIPPED","FAILURE","FAILURE_SKIPPED","SKIPPED","IN_PROGRESS","flatGradient","GridColumn","multiselectFocused","TopLabelTiltedInner","LeftLabel","TopLabel","labels","maxlength","TopLabelTilted","GRID_FLOATING_CONTAINER_WIDTH","GridFloatingContainer","MISSING_STEP_STATUSES","Set","getStartTime","startTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","RegExp","match","inputs","cachedMatrixData","current","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","layout","options","partitionsByName","sort","blankState","previousRunStatus","lastRun","lastRunStepStatus","stats","has","currRunStatus","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","splice","every","buildMatrixData","all","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","split","v","runTags","parse","stopIdx","nextCursorIdx","sliceNames","Promise","partitionSetTag","partitionTag","runTagsFilter","fetchRunsForFilter","limit","fetched","concat","timer","setInterval","clearInterval","recent","pending","relevant","t","updated","o","byName","assemblePartitions","fetchPolicy","PARTITION_STEP_LOADER_QUERY","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","RUN_STATUS_COLORS","QUEUED","NOT_STARTED","STARTING","MANAGED","STARTED","CANCELING","CANCELED","RunStatusPez","opacity","Pez","$color","$opacity","RunStatusPezList","fade","RunStatusOverlay","OverlayContainer","OverlayTitle","RunRow","SummaryContainer","statusToColor","mergeStatusToBackground","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","successStatuses","statusArr","runCount","colors","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","ROW_HEIGHT","RunTimeline","jobs","range","setWidth","includesTicks","buckets","job","repoKey","repoAddressAsURLString","jobsForRepo","allKeys","useRepoExpansionState","expandedKeys","onToggle","onToggleAll","observer","containerRef","ResizeObserver","contentRect","observe","disconnect","Timeline","DATE_TIME_HEIGHT","ref","repoOrder","localeCompare","nextTop","TIME_HEADER_HEIGHT","expandedJobCount","duplicateRepoNames","findDuplicateRepoNames","repoAddressFromPath","anyJobs","timelineHeight","TimeDividers","interval","TimelineSection","isDuplicateRepoName","RunsEmptyOrLoading","getModifierState","SectionHeaderContainer","$top","RunStatusTags","RunTimelineRow","RunStatusTagsWithCounts","inProgressText","succeededText","failedText","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeZoneName","timeOnlyOptions","hour","start","end","formatDateTime","TimezoneContext","storedTimezone","timeZone","browserTimezone","date","Intl","DateTimeFormat","navigator","language","useFormatDateTime","dateMarkers","totalTime","startDate","startDateStringWithTimezone","dayBoundaries","cursor","valueOf","dayStart","getTime","dayEnd","setDate","getDate","startLeftMsec","endRight","toString","timeMarkers","firstMarker","markerCount","time","replace","marker","nowLeft","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","containerWidth","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","Row","JobName","jobType","MiddleTruncate","RunChunks","batch","RunChunk","$background","$multiple","RunHoverContent","BatchCount","background","AnchorButton","sliced","remaining","HoverContentJobName","TimeElapsed","startUnix","endUnix","overlap","config","rangeLength","batches","consolidated","shift","next","canBatch","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","useJobReExecution","LAUNCH_PIPELINE_REEXECUTION_MUTATION","launchPipelineReexecution","repoMatch","useRepositoryForRun","pipelineSnapshotId","getReexecutionVariables","repositoryLocation","repository","handleLaunchResult","preserveQuerystring","behavior","showLaunchError","RUN_STATUSES","SchedulePartitionStatus","scheduleName","partitionPath","partitionURL","SCHEDULE_PARTITION_STATUS_QUERY","scheduleSelector","retrievePartitionStatus","partitionFragment","scheduleOrError","RetrievedSchedulePartitionStatus","loadable","partitionStatusesOrError","partitionsByType","displayStatus","calculateDisplayStatus","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","href","SchedulesTable","partitionStatus","ScheduleRow","errorDisplay","runningScheduleCount","errors","popoverClassName","index","fill","futureTicks","runningCount","timezone","timeFormat","showSeconds","showTimezone","EditCursorDialog","sensorSelector","cursorValue","setCursorValue","isSaving","setIsSaving","SET_CURSOR_MUTATION","requestSet","onSave","setSensorCursor","ButtonLink","sensorName","humanizeSensorInterval","minIntervalSeconds","SensorDetails","refreshState","targets","metadata","isCursorEditing","setCursorEditing","pipelinesAndJobs","pipelines","targetCount","targetNames","anyPipelines","pipelineOrJob","pipelineOrJobLabel","lastCursor","PageHeader","SensorSwitch","nextTick","QueryRefresh","MetadataTable","marginTop","SensorInfo","sensorHealths","sensorHealth","HeaderCell","children","RowCell","Container","Inner","$totalHeight","$start","transform","repoNames","uniques","duplicates","add","validateExpandedKeys","parsed","isArray","collapsedKey","collapsedStorageKey","basePath","buildStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","nextCollapsedKeys","delete","expand","collapsedSet","JobMenu","canLaunchPipelineReexecution","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","onLaunch","reExecuteAllItem","type","canRunAllSteps","reExecuteFromFailureItem","canRunFromFailure","onOpened","RUN_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","SINGLE_JOB_QUERY","selector","buildPipelineSelector","queryJob","pipelineOrError","latestRuns","RowGrid","ScheduleSensorTagContainer","reverse","VirtualizedJobHeader","gridTemplateColumns","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","VirtualizedScheduleRow","SINGLE_SCHEDULE_QUERY","querySchedule","scheduleData","cronString","ScheduleStringContainer","VirtualizedScheduleHeader","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorData","sensorOrError","VirtualizedSensorHeader","RepoRow","LoadingOrNone","noneString","called","CaptionText","CaptionTextContainer","Caption","lazyQueryFn","setTimeout","clearTimeout"],"sourceRoot":""}